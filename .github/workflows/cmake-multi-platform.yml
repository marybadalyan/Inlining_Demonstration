# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Debug - List ALL Files in Workspace
        if: always()
        shell: bash
        run: |
          echo "--- Listing ALL files in the entire workspace (${{ github.workspace }}) ---"
          ls -R "${{ github.workspace }}"
          echo "--------------------------------------------------------------------"

      # - name: Debug Linux Build Output
      #   if: runner.os == 'Linux'
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   shell: bash
      #   run: |
      #     echo "--- 1. Verifying what files exist and their sizes ---"
      #     ls -R .
      #     echo "---"
      #     echo "Line count of generated assembly files:"
      #     wc -l analysis/assembly_O0.txt || echo "assembly_O0.txt not found"
      #     wc -l analysis/assembly_O2.txt || echo "assembly_O2.txt not found"
      #     echo "--- 2. Checking if objdump is available ---"
      #     which objdump
      #     echo "--- 3. Verifying the executable file type ---"
      #     file OP_level_1
      #     file OP_level_2
      #     echo "--- 4. Manually re-running the objdump command ---"
      #     echo "Attempting to generate assembly for OP_level_1 (-O0)..."
      #     objdump -d -M intel OP_level_1 > manual_O0_test.txt
      #     echo "objdump exit code: $?"
      #     echo "Size of manually generated file:"
      #     ls -lh manual_O0_test.txt
      #     echo "---"
      #     echo "Attempting to generate assembly for OP_level_2 (-O2)..."
      #     objdump -d -M intel OP_level_2 > manual_O2_test.txt
      #     echo "objdump exit code: $?"
      #     echo "Size of manually generated file:"
      #     ls -lh manual_O2_test.txt  

      - name: Run Executables and Analyze
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        shell: bash
        run: |
          exe="inlining_test"
          analysis_dir="analysis"
          mkdir -p "${analysis_dir}"

          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${exe}.exe"
            opt_level="/Od"
          else
            executable_name="${exe}"
            opt_level="-O0"
          fi

          analysis_file="${analysis_dir}/assembly_${{ matrix.build_type }}.txt"

          echo "--------------------------------------------------"
          echo "Running ${executable_name}..."

          if [ -f "${executable_name}" ]; then
            "./${executable_name}" "${analysis_file}" "${opt_level}"
          else
            echo "Error: Executable not found: $(pwd)/${executable_name}"
            exit 1
          fi
