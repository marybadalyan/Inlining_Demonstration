Microsoft (R) COFF/PE Dumper Version 14.43.34808.0
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file C:\Users\MeriBadalyan\Inlining_Demonstration\build\inlining_test.dir\Debug\main.obj

File Type: COFF OBJECT

?run@@YA_JPEAHH@Z (__int64 __cdecl run(int *,int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 30        sub         rsp,30h
  000000000000000E: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000017: C7 44 24 28 00 00  mov         dword ptr [rsp+28h],0
                    00 00
  000000000000001F: EB 0A              jmp         000000000000002B
  0000000000000021: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000025: FF C0              inc         eax
  0000000000000027: 89 44 24 28        mov         dword ptr [rsp+28h],eax
  000000000000002B: 83 7C 24 28 64     cmp         dword ptr [rsp+28h],64h
  0000000000000030: 7D 20              jge         0000000000000052
  0000000000000032: 8B 54 24 48        mov         edx,dword ptr [rsp+48h]
  0000000000000036: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003B: E8 00 00 00 00     call        ?sum_array@@YA_JPEAHH@Z
  0000000000000040: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000045: 48 03 C8           add         rcx,rax
  0000000000000048: 48 8B C1           mov         rax,rcx
  000000000000004B: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000050: EB CF              jmp         0000000000000021
  0000000000000052: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000057: 48 83 C4 30        add         rsp,30h
  000000000000005B: 5F                 pop         rdi
  000000000000005C: C3                 ret
  000000000000005D: CC                 int         3
  000000000000005E: CC                 int         3
  000000000000005F: CC                 int         3
  0000000000000060: CC                 int         3
  0000000000000061: CC                 int         3
  0000000000000062: CC                 int         3
  0000000000000063: CC                 int         3
  0000000000000064: CC                 int         3
  0000000000000065: CC                 int         3
  0000000000000066: CC                 int         3
  0000000000000067: CC                 int         3
  0000000000000068: CC                 int         3
  0000000000000069: CC                 int         3
  000000000000006A: CC                 int         3
  000000000000006B: CC                 int         3
  000000000000006C: CC                 int         3
  000000000000006D: CC                 int         3
  000000000000006E: CC                 int         3
  000000000000006F: CC                 int         3
main:
  0000000000000070: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000075: 89 4C 24 08        mov         dword ptr [rsp+8],ecx
  0000000000000079: 57                 push        rdi
  000000000000007A: B8 60 14 00 00     mov         eax,1460h
  000000000000007F: E8 00 00 00 00     call        __chkstk
  0000000000000084: 48 2B E0           sub         rsp,rax
  0000000000000087: 48 8D 7C 24 30     lea         rdi,[rsp+30h]
  000000000000008C: B9 0C 05 00 00     mov         ecx,50Ch
  0000000000000091: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000096: F3 AB              rep stos    dword ptr [rdi]
  0000000000000098: 8B 8C 24 70 14 00  mov         ecx,dword ptr [rsp+1470h]
                    00
  000000000000009F: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  00000000000000A6: 48 33 C4           xor         rax,rsp
  00000000000000A9: 48 89 84 24 58 14  mov         qword ptr [rsp+1458h],rax
                    00 00
  00000000000000B1: C7 84 24 44 10 00  mov         dword ptr [rsp+1044h],0
                    00 00 00 00 00
  00000000000000BC: EB 10              jmp         00000000000000CE
  00000000000000BE: 8B 84 24 44 10 00  mov         eax,dword ptr [rsp+1044h]
                    00
  00000000000000C5: FF C0              inc         eax
  00000000000000C7: 89 84 24 44 10 00  mov         dword ptr [rsp+1044h],eax
                    00
  00000000000000CE: 81 BC 24 44 10 00  cmp         dword ptr [rsp+1044h],400h
                    00 00 04 00 00
  00000000000000D9: 7D 1F              jge         00000000000000FA
  00000000000000DB: 8B 84 24 44 10 00  mov         eax,dword ptr [rsp+1044h]
                    00
  00000000000000E2: 99                 cdq
  00000000000000E3: B9 0A 00 00 00     mov         ecx,0Ah
  00000000000000E8: F7 F9              idiv        eax,ecx
  00000000000000EA: 8B C2              mov         eax,edx
  00000000000000EC: 48 63 8C 24 44 10  movsxd      rcx,dword ptr [rsp+1044h]
                    00 00
  00000000000000F4: 89 44 8C 40        mov         dword ptr [rsp+rcx*4+40h],eax
  00000000000000F8: EB C4              jmp         00000000000000BE
  00000000000000FA: 83 BC 24 70 14 00  cmp         dword ptr [rsp+1470h],3
                    00 03
  0000000000000102: 7D 1D              jge         0000000000000121
  0000000000000104: 48 8D 15 00 00 00  lea         rdx,[$SG84532]
                    00
  000000000000010B: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000112: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000117: B8 01 00 00 00     mov         eax,1
  000000000000011C: E9 04 09 00 00     jmp         0000000000000A25
  0000000000000121: B8 08 00 00 00     mov         eax,8
  0000000000000126: 48 6B C0 01        imul        rax,rax,1
  000000000000012A: 48 8B 8C 24 78 14  mov         rcx,qword ptr [rsp+1478h]
                    00 00
  0000000000000132: 48 8B 14 01        mov         rdx,qword ptr [rcx+rax]
  0000000000000136: 48 8D 8C 24 58 10  lea         rcx,[rsp+1058h]
                    00 00
  000000000000013E: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  0000000000000143: 90                 nop
  0000000000000144: B8 08 00 00 00     mov         eax,8
  0000000000000149: 48 6B C0 02        imul        rax,rax,2
  000000000000014D: 48 8B 8C 24 78 14  mov         rcx,qword ptr [rsp+1478h]
                    00 00
  0000000000000155: 48 8B 14 01        mov         rdx,qword ptr [rcx+rax]
  0000000000000159: 48 8D 8C 24 98 10  lea         rcx,[rsp+1098h]
                    00 00
  0000000000000161: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  0000000000000166: 90                 nop
  0000000000000167: 48 C7 84 24 C8 10  mov         qword ptr [rsp+10C8h],0
                    00 00 00 00 00 00
  0000000000000173: 48 8D 8C 24 D8 10  lea         rcx,[rsp+10D8h]
                    00 00
  000000000000017B: E8 00 00 00 00     call        ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  0000000000000180: BA 00 04 00 00     mov         edx,400h
  0000000000000185: 48 8D 4C 24 40     lea         rcx,[rsp+40h]
  000000000000018A: E8 00 00 00 00     call        ?run@@YA_JPEAHH@Z
  000000000000018F: 48 89 84 24 C8 10  mov         qword ptr [rsp+10C8h],rax
                    00 00
  0000000000000197: 48 8D 8C 24 F8 10  lea         rcx,[rsp+10F8h]
                    00 00
  000000000000019F: E8 00 00 00 00     call        ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  00000000000001A4: 90                 nop
  00000000000001A5: 4C 8D 84 24 D8 10  lea         r8,[rsp+10D8h]
                    00 00
  00000000000001AD: 48 8D 94 24 F8 10  lea         rdx,[rsp+10F8h]
                    00 00
  00000000000001B5: 48 8D 8C 24 30 13  lea         rcx,[rsp+1330h]
                    00 00
  00000000000001BD: E8 00 00 00 00     call        ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
  00000000000001C2: 48 8B D0           mov         rdx,rax
  00000000000001C5: 48 8D 8C 24 18 11  lea         rcx,[rsp+1118h]
                    00 00
  00000000000001CD: E8 00 00 00 00     call        ??$?0_JU?$ratio@$00$0DLJKMKAA@@std@@$0A@@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
  00000000000001D2: 90                 nop
  00000000000001D3: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_CYAN@Color@@3PEBDEB]
                    00
  00000000000001DA: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000001E1: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000001E6: 48 8D 15 00 00 00  lea         rdx,[$SG84533]
                    00
  00000000000001ED: 48 8B C8           mov         rcx,rax
  00000000000001F0: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000001F5: 48 8D 94 24 58 10  lea         rdx,[rsp+1058h]
                    00 00
  00000000000001FD: 48 8B C8           mov         rcx,rax
  0000000000000200: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000205: 48 89 84 24 50 13  mov         qword ptr [rsp+1350h],rax
                    00 00
  000000000000020D: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  0000000000000214: 48 89 84 24 58 13  mov         qword ptr [rsp+1358h],rax
                    00 00
  000000000000021C: 48 8B 94 24 58 13  mov         rdx,qword ptr [rsp+1358h]
                    00 00
  0000000000000224: 48 8B 8C 24 50 13  mov         rcx,qword ptr [rsp+1350h]
                    00 00
  000000000000022C: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000231: 48 89 84 24 60 13  mov         qword ptr [rsp+1360h],rax
                    00 00
  0000000000000239: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000240: 48 8B 8C 24 60 13  mov         rcx,qword ptr [rsp+1360h]
                    00 00
  0000000000000248: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  000000000000024E: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_MAGENTA@Color@@3PEBDEB]
                    00
  0000000000000255: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000025C: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000261: 48 8D 15 00 00 00  lea         rdx,[$SG84534]
                    00
  0000000000000268: 48 8B C8           mov         rcx,rax
  000000000000026B: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000270: 48 8D 94 24 98 10  lea         rdx,[rsp+1098h]
                    00 00
  0000000000000278: 48 8B C8           mov         rcx,rax
  000000000000027B: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000280: 48 89 84 24 68 13  mov         qword ptr [rsp+1368h],rax
                    00 00
  0000000000000288: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  000000000000028F: 48 89 84 24 70 13  mov         qword ptr [rsp+1370h],rax
                    00 00
  0000000000000297: 48 8B 94 24 70 13  mov         rdx,qword ptr [rsp+1370h]
                    00 00
  000000000000029F: 48 8B 8C 24 68 13  mov         rcx,qword ptr [rsp+1368h]
                    00 00
  00000000000002A7: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000002AC: 48 89 84 24 78 13  mov         qword ptr [rsp+1378h],rax
                    00 00
  00000000000002B4: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000002BB: 48 8B 8C 24 78 13  mov         rcx,qword ptr [rsp+1378h]
                    00 00
  00000000000002C3: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000002C9: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_YELLOW@Color@@3PEBDEB]
                    00
  00000000000002D0: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000002D7: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000002DC: 48 8D 15 00 00 00  lea         rdx,[$SG84536]
                    00
  00000000000002E3: 48 8B C8           mov         rcx,rax
  00000000000002E6: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000002EB: 48 89 84 24 80 13  mov         qword ptr [rsp+1380h],rax
                    00 00
  00000000000002F3: 48 8D 8C 24 18 11  lea         rcx,[rsp+1118h]
                    00 00
  00000000000002FB: E8 00 00 00 00     call        ?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEBANXZ
  0000000000000300: F2 0F 11 84 24 88  movsd       mmword ptr [rsp+1388h],xmm0
                    13 00 00
  0000000000000309: F2 0F 10 8C 24 88  movsd       xmm1,mmword ptr [rsp+1388h]
                    13 00 00
  0000000000000312: 48 8B 8C 24 80 13  mov         rcx,qword ptr [rsp+1380h]
                    00 00
  000000000000031A: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z]
  0000000000000320: 48 8D 15 00 00 00  lea         rdx,[$SG84535]
                    00
  0000000000000327: 48 8B C8           mov         rcx,rax
  000000000000032A: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000032F: 48 89 84 24 90 13  mov         qword ptr [rsp+1390h],rax
                    00 00
  0000000000000337: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  000000000000033E: 48 89 84 24 98 13  mov         qword ptr [rsp+1398h],rax
                    00 00
  0000000000000346: 48 8B 94 24 98 13  mov         rdx,qword ptr [rsp+1398h]
                    00 00
  000000000000034E: 48 8B 8C 24 90 13  mov         rcx,qword ptr [rsp+1390h]
                    00 00
  0000000000000356: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000035B: 48 89 84 24 A0 13  mov         qword ptr [rsp+13A0h],rax
                    00 00
  0000000000000363: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  000000000000036A: 48 8B 8C 24 A0 13  mov         rcx,qword ptr [rsp+13A0h]
                    00 00
  0000000000000372: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000378: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_YELLOW@Color@@3PEBDEB]
                    00
  000000000000037F: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000386: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000038B: 48 8D 15 00 00 00  lea         rdx,[$SG84537]
                    00
  0000000000000392: 48 8B C8           mov         rcx,rax
  0000000000000395: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000039A: 48 89 84 24 A8 13  mov         qword ptr [rsp+13A8h],rax
                    00 00
  00000000000003A2: 48 8B 94 24 C8 10  mov         rdx,qword ptr [rsp+10C8h]
                    00 00
  00000000000003AA: 48 8B 8C 24 A8 13  mov         rcx,qword ptr [rsp+13A8h]
                    00 00
  00000000000003B2: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z]
  00000000000003B8: 48 89 84 24 B0 13  mov         qword ptr [rsp+13B0h],rax
                    00 00
  00000000000003C0: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  00000000000003C7: 48 89 84 24 B8 13  mov         qword ptr [rsp+13B8h],rax
                    00 00
  00000000000003CF: 48 8B 94 24 B8 13  mov         rdx,qword ptr [rsp+13B8h]
                    00 00
  00000000000003D7: 48 8B 8C 24 B0 13  mov         rcx,qword ptr [rsp+13B0h]
                    00 00
  00000000000003DF: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000003E4: 48 89 84 24 C0 13  mov         qword ptr [rsp+13C0h],rax
                    00 00
  00000000000003EC: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000003F3: 48 8B 8C 24 C0 13  mov         rcx,qword ptr [rsp+13C0h]
                    00 00
  00000000000003FB: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000401: C7 44 24 20 01 00  mov         dword ptr [rsp+20h],1
                    00 00
  0000000000000409: 41 B9 40 00 00 00  mov         r9d,40h
  000000000000040F: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000415: 48 8D 94 24 58 10  lea         rdx,[rsp+1058h]
                    00 00
  000000000000041D: 48 8D 8C 24 40 11  lea         rcx,[rsp+1140h]
                    00 00
  0000000000000425: E8 00 00 00 00     call        ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
  000000000000042A: 90                 nop
  000000000000042B: 48 8B 84 24 40 11  mov         rax,qword ptr [rsp+1140h]
                    00 00
  0000000000000433: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000437: 48 8D 84 04 40 11  lea         rax,[rsp+rax+1140h]
                    00 00
  000000000000043F: 48 8B C8           mov         rcx,rax
  0000000000000442: FF 15 00 00 00 00  call        qword ptr [__imp_??7ios_base@std@@QEBA_NXZ]
  0000000000000448: 0F B6 C0           movzx       eax,al
  000000000000044B: 85 C0              test        eax,eax
  000000000000044D: 74 54              je          00000000000004A3
  000000000000044F: 48 8D 15 00 00 00  lea         rdx,[$SG84539]
                    00
  0000000000000456: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000045D: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000462: 90                 nop
  0000000000000463: C7 84 24 38 13 00  mov         dword ptr [rsp+1338h],1
                    00 01 00 00 00
  000000000000046E: 48 8D 8C 24 40 11  lea         rcx,[rsp+1140h]
                    00 00
  0000000000000476: E8 00 00 00 00     call        ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  000000000000047B: 90                 nop
  000000000000047C: 48 8D 8C 24 98 10  lea         rcx,[rsp+1098h]
                    00 00
  0000000000000484: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000489: 90                 nop
  000000000000048A: 48 8D 8C 24 58 10  lea         rcx,[rsp+1058h]
                    00 00
  0000000000000492: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000497: 8B 84 24 38 13 00  mov         eax,dword ptr [rsp+1338h]
                    00
  000000000000049E: E9 82 05 00 00     jmp         0000000000000A25
  00000000000004A3: 48 8D 15 00 00 00  lea         rdx,[$SG84541]
                    00
  00000000000004AA: 48 8D 8C 24 68 12  lea         rcx,[rsp+1268h]
                    00 00
  00000000000004B2: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  00000000000004B7: 90                 nop
  00000000000004B8: 48 8D 15 00 00 00  lea         rdx,[$SG84542]
                    00
  00000000000004BF: 48 8D 8C 24 A8 12  lea         rcx,[rsp+12A8h]
                    00 00
  00000000000004C7: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  00000000000004CC: 90                 nop
  00000000000004CD: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000004D5: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000004DA: 90                 nop
  00000000000004DB: C6 84 24 14 13 00  mov         byte ptr [rsp+1314h],0
                    00 00
  00000000000004E3: C7 84 24 18 13 00  mov         dword ptr [rsp+1318h],0
                    00 00 00 00 00
  00000000000004EE: C7 84 24 1C 13 00  mov         dword ptr [rsp+131Ch],0
                    00 00 00 00 00
  00000000000004F9: C7 84 24 20 13 00  mov         dword ptr [rsp+1320h],0
                    00 00 00 00 00
  0000000000000504: C7 84 24 24 13 00  mov         dword ptr [rsp+1324h],0
                    00 00 00 00 00
  000000000000050F: 48 8D 94 24 E8 12  lea         rdx,[rsp+12E8h]
                    00 00
  0000000000000517: 48 8D 8C 24 40 11  lea         rcx,[rsp+1140h]
                    00 00
  000000000000051F: E8 00 00 00 00     call        ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000524: 48 89 84 24 40 13  mov         qword ptr [rsp+1340h],rax
                    00 00
  000000000000052C: 48 8B 84 24 40 13  mov         rax,qword ptr [rsp+1340h]
                    00 00
  0000000000000534: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000537: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000053B: 48 8B 8C 24 40 13  mov         rcx,qword ptr [rsp+1340h]
                    00 00
  0000000000000543: 48 03 C8           add         rcx,rax
  0000000000000546: 48 8B C1           mov         rax,rcx
  0000000000000549: 48 8B C8           mov         rcx,rax
  000000000000054C: FF 15 00 00 00 00  call        qword ptr [__imp_??Bios_base@std@@QEBA_NXZ]
  0000000000000552: 0F B6 C0           movzx       eax,al
  0000000000000555: 85 C0              test        eax,eax
  0000000000000557: 0F 84 60 02 00 00  je          00000000000007BD
  000000000000055D: 0F B6 84 24 14 13  movzx       eax,byte ptr [rsp+1314h]
                    00 00
  0000000000000565: 85 C0              test        eax,eax
  0000000000000567: 75 5C              jne         00000000000005C5
  0000000000000569: 45 33 C0           xor         r8d,r8d
  000000000000056C: 48 8D 94 24 68 12  lea         rdx,[rsp+1268h]
                    00 00
  0000000000000574: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  000000000000057C: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z
  0000000000000581: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000585: 74 39              je          00000000000005C0
  0000000000000587: C6 84 24 14 13 00  mov         byte ptr [rsp+1314h],1
                    00 01
  000000000000058F: 48 8D 15 00 00 00  lea         rdx,[$SG84546]
                    00
  0000000000000596: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000059D: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000005A2: 48 89 84 24 C8 13  mov         qword ptr [rsp+13C8h],rax
                    00 00
  00000000000005AA: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000005B1: 48 8B 8C 24 C8 13  mov         rcx,qword ptr [rsp+13C8h]
                    00 00
  00000000000005B9: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000005BF: 90                 nop
  00000000000005C0: E9 F3 01 00 00     jmp         00000000000007B8
  00000000000005C5: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000005CD: E8 00 00 00 00     call        ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
  00000000000005D2: 0F B6 C0           movzx       eax,al
  00000000000005D5: 85 C0              test        eax,eax
  00000000000005D7: 75 3A              jne         0000000000000613
  00000000000005D9: 45 33 C0           xor         r8d,r8d
  00000000000005DC: 48 8D 15 00 00 00  lea         rdx,[$SG84549]
                    00
  00000000000005E3: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000005EB: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  00000000000005F0: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  00000000000005F4: 75 1D              jne         0000000000000613
  00000000000005F6: 45 33 C0           xor         r8d,r8d
  00000000000005F9: 48 8D 15 00 00 00  lea         rdx,[$SG84550]
                    00
  0000000000000600: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  0000000000000608: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  000000000000060D: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000611: 74 05              je          0000000000000618
  0000000000000613: E9 A5 01 00 00     jmp         00000000000007BD
  0000000000000618: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  0000000000000620: E8 00 00 00 00     call        ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
  0000000000000625: 0F B6 C0           movzx       eax,al
  0000000000000628: 85 C0              test        eax,eax
  000000000000062A: 0F 85 88 01 00 00  jne         00000000000007B8
  0000000000000630: 33 D2              xor         edx,edx
  0000000000000632: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  000000000000063A: E8 00 00 00 00     call        ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
  000000000000063F: 0F BE 00           movsx       eax,byte ptr [rax]
  0000000000000642: 83 F8 09           cmp         eax,9
  0000000000000645: 74 1B              je          0000000000000662
  0000000000000647: 33 D2              xor         edx,edx
  0000000000000649: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  0000000000000651: E8 00 00 00 00     call        ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
  0000000000000656: 0F BE 00           movsx       eax,byte ptr [rax]
  0000000000000659: 83 F8 20           cmp         eax,20h
  000000000000065C: 0F 85 56 01 00 00  jne         00000000000007B8
  0000000000000662: 48 8D 94 24 E8 12  lea         rdx,[rsp+12E8h]
                    00 00
  000000000000066A: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000671: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000676: 48 89 84 24 D0 13  mov         qword ptr [rsp+13D0h],rax
                    00 00
  000000000000067E: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000685: 48 8B 8C 24 D0 13  mov         rcx,qword ptr [rsp+13D0h]
                    00 00
  000000000000068D: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000693: 8B 84 24 18 13 00  mov         eax,dword ptr [rsp+1318h]
                    00
  000000000000069A: FF C0              inc         eax
  000000000000069C: 89 84 24 18 13 00  mov         dword ptr [rsp+1318h],eax
                    00
  00000000000006A3: 45 33 C0           xor         r8d,r8d
  00000000000006A6: 48 8D 15 00 00 00  lea         rdx,[$SG84554]
                    00
  00000000000006AD: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000006B5: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  00000000000006BA: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  00000000000006BE: 74 10              je          00000000000006D0
  00000000000006C0: 8B 84 24 20 13 00  mov         eax,dword ptr [rsp+1320h]
                    00
  00000000000006C7: FF C0              inc         eax
  00000000000006C9: 89 84 24 20 13 00  mov         dword ptr [rsp+1320h],eax
                    00
  00000000000006D0: 45 33 C0           xor         r8d,r8d
  00000000000006D3: 48 8D 15 00 00 00  lea         rdx,[$SG84556]
                    00
  00000000000006DA: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000006E2: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  00000000000006E7: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  00000000000006EB: 74 10              je          00000000000006FD
  00000000000006ED: 8B 84 24 24 13 00  mov         eax,dword ptr [rsp+1324h]
                    00
  00000000000006F4: FF C0              inc         eax
  00000000000006F6: 89 84 24 24 13 00  mov         dword ptr [rsp+1324h],eax
                    00
  00000000000006FD: 45 33 C0           xor         r8d,r8d
  0000000000000700: 48 8D 15 00 00 00  lea         rdx,[$SG84558]
                    00
  0000000000000707: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  000000000000070F: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  0000000000000714: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000718: 0F 84 9A 00 00 00  je          00000000000007B8
  000000000000071E: 8B 84 24 1C 13 00  mov         eax,dword ptr [rsp+131Ch]
                    00
  0000000000000725: FF C0              inc         eax
  0000000000000727: 89 84 24 1C 13 00  mov         dword ptr [rsp+131Ch],eax
                    00
  000000000000072E: 45 33 C0           xor         r8d,r8d
  0000000000000731: 48 8D 94 24 A8 12  lea         rdx,[rsp+12A8h]
                    00 00
  0000000000000739: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  0000000000000741: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z
  0000000000000746: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  000000000000074A: 74 6C              je          00000000000007B8
  000000000000074C: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_CYAN@Color@@3PEBDEB]
                    00
  0000000000000753: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000075A: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000075F: 48 8D 15 00 00 00  lea         rdx,[$SG84560]
                    00
  0000000000000766: 48 8B C8           mov         rcx,rax
  0000000000000769: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000076E: 48 89 84 24 D8 13  mov         qword ptr [rsp+13D8h],rax
                    00 00
  0000000000000776: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  000000000000077D: 48 89 84 24 E0 13  mov         qword ptr [rsp+13E0h],rax
                    00 00
  0000000000000785: 48 8B 94 24 E0 13  mov         rdx,qword ptr [rsp+13E0h]
                    00 00
  000000000000078D: 48 8B 8C 24 D8 13  mov         rcx,qword ptr [rsp+13D8h]
                    00 00
  0000000000000795: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000079A: 48 89 84 24 E8 13  mov         qword ptr [rsp+13E8h],rax
                    00 00
  00000000000007A2: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000007A9: 48 8B 8C 24 E8 13  mov         rcx,qword ptr [rsp+13E8h]
                    00 00
  00000000000007B1: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000007B7: 90                 nop
  00000000000007B8: E9 52 FD FF FF     jmp         000000000000050F
  00000000000007BD: 48 8D 8C 24 40 11  lea         rcx,[rsp+1140h]
                    00 00
  00000000000007C5: E8 00 00 00 00     call        ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00000000000007CA: 48 8D 15 00 00 00  lea         rdx,[$SG84561]
                    00
  00000000000007D1: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000007D8: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000007DD: 48 89 84 24 F0 13  mov         qword ptr [rsp+13F0h],rax
                    00 00
  00000000000007E5: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000007EC: 48 8B 8C 24 F0 13  mov         rcx,qword ptr [rsp+13F0h]
                    00 00
  00000000000007F4: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000007FA: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_GREEN@Color@@3PEBDEB]
                    00
  0000000000000801: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000808: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000080D: 48 8D 15 00 00 00  lea         rdx,[$SG84563]
                    00
  0000000000000814: 48 8B C8           mov         rcx,rax
  0000000000000817: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000081C: 48 89 84 24 F8 13  mov         qword ptr [rsp+13F8h],rax
                    00 00
  0000000000000824: 8B 94 24 18 13 00  mov         edx,dword ptr [rsp+1318h]
                    00
  000000000000082B: 48 8B 8C 24 F8 13  mov         rcx,qword ptr [rsp+13F8h]
                    00 00
  0000000000000833: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z]
  0000000000000839: 48 8D 15 00 00 00  lea         rdx,[$SG84562]
                    00
  0000000000000840: 48 8B C8           mov         rcx,rax
  0000000000000843: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000848: 48 89 84 24 00 14  mov         qword ptr [rsp+1400h],rax
                    00 00
  0000000000000850: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  0000000000000857: 48 89 84 24 08 14  mov         qword ptr [rsp+1408h],rax
                    00 00
  000000000000085F: 48 8B 94 24 08 14  mov         rdx,qword ptr [rsp+1408h]
                    00 00
  0000000000000867: 48 8B 8C 24 00 14  mov         rcx,qword ptr [rsp+1400h]
                    00 00
  000000000000086F: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000874: 48 89 84 24 10 14  mov         qword ptr [rsp+1410h],rax
                    00 00
  000000000000087C: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000883: 48 8B 8C 24 10 14  mov         rcx,qword ptr [rsp+1410h]
                    00 00
  000000000000088B: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000891: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_GREEN@Color@@3PEBDEB]
                    00
  0000000000000898: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000089F: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000008A4: 48 8D 15 00 00 00  lea         rdx,[$SG84565]
                    00
  00000000000008AB: 48 8B C8           mov         rcx,rax
  00000000000008AE: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000008B3: 48 89 84 24 18 14  mov         qword ptr [rsp+1418h],rax
                    00 00
  00000000000008BB: 8B 94 24 20 13 00  mov         edx,dword ptr [rsp+1320h]
                    00
  00000000000008C2: 48 8B 8C 24 18 14  mov         rcx,qword ptr [rsp+1418h]
                    00 00
  00000000000008CA: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z]
  00000000000008D0: 48 8D 15 00 00 00  lea         rdx,[$SG84564]
                    00
  00000000000008D7: 48 8B C8           mov         rcx,rax
  00000000000008DA: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000008DF: 48 89 84 24 20 14  mov         qword ptr [rsp+1420h],rax
                    00 00
  00000000000008E7: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  00000000000008EE: 48 89 84 24 28 14  mov         qword ptr [rsp+1428h],rax
                    00 00
  00000000000008F6: 48 8B 94 24 28 14  mov         rdx,qword ptr [rsp+1428h]
                    00 00
  00000000000008FE: 48 8B 8C 24 20 14  mov         rcx,qword ptr [rsp+1420h]
                    00 00
  0000000000000906: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000090B: 48 89 84 24 30 14  mov         qword ptr [rsp+1430h],rax
                    00 00
  0000000000000913: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  000000000000091A: 48 8B 8C 24 30 14  mov         rcx,qword ptr [rsp+1430h]
                    00 00
  0000000000000922: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000928: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_GREEN@Color@@3PEBDEB]
                    00
  000000000000092F: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000936: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000093B: 48 8D 15 00 00 00  lea         rdx,[$SG84567]
                    00
  0000000000000942: 48 8B C8           mov         rcx,rax
  0000000000000945: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000094A: 48 89 84 24 38 14  mov         qword ptr [rsp+1438h],rax
                    00 00
  0000000000000952: 8B 94 24 1C 13 00  mov         edx,dword ptr [rsp+131Ch]
                    00
  0000000000000959: 48 8B 8C 24 38 14  mov         rcx,qword ptr [rsp+1438h]
                    00 00
  0000000000000961: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z]
  0000000000000967: 48 8D 15 00 00 00  lea         rdx,[$SG84566]
                    00
  000000000000096E: 48 8B C8           mov         rcx,rax
  0000000000000971: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000976: 48 89 84 24 40 14  mov         qword ptr [rsp+1440h],rax
                    00 00
  000000000000097E: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  0000000000000985: 48 89 84 24 48 14  mov         qword ptr [rsp+1448h],rax
                    00 00
  000000000000098D: 48 8B 94 24 48 14  mov         rdx,qword ptr [rsp+1448h]
                    00 00
  0000000000000995: 48 8B 8C 24 40 14  mov         rcx,qword ptr [rsp+1440h]
                    00 00
  000000000000099D: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000009A2: 48 89 84 24 50 14  mov         qword ptr [rsp+1450h],rax
                    00 00
  00000000000009AA: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000009B1: 48 8B 8C 24 50 14  mov         rcx,qword ptr [rsp+1450h]
                    00 00
  00000000000009B9: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000009BF: 90                 nop
  00000000000009C0: C7 84 24 48 13 00  mov         dword ptr [rsp+1348h],0
                    00 00 00 00 00
  00000000000009CB: 48 8D 8C 24 E8 12  lea         rcx,[rsp+12E8h]
                    00 00
  00000000000009D3: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000009D8: 90                 nop
  00000000000009D9: 48 8D 8C 24 A8 12  lea         rcx,[rsp+12A8h]
                    00 00
  00000000000009E1: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000009E6: 90                 nop
  00000000000009E7: 48 8D 8C 24 68 12  lea         rcx,[rsp+1268h]
                    00 00
  00000000000009EF: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000009F4: 90                 nop
  00000000000009F5: 48 8D 8C 24 40 11  lea         rcx,[rsp+1140h]
                    00 00
  00000000000009FD: E8 00 00 00 00     call        ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0000000000000A02: 90                 nop
  0000000000000A03: 48 8D 8C 24 98 10  lea         rcx,[rsp+1098h]
                    00 00
  0000000000000A0B: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000A10: 90                 nop
  0000000000000A11: 48 8D 8C 24 58 10  lea         rcx,[rsp+1058h]
                    00 00
  0000000000000A19: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000A1E: 8B 84 24 48 13 00  mov         eax,dword ptr [rsp+1348h]
                    00
  0000000000000A25: 48 8B F8           mov         rdi,rax
  0000000000000A28: 48 8B CC           mov         rcx,rsp
  0000000000000A2B: 48 8D 15 00 00 00  lea         rdx,[main$rtcFrameData]
                    00
  0000000000000A32: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000A37: 48 8B C7           mov         rax,rdi
  0000000000000A3A: 48 8B 8C 24 58 14  mov         rcx,qword ptr [rsp+1458h]
                    00 00
  0000000000000A42: 48 33 CC           xor         rcx,rsp
  0000000000000A45: E8 00 00 00 00     call        __security_check_cookie
  0000000000000A4A: 48 81 C4 60 14 00  add         rsp,1460h
                    00
  0000000000000A51: 5F                 pop         rdi
  0000000000000A52: C3                 ret

main$dtor$0:
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 8D 58 10 00  lea         rcx,[rbp+1058h]
                    00
  000000000000001A: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000001F: 48 83 C4 28        add         rsp,28h
  0000000000000023: 5F                 pop         rdi
  0000000000000024: 5D                 pop         rbp
  0000000000000025: C3                 ret
main$dtor$1:
  0000000000000026: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000002B: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000030: 55                 push        rbp
  0000000000000031: 57                 push        rdi
  0000000000000032: 48 83 EC 28        sub         rsp,28h
  0000000000000036: 48 8B EA           mov         rbp,rdx
  0000000000000039: 48 8D 8D 98 10 00  lea         rcx,[rbp+1098h]
                    00
  0000000000000040: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000045: 48 83 C4 28        add         rsp,28h
  0000000000000049: 5F                 pop         rdi
  000000000000004A: 5D                 pop         rbp
  000000000000004B: C3                 ret
main$dtor$2:
  000000000000004C: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000051: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000056: 55                 push        rbp
  0000000000000057: 57                 push        rdi
  0000000000000058: 48 83 EC 28        sub         rsp,28h
  000000000000005C: 48 8B EA           mov         rbp,rdx
  000000000000005F: 48 8D 8D 40 11 00  lea         rcx,[rbp+1140h]
                    00
  0000000000000066: E8 00 00 00 00     call        ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  000000000000006B: 48 83 C4 28        add         rsp,28h
  000000000000006F: 5F                 pop         rdi
  0000000000000070: 5D                 pop         rbp
  0000000000000071: C3                 ret
main$dtor$3:
  0000000000000072: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000077: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000007C: 55                 push        rbp
  000000000000007D: 57                 push        rdi
  000000000000007E: 48 83 EC 28        sub         rsp,28h
  0000000000000082: 48 8B EA           mov         rbp,rdx
  0000000000000085: 48 8D 8D 68 12 00  lea         rcx,[rbp+1268h]
                    00
  000000000000008C: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000091: 48 83 C4 28        add         rsp,28h
  0000000000000095: 5F                 pop         rdi
  0000000000000096: 5D                 pop         rbp
  0000000000000097: C3                 ret
main$dtor$4:
  0000000000000098: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000009D: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  00000000000000A2: 55                 push        rbp
  00000000000000A3: 57                 push        rdi
  00000000000000A4: 48 83 EC 28        sub         rsp,28h
  00000000000000A8: 48 8B EA           mov         rbp,rdx
  00000000000000AB: 48 8D 8D A8 12 00  lea         rcx,[rbp+12A8h]
                    00
  00000000000000B2: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000000B7: 48 83 C4 28        add         rsp,28h
  00000000000000BB: 5F                 pop         rdi
  00000000000000BC: 5D                 pop         rbp
  00000000000000BD: C3                 ret
main$dtor$5:
  00000000000000BE: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  00000000000000C3: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  00000000000000C8: 55                 push        rbp
  00000000000000C9: 57                 push        rdi
  00000000000000CA: 48 83 EC 28        sub         rsp,28h
  00000000000000CE: 48 8B EA           mov         rbp,rdx
  00000000000000D1: 48 8D 8D E8 12 00  lea         rcx,[rbp+12E8h]
                    00
  00000000000000D8: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000000DD: 48 83 C4 28        add         rsp,28h
  00000000000000E1: 5F                 pop         rdi
  00000000000000E2: 5D                 pop         rbp
  00000000000000E3: C3                 ret

??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z (public: __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1><>(struct std::_Zero_then_variadic_args_t)):
  0000000000000000: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??0?$allocator@D@std@@QEAA@XZ
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 8B C8           mov         rcx,rax
  0000000000000020: E8 00 00 00 00     call        ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0000000000000025: 90                 nop
  0000000000000026: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000002B: 48 83 C4 20        add         rsp,20h
  000000000000002F: 5F                 pop         rdi
  0000000000000030: C3                 ret

??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z (public: __cdecl std::_Compressed_pair<struct std::default_delete<class std::_Facet_base>,class std::_Facet_base *,1>::_Compressed_pair<struct std::default_delete<class std::_Facet_base>,class std::_Facet_base *,1><class std::_Facet_base * &>(struct std::_Zero_then_variadic_args_t,class std::_Facet_base * &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000009: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000E: 57                 push        rdi
  000000000000000F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000014: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000019: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000001C: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000024: 5F                 pop         rdi
  0000000000000025: C3                 ret

??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z (public: __cdecl std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy><char>(class std::allocator<char> const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 5F                 pop         rdi
  0000000000000011: C3                 ret

??$?0N$0A@@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEAA@AEBN@Z (public: __cdecl std::chrono::duration<double,struct std::ratio<1,1> >::duration<double,struct std::ratio<1,1> ><double,0>(double const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000015: F2 0F 10 01        movsd       xmm0,mmword ptr [rcx]
  0000000000000019: F2 0F 11 00        movsd       mmword ptr [rax],xmm0
  000000000000001D: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000022: 5F                 pop         rdi
  0000000000000023: C3                 ret

??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z (public: __cdecl std::unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >::unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> ><struct std::default_delete<class std::_Facet_base>,0>(class std::_Facet_base *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000019: 4C 8D 44 24 48     lea         r8,[rsp+48h]
  000000000000001E: 0F B6 54 24 20     movzx       edx,byte ptr [rsp+20h]
  0000000000000023: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000028: E8 00 00 00 00     call        ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
  000000000000002D: 90                 nop
  000000000000002E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000033: 48 83 C4 30        add         rsp,30h
  0000000000000037: 5F                 pop         rdi
  0000000000000038: C3                 ret

??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z (public: __cdecl std::chrono::duration<__int64,struct std::ratio<1,1000000000> >::duration<__int64,struct std::ratio<1,1000000000> ><__int64,0>(__int64 const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000015: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000018: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000020: 5F                 pop         rdi
  0000000000000021: C3                 ret

??$?0_JU?$ratio@$00$0DLJKMKAA@@std@@$0A@@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z (public: __cdecl std::chrono::duration<double,struct std::ratio<1,1> >::duration<double,struct std::ratio<1,1> ><__int64,struct std::ratio<1,1000000000>,0>(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000014: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  0000000000000019: E8 00 00 00 00     call        ??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@$0A@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
  000000000000001E: 48 8B C8           mov         rcx,rax
  0000000000000021: E8 00 00 00 00     call        ?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEBANXZ
  0000000000000026: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000002B: F2 0F 11 00        movsd       mmword ptr [rax],xmm0
  000000000000002F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000034: 48 83 C4 30        add         rsp,30h
  0000000000000038: 5F                 pop         rdi
  0000000000000039: C3                 ret

??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000014: E8 00 00 00 00     call        ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000019: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001E: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000023: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
  0000000000000028: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000002D: 4C 8B 44 24 20     mov         r8,qword ptr [rsp+20h]
  0000000000000032: 48 8B 54 24 28     mov         rdx,qword ptr [rsp+28h]
  0000000000000037: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003C: E8 00 00 00 00     call        ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
  0000000000000041: 48 83 C4 30        add         rsp,30h
  0000000000000045: 5F                 pop         rdi
  0000000000000046: C3                 ret

??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &,char const *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 81 EC D0 00 00  sub         rsp,0D0h
                    00
  0000000000000012: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  0000000000000017: B9 2C 00 00 00     mov         ecx,2Ch
  000000000000001C: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000021: F3 AB              rep stos    dword ptr [rdi]
  0000000000000023: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000002B: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000033: 48 8B 8C 24 E8 00  mov         rcx,qword ptr [rsp+0E8h]
                    00 00
  000000000000003B: E8 00 00 00 00     call        ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
  0000000000000040: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000045: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  000000000000004D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000050: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000054: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000005C: 48 03 C8           add         rcx,rax
  000000000000005F: 48 8B C1           mov         rax,rcx
  0000000000000062: 48 8B C8           mov         rcx,rax
  0000000000000065: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  000000000000006B: 48 85 C0           test        rax,rax
  000000000000006E: 7E 5F              jle         00000000000000CF
  0000000000000070: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000078: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000007B: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000007F: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  0000000000000087: 48 03 C8           add         rcx,rax
  000000000000008A: 48 8B C1           mov         rax,rcx
  000000000000008D: 48 8B C8           mov         rcx,rax
  0000000000000090: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  0000000000000096: 48 3B 44 24 28     cmp         rax,qword ptr [rsp+28h]
  000000000000009B: 7E 32              jle         00000000000000CF
  000000000000009D: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000000A5: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A8: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000AC: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  00000000000000B4: 48 03 C8           add         rcx,rax
  00000000000000B7: 48 8B C1           mov         rax,rcx
  00000000000000BA: 48 8B C8           mov         rcx,rax
  00000000000000BD: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  00000000000000C3: 48 2B 44 24 28     sub         rax,qword ptr [rsp+28h]
  00000000000000C8: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000000CD: EB 09              jmp         00000000000000D8
  00000000000000CF: 48 C7 44 24 70 00  mov         qword ptr [rsp+70h],0
                    00 00 00
  00000000000000D8: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000DD: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000E2: 48 8B 94 24 E0 00  mov         rdx,qword ptr [rsp+0E0h]
                    00 00
  00000000000000EA: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  00000000000000EF: E8 00 00 00 00     call        ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  00000000000000F4: 90                 nop
  00000000000000F5: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  00000000000000FA: E8 00 00 00 00     call        ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
  00000000000000FF: 0F B6 C0           movzx       eax,al
  0000000000000102: 85 C0              test        eax,eax
  0000000000000104: 75 10              jne         0000000000000116
  0000000000000106: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000010A: 83 C8 04           or          eax,4
  000000000000010D: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000111: E9 95 02 00 00     jmp         $LN23
  0000000000000116: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  000000000000011E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000121: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000125: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000012D: 48 03 C8           add         rcx,rax
  0000000000000130: 48 8B C1           mov         rax,rcx
  0000000000000133: 48 8B C8           mov         rcx,rax
  0000000000000136: FF 15 00 00 00 00  call        qword ptr [__imp_?flags@ios_base@std@@QEBAHXZ]
  000000000000013C: 25 C0 01 00 00     and         eax,1C0h
  0000000000000141: 83 F8 40           cmp         eax,40h
  0000000000000144: 0F 84 D3 00 00 00  je          000000000000021D
  000000000000014A: EB 0D              jmp         0000000000000159
  000000000000014C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000151: 48 FF C8           dec         rax
  0000000000000154: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000159: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  000000000000015F: 0F 8E B8 00 00 00  jle         000000000000021D
  0000000000000165: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  000000000000016D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000170: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000174: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000017C: 48 03 C8           add         rcx,rax
  000000000000017F: 48 8B C1           mov         rax,rcx
  0000000000000182: 48 8B C8           mov         rcx,rax
  0000000000000185: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000018B: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000190: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000198: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000019B: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000019F: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  00000000000001A7: 48 03 C8           add         rcx,rax
  00000000000001AA: 48 8B C1           mov         rax,rcx
  00000000000001AD: 48 8B C8           mov         rcx,rax
  00000000000001B0: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  00000000000001B6: 88 84 24 80 00 00  mov         byte ptr [rsp+80h],al
                    00
  00000000000001BD: 0F B6 94 24 80 00  movzx       edx,byte ptr [rsp+80h]
                    00 00
  00000000000001C5: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  00000000000001CA: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000001D0: 89 84 24 84 00 00  mov         dword ptr [rsp+84h],eax
                    00
  00000000000001D7: 8B 84 24 84 00 00  mov         eax,dword ptr [rsp+84h]
                    00
  00000000000001DE: 89 84 24 88 00 00  mov         dword ptr [rsp+88h],eax
                    00
  00000000000001E5: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000001EA: 89 84 24 8C 00 00  mov         dword ptr [rsp+8Ch],eax
                    00
  00000000000001F1: 8B 94 24 88 00 00  mov         edx,dword ptr [rsp+88h]
                    00
  00000000000001F8: 8B 8C 24 8C 00 00  mov         ecx,dword ptr [rsp+8Ch]
                    00
  00000000000001FF: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  0000000000000204: 0F B6 C0           movzx       eax,al
  0000000000000207: 85 C0              test        eax,eax
  0000000000000209: 74 0D              je          0000000000000218
  000000000000020B: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000020F: 83 C8 04           or          eax,4
  0000000000000212: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000216: EB 05              jmp         000000000000021D
  0000000000000218: E9 2F FF FF FF     jmp         000000000000014C
  000000000000021D: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  0000000000000222: 75 6B              jne         000000000000028F
  0000000000000224: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  000000000000022C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000022F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000233: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000023B: 48 03 C8           add         rcx,rax
  000000000000023E: 48 8B C1           mov         rax,rcx
  0000000000000241: 48 8B C8           mov         rcx,rax
  0000000000000244: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000024A: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000252: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  0000000000000257: 48 8B 94 24 E8 00  mov         rdx,qword ptr [rsp+0E8h]
                    00 00
  000000000000025F: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000267: FF 15 00 00 00 00  call        qword ptr [__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z]
  000000000000026D: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  0000000000000275: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000027A: 48 39 84 24 98 00  cmp         qword ptr [rsp+98h],rax
                    00 00
  0000000000000282: 74 0B              je          000000000000028F
  0000000000000284: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000288: 83 C8 04           or          eax,4
  000000000000028B: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000028F: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  0000000000000294: 0F 85 D9 00 00 00  jne         0000000000000373
  000000000000029A: EB 0D              jmp         00000000000002A9
  000000000000029C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000002A1: 48 FF C8           dec         rax
  00000000000002A4: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000002A9: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  00000000000002AF: 0F 8E BE 00 00 00  jle         0000000000000373
  00000000000002B5: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000002BD: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000002C0: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002C4: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  00000000000002CC: 48 03 C8           add         rcx,rax
  00000000000002CF: 48 8B C1           mov         rax,rcx
  00000000000002D2: 48 8B C8           mov         rcx,rax
  00000000000002D5: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000002DB: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  00000000000002E3: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000002EB: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000002EE: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002F2: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  00000000000002FA: 48 03 C8           add         rcx,rax
  00000000000002FD: 48 8B C1           mov         rax,rcx
  0000000000000300: 48 8B C8           mov         rcx,rax
  0000000000000303: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  0000000000000309: 88 84 24 A8 00 00  mov         byte ptr [rsp+0A8h],al
                    00
  0000000000000310: 0F B6 94 24 A8 00  movzx       edx,byte ptr [rsp+0A8h]
                    00 00
  0000000000000318: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000320: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  0000000000000326: 89 84 24 AC 00 00  mov         dword ptr [rsp+0ACh],eax
                    00
  000000000000032D: 8B 84 24 AC 00 00  mov         eax,dword ptr [rsp+0ACh]
                    00
  0000000000000334: 89 84 24 B0 00 00  mov         dword ptr [rsp+0B0h],eax
                    00
  000000000000033B: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000340: 89 84 24 B4 00 00  mov         dword ptr [rsp+0B4h],eax
                    00
  0000000000000347: 8B 94 24 B0 00 00  mov         edx,dword ptr [rsp+0B0h]
                    00
  000000000000034E: 8B 8C 24 B4 00 00  mov         ecx,dword ptr [rsp+0B4h]
                    00
  0000000000000355: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  000000000000035A: 0F B6 C0           movzx       eax,al
  000000000000035D: 85 C0              test        eax,eax
  000000000000035F: 74 0D              je          000000000000036E
  0000000000000361: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000365: 83 C8 04           or          eax,4
  0000000000000368: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000036C: EB 05              jmp         0000000000000373
  000000000000036E: E9 29 FF FF FF     jmp         000000000000029C
  0000000000000373: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  000000000000037B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000037E: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000382: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  000000000000038A: 48 03 C8           add         rcx,rax
  000000000000038D: 48 8B C1           mov         rax,rcx
  0000000000000390: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  0000000000000398: 33 D2              xor         edx,edx
  000000000000039A: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  00000000000003A2: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEAA_J_J@Z]
  00000000000003A8: 90                 nop
  00000000000003A9: EB 00              jmp         $LN23
$LN23:
  00000000000003AB: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000003B3: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000003B6: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000003BA: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  00000000000003C2: 48 03 C8           add         rcx,rax
  00000000000003C5: 48 8B C1           mov         rax,rcx
  00000000000003C8: 48 89 84 24 C8 00  mov         qword ptr [rsp+0C8h],rax
                    00 00
  00000000000003D0: 45 33 C0           xor         r8d,r8d
  00000000000003D3: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  00000000000003D7: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  00000000000003DF: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  00000000000003E5: 90                 nop
  00000000000003E6: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000003EE: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000003F3: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  00000000000003F8: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00000000000003FD: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000402: 48 8B F8           mov         rdi,rax
  0000000000000405: 48 8B CC           mov         rcx,rsp
  0000000000000408: 48 8D 15 00 00 00  lea         rdx,[??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData]
                    00
  000000000000040F: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000414: 48 8B C7           mov         rax,rdi
  0000000000000417: 48 81 C4 D0 00 00  add         rsp,0D0h
                    00
  000000000000041E: 5F                 pop         rdi
  000000000000041F: C3                 ret

?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA (int `class dtor$0::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class dtor$0::std &,char const *)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 48        lea         rcx,[rbp+48h]
  0000000000000017: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA (int `class catch$1::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class catch$1::std &,char const *)'::`1'::catch$1):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000000000000013: 48 8B 85 E0 00 00  mov         rax,qword ptr [rbp+0E0h]
                    00
  000000000000001A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001D: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000021: 48 8B 8D E0 00 00  mov         rcx,qword ptr [rbp+0E0h]
                    00
  0000000000000028: 48 03 C8           add         rcx,rax
  000000000000002B: 48 8B C1           mov         rax,rcx
  000000000000002E: 48 89 85 C0 00 00  mov         qword ptr [rbp+0C0h],rax
                    00
  0000000000000035: 41 B0 01           mov         r8b,1
  0000000000000038: BA 04 00 00 00     mov         edx,4
  000000000000003D: 48 8B 8D C0 00 00  mov         rcx,qword ptr [rbp+0C0h]
                    00
  0000000000000044: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  000000000000004A: 90                 nop
  000000000000004B: 48 8D 05 00 00 00  lea         rax,[$LN23]
                    00
  0000000000000052: 48 83 C4 28        add         rsp,28h
  0000000000000056: 5F                 pop         rdi
  0000000000000057: 5D                 pop         rbp
  0000000000000058: C3                 ret
  0000000000000059: CC                 int         3

??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z (class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > __cdecl std::chrono::operator-<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> >,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > >(class std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > > const &,class std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > > const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 40        sub         rsp,40h
  0000000000000014: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000019: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000001E: E8 00 00 00 00     call        ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
  0000000000000023: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000028: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  000000000000002D: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000032: E8 00 00 00 00     call        ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
  0000000000000037: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000003C: 4C 8B 44 24 30     mov         r8,qword ptr [rsp+30h]
  0000000000000041: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000046: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000004B: E8 00 00 00 00     call        ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z
  0000000000000050: 90                 nop
  0000000000000051: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000056: 48 83 C4 40        add         rsp,40h
  000000000000005A: 5F                 pop         rdi
  000000000000005B: C3                 ret

??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z (class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > __cdecl std::chrono::operator-<__int64,struct std::ratio<1,1000000000>,__int64,struct std::ratio<1,1000000000> >(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 40        sub         rsp,40h
  0000000000000014: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000019: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000021: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000026: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000029: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000002E: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  0000000000000033: E8 00 00 00 00     call        ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ
  0000000000000038: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000003D: 48 8D 4C 24 30     lea         rcx,[rsp+30h]
  0000000000000042: E8 00 00 00 00     call        ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ
  0000000000000047: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000004C: 48 2B C8           sub         rcx,rax
  000000000000004F: 48 8B C1           mov         rax,rcx
  0000000000000052: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000057: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  000000000000005C: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000061: E8 00 00 00 00     call        ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
  0000000000000066: 90                 nop
  0000000000000067: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000006C: 48 83 C4 40        add         rsp,40h
  0000000000000070: 5F                 pop         rdi
  0000000000000071: C3                 ret

??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z (public: void __cdecl std::_Container_base12::_Alloc_proxy<class std::allocator<struct std::_Container_proxy> >(class std::allocator<struct std::_Container_proxy> &&)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: BA 01 00 00 00     mov         edx,1
  0000000000000014: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000019: E8 00 00 00 00     call        ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
  000000000000001E: 48 8B C8           mov         rcx,rax
  0000000000000021: E8 00 00 00 00     call        ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
  0000000000000026: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000030: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000035: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  000000000000003A: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000003F: E8 00 00 00 00     call        ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
  0000000000000044: 90                 nop
  0000000000000045: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004A: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000004F: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000052: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000057: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000005C: 48 89 08           mov         qword ptr [rax],rcx
  000000000000005F: 48 83 C4 30        add         rsp,30h
  0000000000000063: 5F                 pop         rdi
  0000000000000064: C3                 ret

??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z (void * __cdecl std::_Allocate<16,struct std::_Default_allocate_traits>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  0000000000000010: 75 04              jne         0000000000000016
  0000000000000012: 33 C0              xor         eax,eax
  0000000000000014: EB 39              jmp         000000000000004F
  0000000000000016: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  000000000000001B: 0F B6 C0           movzx       eax,al
  000000000000001E: 85 C0              test        eax,eax
  0000000000000020: 74 0C              je          000000000000002E
  0000000000000022: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000027: E8 00 00 00 00     call        ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
  000000000000002C: EB 21              jmp         000000000000004F
  000000000000002E: 48 81 7C 24 30 00  cmp         qword ptr [rsp+30h],1000h
                    10 00 00
  0000000000000037: 72 0C              jb          0000000000000045
  0000000000000039: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003E: E8 00 00 00 00     call        ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  0000000000000043: EB 0A              jmp         000000000000004F
  0000000000000045: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004A: E8 00 00 00 00     call        ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
  000000000000004F: 48 83 C4 20        add         rsp,20h
  0000000000000053: 5F                 pop         rdi
  0000000000000054: C3                 ret

??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z (char * __cdecl std::_Allocate_at_least_helper<class std::allocator<char> >(class std::allocator<char> &,unsigned __int64 &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000014: 48 8B 10           mov         rdx,qword ptr [rax]
  0000000000000017: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001C: E8 00 00 00 00     call        ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
  0000000000000021: 48 83 C4 20        add         rsp,20h
  0000000000000025: 5F                 pop         rdi
  0000000000000026: C3                 ret

??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z (private: static char * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Allocate_for_capacity<0>(class std::allocator<char> &,unsigned __int64 &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 40        sub         rsp,40h
  000000000000000F: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 FF C0           inc         rax
  000000000000001A: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000001F: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000022: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000002B: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  0000000000000030: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000035: E8 00 00 00 00     call        ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
  000000000000003A: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003F: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000044: 0F B6 C0           movzx       eax,al
  0000000000000047: 85 C0              test        eax,eax
  0000000000000049: 74 51              je          000000000000009C
  000000000000004B: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000050: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  0000000000000055: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000005A: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000063: EB 0D              jmp         0000000000000072
  0000000000000065: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000006A: 48 FF C0           inc         rax
  000000000000006D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000072: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000077: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000007A: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  000000000000007F: 73 1B              jae         000000000000009C
  0000000000000081: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000086: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000008B: 48 03 C8           add         rcx,rax
  000000000000008E: 48 8B C1           mov         rax,rcx
  0000000000000091: 48 8B C8           mov         rcx,rax
  0000000000000094: E8 00 00 00 00     call        ??$construct_at@D$$V@std@@YAPEADQEAD@Z
  0000000000000099: 90                 nop
  000000000000009A: EB C9              jmp         0000000000000065
  000000000000009C: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000A1: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A4: 48 FF C8           dec         rax
  00000000000000A7: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000AC: 48 89 01           mov         qword ptr [rcx],rax
  00000000000000AF: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000B4: 48 83 C4 40        add         rsp,40h
  00000000000000B8: 5F                 pop         rdi
  00000000000000B9: C3                 ret

??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z (void * __cdecl std::_Allocate_manually_vector_aligned<struct std::_Default_allocate_traits>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 50        sub         rsp,50h
  000000000000000A: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000000F: 48 83 C0 2F        add         rax,2Fh
  0000000000000013: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000018: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000001D: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  0000000000000022: 77 06              ja          000000000000002A
  0000000000000024: E8 00 00 00 00     call        ?_Throw_bad_array_new_length@std@@YAXXZ
  0000000000000029: 90                 nop
  000000000000002A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002F: E8 00 00 00 00     call        ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
  0000000000000034: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000039: 48 83 7C 24 38 00  cmp         qword ptr [rsp+38h],0
  000000000000003F: 74 02              je          0000000000000043
  0000000000000041: EB 6C              jmp         00000000000000AF
  0000000000000043: 48 8D 05 00 00 00  lea         rax,[$SG112151]
                    00
  000000000000004A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000004F: 48 8D 05 00 00 00  lea         rax,[$SG112152]
                    00
  0000000000000056: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000005B: 45 33 C9           xor         r9d,r9d
  000000000000005E: 41 B8 BE 00 00 00  mov         r8d,0BEh
  0000000000000064: 48 8D 15 00 00 00  lea         rdx,[$SG112153]
                    00
  000000000000006B: B9 02 00 00 00     mov         ecx,2
  0000000000000070: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  0000000000000076: 83 F8 01           cmp         eax,1
  0000000000000079: 75 03              jne         000000000000007E
  000000000000007B: CC                 int         3
  000000000000007C: 33 C0              xor         eax,eax
  000000000000007E: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000087: 41 B9 BE 00 00 00  mov         r9d,0BEh
  000000000000008D: 4C 8D 05 00 00 00  lea         r8,[$SG112154]
                    00
  0000000000000094: 48 8D 15 00 00 00  lea         rdx,[$SG112155]
                    00
  000000000000009B: 48 8D 0D 00 00 00  lea         rcx,[$SG112156]
                    00
  00000000000000A2: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  00000000000000A8: 90                 nop
  00000000000000A9: 33 C0              xor         eax,eax
  00000000000000AB: 85 C0              test        eax,eax
  00000000000000AD: 75 94              jne         0000000000000043
  00000000000000AF: 33 C0              xor         eax,eax
  00000000000000B1: 85 C0              test        eax,eax
  00000000000000B3: 75 84              jne         0000000000000039
  00000000000000B5: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000BA: 48 83 C0 2F        add         rax,2Fh
  00000000000000BE: 48 83 E0 E0        and         rax,0FFFFFFFFFFFFFFE0h
  00000000000000C2: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  00000000000000C7: B8 08 00 00 00     mov         eax,8
  00000000000000CC: 48 6B C0 FF        imul        rax,rax,0FFFFFFFFFFFFFFFFh
  00000000000000D0: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000D5: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  00000000000000DA: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  00000000000000DE: B8 08 00 00 00     mov         eax,8
  00000000000000E3: 48 6B C0 FE        imul        rax,rax,0FFFFFFFFFFFFFFFEh
  00000000000000E7: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000EC: 48 BA FA FA FA FA  mov         rdx,0FAFAFAFAFAFAFAFAh
                    FA FA FA FA
  00000000000000F6: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  00000000000000FA: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000FF: 48 83 C4 50        add         rsp,50h
  0000000000000103: 5F                 pop         rdi
  0000000000000104: C3                 ret

??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct<1,char const *>(char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 81 EC D0 00 00  sub         rsp,0D0h
                    00
  0000000000000017: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001C: B9 2C 00 00 00     mov         ecx,2Ch
  0000000000000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000026: F3 AB              rep stos    dword ptr [rdi]
  0000000000000028: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  0000000000000030: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000038: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003D: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  0000000000000045: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000004A: 48 39 84 24 F0 00  cmp         qword ptr [rsp+0F0h],rax
                    00 00
  0000000000000052: 76 06              jbe         000000000000005A
  0000000000000054: E8 00 00 00 00     call        ?_Xlen_string@std@@YAXXZ
  0000000000000059: 90                 nop
  000000000000005A: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  0000000000000062: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
  0000000000000067: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000006C: 48 8B 54 24 28     mov         rdx,qword ptr [rsp+28h]
  0000000000000071: 48 8D 4C 24 44     lea         rcx,[rsp+44h]
  0000000000000076: E8 00 00 00 00     call        ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
  000000000000007B: 48 8D 44 24 44     lea         rax,[rsp+44h]
  0000000000000080: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000085: 4C 8B 44 24 20     mov         r8,qword ptr [rsp+20h]
  000000000000008A: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  000000000000008F: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000094: E8 00 00 00 00     call        ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
  0000000000000099: 90                 nop
  000000000000009A: 48 83 BC 24 F0 00  cmp         qword ptr [rsp+0F0h],0Fh
                    00 00 0F
  00000000000000A3: 0F 87 86 00 00 00  ja          000000000000012F
  00000000000000A9: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000AE: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000000B6: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  00000000000000BA: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000BF: 48 C7 40 20 0F 00  mov         qword ptr [rax+20h],0Fh
                    00 00
  00000000000000C7: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000CC: 48 83 C0 08        add         rax,8
  00000000000000D0: 4C 8B 84 24 F0 00  mov         r8,qword ptr [rsp+0F0h]
                    00 00
  00000000000000D8: 48 8B 94 24 E8 00  mov         rdx,qword ptr [rsp+0E8h]
                    00 00
  00000000000000E0: 48 8B C8           mov         rcx,rax
  00000000000000E3: E8 00 00 00 00     call        ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  00000000000000E8: 90                 nop
  00000000000000E9: C6 84 24 C4 00 00  mov         byte ptr [rsp+0C4h],0
                    00 00
  00000000000000F1: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000F6: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000000FE: 48 8D 44 08 08     lea         rax,[rax+rcx+8]
  0000000000000103: 48 8D 94 24 C4 00  lea         rdx,[rsp+0C4h]
                    00 00
  000000000000010B: 48 8B C8           mov         rcx,rax
  000000000000010E: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  0000000000000113: 90                 nop
  0000000000000114: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000119: E8 00 00 00 00     call        ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
  000000000000011E: 90                 nop
  000000000000011F: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000124: E8 00 00 00 00     call        ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
  0000000000000129: 90                 nop
  000000000000012A: E9 E9 00 00 00     jmp         0000000000000218
  000000000000012F: 48 8B 8C 24 E0 00  mov         rcx,qword ptr [rsp+0E0h]
                    00 00
  0000000000000137: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000013C: 4C 8B C0           mov         r8,rax
  000000000000013F: BA 0F 00 00 00     mov         edx,0Fh
  0000000000000144: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  000000000000014C: E8 00 00 00 00     call        ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
  0000000000000151: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  0000000000000159: 48 8D 94 24 98 00  lea         rdx,[rsp+98h]
                    00 00
  0000000000000161: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000166: E8 00 00 00 00     call        ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
  000000000000016B: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  0000000000000173: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000178: 48 83 C0 08        add         rax,8
  000000000000017C: 48 8D 94 24 B8 00  lea         rdx,[rsp+0B8h]
                    00 00
  0000000000000184: 48 8B C8           mov         rcx,rax
  0000000000000187: E8 00 00 00 00     call        ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
  000000000000018C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000191: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000199: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  000000000000019D: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000001A2: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  00000000000001AA: 48 89 48 20        mov         qword ptr [rax+20h],rcx
  00000000000001AE: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  00000000000001B6: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  00000000000001BB: 4C 8B 84 24 F0 00  mov         r8,qword ptr [rsp+0F0h]
                    00 00
  00000000000001C3: 48 8B 94 24 E8 00  mov         rdx,qword ptr [rsp+0E8h]
                    00 00
  00000000000001CB: 48 8B C8           mov         rcx,rax
  00000000000001CE: E8 00 00 00 00     call        ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  00000000000001D3: 90                 nop
  00000000000001D4: C6 84 24 C5 00 00  mov         byte ptr [rsp+0C5h],0
                    00 00
  00000000000001DC: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  00000000000001E4: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  00000000000001E9: 48 03 84 24 F0 00  add         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000001F1: 48 8D 94 24 C5 00  lea         rdx,[rsp+0C5h]
                    00 00
  00000000000001F9: 48 8B C8           mov         rcx,rax
  00000000000001FC: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  0000000000000201: 90                 nop
  0000000000000202: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000207: E8 00 00 00 00     call        ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
  000000000000020C: 90                 nop
  000000000000020D: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000212: E8 00 00 00 00     call        ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
  0000000000000217: 90                 nop
  0000000000000218: 48 8B CC           mov         rcx,rsp
  000000000000021B: 48 8D 15 00 00 00  lea         rdx,[??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcFrameData]
                    00
  0000000000000222: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000227: 48 81 C4 D0 00 00  add         rsp,0D0h
                    00
  000000000000022E: 5F                 pop         rdi
  000000000000022F: C3                 ret

?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA (int `private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct<1,char const *>(char const * const,unsigned __int64)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 68        lea         rcx,[rbp+68h]
  0000000000000017: E8 00 00 00 00     call        ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z (void __cdecl std::_Construct_in_place<char *,char * const &>(char * &,char * const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000014: 0F B6 C0           movzx       eax,al
  0000000000000017: 85 C0              test        eax,eax
  0000000000000019: 74 1A              je          0000000000000035
  000000000000001B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000020: E8 00 00 00 00     call        ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
  0000000000000025: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000002A: 48 8B C8           mov         rcx,rax
  000000000000002D: E8 00 00 00 00     call        ??$construct_at@PEADAEBQEAD@std@@YAPEAPEADQEAPEADAEBQEAD@Z
  0000000000000032: 90                 nop
  0000000000000033: EB 2C              jmp         0000000000000061
  0000000000000035: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003A: E8 00 00 00 00     call        ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
  000000000000003F: 48 8B D0           mov         rdx,rax
  0000000000000042: B9 08 00 00 00     mov         ecx,8
  0000000000000047: E8 00 00 00 00     call        ??2@YAPEAX_KPEAX@Z
  000000000000004C: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000051: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000056: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000005B: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000005E: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000061: 48 83 C4 30        add         rsp,30h
  0000000000000065: 5F                 pop         rdi
  0000000000000066: C3                 ret

??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z (void __cdecl std::_Construct_in_place<struct std::_Container_proxy,struct std::_Container_base12 *>(struct std::_Container_proxy &,struct std::_Container_base12 * &&)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000014: 0F B6 C0           movzx       eax,al
  0000000000000017: 85 C0              test        eax,eax
  0000000000000019: 74 1A              je          0000000000000035
  000000000000001B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000020: E8 00 00 00 00     call        ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
  0000000000000025: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000002A: 48 8B C8           mov         rcx,rax
  000000000000002D: E8 00 00 00 00     call        ??$construct_at@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAPEAU_Container_proxy@0@QEAU10@$$QEAPEAU_Container_base12@0@@Z
  0000000000000032: 90                 nop
  0000000000000033: EB 2F              jmp         0000000000000064
  0000000000000035: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003A: E8 00 00 00 00     call        ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
  000000000000003F: 48 8B D0           mov         rdx,rax
  0000000000000042: B9 10 00 00 00     mov         ecx,10h
  0000000000000047: E8 00 00 00 00     call        ??2@YAPEAX_KPEAX@Z
  000000000000004C: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000051: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000056: 48 8B 10           mov         rdx,qword ptr [rax]
  0000000000000059: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000005E: E8 00 00 00 00     call        ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
  0000000000000063: 90                 nop
  0000000000000064: 48 83 C4 30        add         rsp,30h
  0000000000000068: 5F                 pop         rdi
  0000000000000069: C3                 ret

??$_Convert_size@_K_K@std@@YA_K_K@Z (unsigned __int64 __cdecl std::_Convert_size<unsigned __int64,unsigned __int64>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z (void __cdecl std::_Deallocate<16>(void *,unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000014: 0F B6 C0           movzx       eax,al
  0000000000000017: 85 C0              test        eax,eax
  0000000000000019: 74 0D              je          0000000000000028
  000000000000001B: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000020: E8 00 00 00 00     call        ??3@YAXPEAX@Z
  0000000000000025: 90                 nop
  0000000000000026: EB 2B              jmp         0000000000000053
  0000000000000028: 48 81 7C 24 38 00  cmp         qword ptr [rsp+38h],1000h
                    10 00 00
  0000000000000031: 72 10              jb          0000000000000043
  0000000000000033: 48 8D 54 24 38     lea         rdx,[rsp+38h]
  0000000000000038: 48 8D 4C 24 30     lea         rcx,[rsp+30h]
  000000000000003D: E8 00 00 00 00     call        ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
  0000000000000042: 90                 nop
  0000000000000043: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000048: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000052: 90                 nop
  0000000000000053: 48 83 C4 20        add         rsp,20h
  0000000000000057: 5F                 pop         rdi
  0000000000000058: C3                 ret

??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z (void __cdecl std::_Deallocate_plain<class std::allocator<struct std::_Container_proxy> >(class std::allocator<struct std::_Container_proxy> &,struct std::_Container_proxy * const)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000015: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000001A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001F: E8 00 00 00 00     call        ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
  0000000000000024: 90                 nop
  0000000000000025: 48 83 C4 20        add         rsp,20h
  0000000000000029: 5F                 pop         rdi
  000000000000002A: C3                 ret

??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z (void __cdecl std::_Delete_plain_internal<class std::allocator<struct std::_Container_proxy> >(class std::allocator<struct std::_Container_proxy> &,struct std::_Container_proxy * const)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: E8 00 00 00 00     call        ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
  000000000000001E: 90                 nop
  000000000000001F: 48 83 C4 20        add         rsp,20h
  0000000000000023: 5F                 pop         rdi
  0000000000000024: C3                 ret

??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z (void __cdecl std::_Destroy_in_place<char *>(char * &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 5F                 pop         rdi
  0000000000000007: C3                 ret

??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z (bool __cdecl std::_Fgetc<char>(char &,struct _iobuf *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000014: FF 15 00 00 00 00  call        qword ptr [__imp_fgetc]
  000000000000001A: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000001E: 83 7C 24 20 FF     cmp         dword ptr [rsp+20h],0FFFFFFFFh
  0000000000000023: 75 06              jne         000000000000002B
  0000000000000025: 32 C0              xor         al,al
  0000000000000027: EB 10              jmp         0000000000000039
  0000000000000029: EB 0E              jmp         0000000000000039
  000000000000002B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000030: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  0000000000000035: 88 08              mov         byte ptr [rax],cl
  0000000000000037: B0 01              mov         al,1
  0000000000000039: 48 83 C4 30        add         rsp,30h
  000000000000003D: 5F                 pop         rdi
  000000000000003E: C3                 ret

??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z (bool __cdecl std::_Fputc<char>(char,struct _iobuf *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 88 4C 24 08        mov         byte ptr [rsp+8],cl
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 30        sub         rsp,30h
  000000000000000E: 0F BE 44 24 40     movsx       eax,byte ptr [rsp+40h]
  0000000000000013: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000018: 8B C8              mov         ecx,eax
  000000000000001A: FF 15 00 00 00 00  call        qword ptr [__imp_fputc]
  0000000000000020: 83 F8 FF           cmp         eax,0FFFFFFFFh
  0000000000000023: 74 0A              je          000000000000002F
  0000000000000025: C7 44 24 20 01 00  mov         dword ptr [rsp+20h],1
                    00 00
  000000000000002D: EB 08              jmp         0000000000000037
  000000000000002F: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000037: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000003C: 48 83 C4 30        add         rsp,30h
  0000000000000040: 5F                 pop         rdi
  0000000000000041: C3                 ret

??$_Get_index@$0A@@id@locale@std@@QEAA_KXZ (public: unsigned __int64 __cdecl std::locale::id::_Get_index<0>(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000000F: B9 08 00 00 00     mov         ecx,8
  0000000000000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000019: F3 AB              rep stos    dword ptr [rdi]
  000000000000001B: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000020: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000025: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000029: 75 4B              jne         0000000000000076
  000000000000002B: 33 D2              xor         edx,edx
  000000000000002D: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  0000000000000032: FF 15 00 00 00 00  call        qword ptr [__imp_??0_Lockit@std@@QEAA@H@Z]
  0000000000000038: 90                 nop
  0000000000000039: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003E: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000042: 75 26              jne         000000000000006A
  0000000000000044: 48 8B 05 00 00 00  mov         rax,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  000000000000004B: 8B 00              mov         eax,dword ptr [rax]
  000000000000004D: FF C0              inc         eax
  000000000000004F: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  0000000000000056: 89 01              mov         dword ptr [rcx],eax
  0000000000000058: 48 8B 05 00 00 00  mov         rax,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  000000000000005F: 48 63 00           movsxd      rax,dword ptr [rax]
  0000000000000062: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000067: 48 89 01           mov         qword ptr [rcx],rax
  000000000000006A: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  000000000000006F: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  0000000000000075: 90                 nop
  0000000000000076: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000007B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000007E: 48 8B F8           mov         rdi,rax
  0000000000000081: 48 8B CC           mov         rcx,rsp
  0000000000000084: 48 8D 15 00 00 00  lea         rdx,[??$_Get_index@$0A@@id@locale@std@@QEAA_KXZ$rtcFrameData]
                    00
  000000000000008B: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000090: 48 8B C7           mov         rax,rdi
  0000000000000093: 48 83 C4 40        add         rsp,40h
  0000000000000097: 5F                 pop         rdi
  0000000000000098: C3                 ret

??$_Get_size_of_n@$00@std@@YA_K_K@Z (unsigned __int64 __cdecl std::_Get_size_of_n<1>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: C6 04 24 00        mov         byte ptr [rsp],0
  000000000000000E: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000013: 48 83 C4 10        add         rsp,10h
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z (unsigned __int64 __cdecl std::_Get_size_of_n<16>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  000000000000000F: 48 B8 FF FF FF FF  mov         rax,0FFFFFFFFFFFFFFFh
                    FF FF FF 0F
  0000000000000019: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000001E: 48 B8 FF FF FF FF  mov         rax,0FFFFFFFFFFFFFFFh
                    FF FF FF 0F
  0000000000000028: 48 39 44 24 40     cmp         qword ptr [rsp+40h],rax
  000000000000002D: 76 06              jbe         0000000000000035
  000000000000002F: E8 00 00 00 00     call        ?_Throw_bad_array_new_length@std@@YAXXZ
  0000000000000034: 90                 nop
  0000000000000035: 48 6B 44 24 40 10  imul        rax,qword ptr [rsp+40h],10h
  000000000000003B: 48 83 C4 30        add         rsp,30h
  000000000000003F: 5F                 pop         rdi
  0000000000000040: C3                 ret

??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z (protected: void __cdecl std::time_get<char,class std::istreambuf_iterator<char,struct std::char_traits<char> > >::_Getvals<wchar_t>(wchar_t,class std::_Locinfo const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 66 89 54 24 10     mov         word ptr [rsp+10h],dx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 56                 push        rsi
  0000000000000010: 57                 push        rdi
  0000000000000011: 48 83 EC 68        sub         rsp,68h
  0000000000000015: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000001C: 48 33 C4           xor         rax,rsp
  000000000000001F: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000024: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000029: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ]
  0000000000000037: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000003F: 48 8D 79 2C        lea         rdi,[rcx+2Ch]
  0000000000000043: 48 8B F0           mov         rsi,rax
  0000000000000046: B9 2C 00 00 00     mov         ecx,2Ch
  000000000000004B: F3 A4              rep movs    byte ptr [rdi],byte ptr [rsi]
  000000000000004D: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000055: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ]
  000000000000005B: 48 8B C8           mov         rcx,rax
  000000000000005E: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000063: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000006B: 48 89 41 10        mov         qword ptr [rcx+10h],rax
  000000000000006F: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ]
  000000000000007D: 48 8B C8           mov         rcx,rax
  0000000000000080: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000085: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000008D: 48 89 41 18        mov         qword ptr [rcx+18h],rax
  0000000000000091: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@]
                    00
  0000000000000098: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  000000000000009D: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000000A5: 48 89 41 20        mov         qword ptr [rcx+20h],rax
  00000000000000A9: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000AE: 48 33 CC           xor         rcx,rsp
  00000000000000B1: E8 00 00 00 00     call        __security_check_cookie
  00000000000000B6: 48 83 C4 68        add         rsp,68h
  00000000000000BA: 5F                 pop         rdi
  00000000000000BB: 5E                 pop         rsi
  00000000000000BC: C3                 ret

??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z (protected: void __cdecl std::time_get<wchar_t,class std::istreambuf_iterator<wchar_t,struct std::char_traits<wchar_t> > >::_Getvals<wchar_t>(wchar_t,class std::_Locinfo const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 66 89 54 24 10     mov         word ptr [rsp+10h],dx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 56                 push        rsi
  0000000000000010: 57                 push        rdi
  0000000000000011: 48 83 EC 68        sub         rsp,68h
  0000000000000015: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000001C: 48 33 C4           xor         rax,rsp
  000000000000001F: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000024: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000029: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ]
  0000000000000037: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000003F: 48 8D 79 2C        lea         rdi,[rcx+2Ch]
  0000000000000043: 48 8B F0           mov         rsi,rax
  0000000000000046: B9 2C 00 00 00     mov         ecx,2Ch
  000000000000004B: F3 A4              rep movs    byte ptr [rdi],byte ptr [rsi]
  000000000000004D: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000055: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ]
  000000000000005B: 48 8B C8           mov         rcx,rax
  000000000000005E: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000063: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000006B: 48 89 41 10        mov         qword ptr [rcx+10h],rax
  000000000000006F: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ]
  000000000000007D: 48 8B C8           mov         rcx,rax
  0000000000000080: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000085: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000008D: 48 89 41 18        mov         qword ptr [rcx+18h],rax
  0000000000000091: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@]
                    00
  0000000000000098: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  000000000000009D: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000000A5: 48 89 41 20        mov         qword ptr [rcx+20h],rax
  00000000000000A9: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000AE: 48 33 CC           xor         rcx,rsp
  00000000000000B1: E8 00 00 00 00     call        __security_check_cookie
  00000000000000B6: 48 83 C4 68        add         rsp,68h
  00000000000000BA: 5F                 pop         rdi
  00000000000000BB: 5E                 pop         rsi
  00000000000000BC: C3                 ret

??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class std::basic_ostream<char,struct std::char_traits<char> > &,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 81 EC C0 00 00  sub         rsp,0C0h
                    00
  0000000000000017: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001C: B9 28 00 00 00     mov         ecx,28h
  0000000000000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000026: F3 AB              rep stos    dword ptr [rdi]
  0000000000000028: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000030: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000038: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000040: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000043: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000047: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000004F: 48 03 C8           add         rcx,rax
  0000000000000052: 48 8B C1           mov         rax,rcx
  0000000000000055: 48 8B C8           mov         rcx,rax
  0000000000000058: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  000000000000005E: 48 85 C0           test        rax,rax
  0000000000000061: 7E 30              jle         0000000000000093
  0000000000000063: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000006B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000006E: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000072: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000007A: 48 03 C8           add         rcx,rax
  000000000000007D: 48 8B C1           mov         rax,rcx
  0000000000000080: 48 8B C8           mov         rcx,rax
  0000000000000083: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  0000000000000089: 48 3B 84 24 E0 00  cmp         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000091: 77 0B              ja          000000000000009E
  0000000000000093: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  000000000000009C: EB 33              jmp         00000000000000D1
  000000000000009E: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  00000000000000A6: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A9: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000AD: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  00000000000000B5: 48 03 C8           add         rcx,rax
  00000000000000B8: 48 8B C1           mov         rax,rcx
  00000000000000BB: 48 8B C8           mov         rcx,rax
  00000000000000BE: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  00000000000000C4: 48 2B 84 24 E0 00  sub         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000000CC: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000D1: 48 8B 94 24 D0 00  mov         rdx,qword ptr [rsp+0D0h]
                    00 00
  00000000000000D9: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  00000000000000DE: E8 00 00 00 00     call        ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  00000000000000E3: 90                 nop
  00000000000000E4: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  00000000000000E9: E8 00 00 00 00     call        ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
  00000000000000EE: 0F B6 C0           movzx       eax,al
  00000000000000F1: 85 C0              test        eax,eax
  00000000000000F3: 75 10              jne         0000000000000105
  00000000000000F5: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000000F9: 83 C8 04           or          eax,4
  00000000000000FC: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000100: E9 77 02 00 00     jmp         $LN24
  0000000000000105: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000010D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000110: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000114: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000011C: 48 03 C8           add         rcx,rax
  000000000000011F: 48 8B C1           mov         rax,rcx
  0000000000000122: 48 8B C8           mov         rcx,rax
  0000000000000125: FF 15 00 00 00 00  call        qword ptr [__imp_?flags@ios_base@std@@QEBAHXZ]
  000000000000012B: 25 C0 01 00 00     and         eax,1C0h
  0000000000000130: 83 F8 40           cmp         eax,40h
  0000000000000133: 0F 84 BB 00 00 00  je          00000000000001F4
  0000000000000139: EB 0D              jmp         0000000000000148
  000000000000013B: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000140: 48 FF C8           dec         rax
  0000000000000143: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000148: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  000000000000014E: 0F 86 A0 00 00 00  jbe         00000000000001F4
  0000000000000154: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000015C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000015F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000163: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000016B: 48 03 C8           add         rcx,rax
  000000000000016E: 48 8B C1           mov         rax,rcx
  0000000000000171: 48 8B C8           mov         rcx,rax
  0000000000000174: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000017A: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000017F: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000187: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000018A: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000018E: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000196: 48 03 C8           add         rcx,rax
  0000000000000199: 48 8B C1           mov         rax,rcx
  000000000000019C: 48 8B C8           mov         rcx,rax
  000000000000019F: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  00000000000001A5: 88 44 24 68        mov         byte ptr [rsp+68h],al
  00000000000001A9: 0F B6 54 24 68     movzx       edx,byte ptr [rsp+68h]
  00000000000001AE: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000001B3: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000001B9: 89 44 24 6C        mov         dword ptr [rsp+6Ch],eax
  00000000000001BD: 8B 44 24 6C        mov         eax,dword ptr [rsp+6Ch]
  00000000000001C1: 89 44 24 70        mov         dword ptr [rsp+70h],eax
  00000000000001C5: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000001CA: 89 44 24 74        mov         dword ptr [rsp+74h],eax
  00000000000001CE: 8B 54 24 70        mov         edx,dword ptr [rsp+70h]
  00000000000001D2: 8B 4C 24 74        mov         ecx,dword ptr [rsp+74h]
  00000000000001D6: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  00000000000001DB: 0F B6 C0           movzx       eax,al
  00000000000001DE: 85 C0              test        eax,eax
  00000000000001E0: 74 0D              je          00000000000001EF
  00000000000001E2: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000001E6: 83 C8 04           or          eax,4
  00000000000001E9: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000001ED: EB 05              jmp         00000000000001F4
  00000000000001EF: E9 47 FF FF FF     jmp         000000000000013B
  00000000000001F4: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  00000000000001F9: 75 70              jne         000000000000026B
  00000000000001FB: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000203: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000206: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000020A: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000212: 48 03 C8           add         rcx,rax
  0000000000000215: 48 8B C1           mov         rax,rcx
  0000000000000218: 48 8B C8           mov         rcx,rax
  000000000000021B: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000221: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000226: 4C 8B 84 24 E0 00  mov         r8,qword ptr [rsp+0E0h]
                    00 00
  000000000000022E: 48 8B 94 24 D8 00  mov         rdx,qword ptr [rsp+0D8h]
                    00 00
  0000000000000236: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  000000000000023B: FF 15 00 00 00 00  call        qword ptr [__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z]
  0000000000000241: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000249: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000251: 48 39 84 24 80 00  cmp         qword ptr [rsp+80h],rax
                    00 00
  0000000000000259: 74 10              je          000000000000026B
  000000000000025B: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000025F: 83 C8 04           or          eax,4
  0000000000000262: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000266: E9 D9 00 00 00     jmp         0000000000000344
  000000000000026B: EB 0D              jmp         000000000000027A
  000000000000026D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000272: 48 FF C8           dec         rax
  0000000000000275: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000027A: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000280: 0F 86 BE 00 00 00  jbe         0000000000000344
  0000000000000286: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000028E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000291: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000295: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000029D: 48 03 C8           add         rcx,rax
  00000000000002A0: 48 8B C1           mov         rax,rcx
  00000000000002A3: 48 8B C8           mov         rcx,rax
  00000000000002A6: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000002AC: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  00000000000002B4: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  00000000000002BC: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000002BF: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002C3: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  00000000000002CB: 48 03 C8           add         rcx,rax
  00000000000002CE: 48 8B C1           mov         rax,rcx
  00000000000002D1: 48 8B C8           mov         rcx,rax
  00000000000002D4: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  00000000000002DA: 88 84 24 90 00 00  mov         byte ptr [rsp+90h],al
                    00
  00000000000002E1: 0F B6 94 24 90 00  movzx       edx,byte ptr [rsp+90h]
                    00 00
  00000000000002E9: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  00000000000002F1: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000002F7: 89 84 24 94 00 00  mov         dword ptr [rsp+94h],eax
                    00
  00000000000002FE: 8B 84 24 94 00 00  mov         eax,dword ptr [rsp+94h]
                    00
  0000000000000305: 89 84 24 98 00 00  mov         dword ptr [rsp+98h],eax
                    00
  000000000000030C: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000311: 89 84 24 9C 00 00  mov         dword ptr [rsp+9Ch],eax
                    00
  0000000000000318: 8B 94 24 98 00 00  mov         edx,dword ptr [rsp+98h]
                    00
  000000000000031F: 8B 8C 24 9C 00 00  mov         ecx,dword ptr [rsp+9Ch]
                    00
  0000000000000326: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  000000000000032B: 0F B6 C0           movzx       eax,al
  000000000000032E: 85 C0              test        eax,eax
  0000000000000330: 74 0D              je          000000000000033F
  0000000000000332: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000336: 83 C8 04           or          eax,4
  0000000000000339: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000033D: EB 05              jmp         0000000000000344
  000000000000033F: E9 29 FF FF FF     jmp         000000000000026D
  0000000000000344: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000034C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000034F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000353: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  000000000000035B: 48 03 C8           add         rcx,rax
  000000000000035E: 48 8B C1           mov         rax,rcx
  0000000000000361: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  0000000000000369: 33 D2              xor         edx,edx
  000000000000036B: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000373: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEAA_J_J@Z]
  0000000000000379: 90                 nop
  000000000000037A: EB 00              jmp         $LN24
$LN24:
  000000000000037C: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000384: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000387: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000038B: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000393: 48 03 C8           add         rcx,rax
  0000000000000396: 48 8B C1           mov         rax,rcx
  0000000000000399: 48 89 84 24 B0 00  mov         qword ptr [rsp+0B0h],rax
                    00 00
  00000000000003A1: 45 33 C0           xor         r8d,r8d
  00000000000003A4: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  00000000000003A8: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  00000000000003B0: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  00000000000003B6: 90                 nop
  00000000000003B7: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  00000000000003BF: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000003C4: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  00000000000003C9: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00000000000003CE: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000003D3: 48 8B F8           mov         rdi,rax
  00000000000003D6: 48 8B CC           mov         rcx,rsp
  00000000000003D9: 48 8D 15 00 00 00  lea         rdx,[??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData]
                    00
  00000000000003E0: E8 00 00 00 00     call        _RTC_CheckStackVars
  00000000000003E5: 48 8B C7           mov         rax,rdi
  00000000000003E8: 48 81 C4 C0 00 00  add         rsp,0C0h
                    00
  00000000000003EF: 5F                 pop         rdi
  00000000000003F0: C3                 ret

?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA (int `class dtor$0::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class dtor$0::std &,char const * const,unsigned __int64)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 38        lea         rcx,[rbp+38h]
  0000000000000017: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA (int `class catch$1::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class catch$1::std &,char const * const,unsigned __int64)'::`1'::catch$1):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  0000000000000013: 48 8B 85 D0 00 00  mov         rax,qword ptr [rbp+0D0h]
                    00
  000000000000001A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001D: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000021: 48 8B 8D D0 00 00  mov         rcx,qword ptr [rbp+0D0h]
                    00
  0000000000000028: 48 03 C8           add         rcx,rax
  000000000000002B: 48 8B C1           mov         rax,rcx
  000000000000002E: 48 89 85 A8 00 00  mov         qword ptr [rbp+0A8h],rax
                    00
  0000000000000035: 41 B0 01           mov         r8b,1
  0000000000000038: BA 04 00 00 00     mov         edx,4
  000000000000003D: 48 8B 8D A8 00 00  mov         rcx,qword ptr [rbp+0A8h]
                    00
  0000000000000044: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  000000000000004A: 90                 nop
  000000000000004B: 48 8D 05 00 00 00  lea         rax,[$LN24]
                    00
  0000000000000052: 48 83 C4 28        add         rsp,28h
  0000000000000056: 5F                 pop         rdi
  0000000000000057: 5D                 pop         rbp
  0000000000000058: C3                 ret
  0000000000000059: CC                 int         3

??$_Max_limit@_J@std@@YA_JXZ (__int64 __cdecl std::_Max_limit<__int64>(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 48 83 EC 10        sub         rsp,10h
  0000000000000006: 48 C7 04 24 FF FF  mov         qword ptr [rsp],0FFFFFFFFFFFFFFFFh
                    FF FF
  000000000000000E: 48 B8 FF FF FF FF  mov         rax,7FFFFFFFFFFFFFFFh
                    FF FF FF 7F
  0000000000000018: 48 83 C4 10        add         rsp,10h
  000000000000001C: 5F                 pop         rdi
  000000000000001D: C3                 ret

??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z (private: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Reallocate_grow_by<class `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>,char>(unsigned __int64,class `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>,char)):
  0000000000000000: 44 88 4C 24 20     mov         byte ptr [rsp+20h],r9b
  0000000000000005: 44 88 44 24 18     mov         byte ptr [rsp+18h],r8b
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 81 EC A0 00 00  sub         rsp,0A0h
                    00
  000000000000001C: 48 8D 7C 24 30     lea         rdi,[rsp+30h]
  0000000000000021: B9 1C 00 00 00     mov         ecx,1Ch
  0000000000000026: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000000000000002B: F3 AB              rep stos    dword ptr [rdi]
  000000000000002D: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  0000000000000035: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000003D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000042: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000047: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000004B: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000050: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  0000000000000058: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000005D: 48 2B 44 24 38     sub         rax,qword ptr [rsp+38h]
  0000000000000062: 48 3B 84 24 B8 00  cmp         rax,qword ptr [rsp+0B8h]
                    00 00
  000000000000006A: 73 06              jae         0000000000000072
  000000000000006C: E8 00 00 00 00     call        ?_Xlen_string@std@@YAXXZ
  0000000000000071: 90                 nop
  0000000000000072: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  000000000000007A: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000007F: 48 03 C8           add         rcx,rax
  0000000000000082: 48 8B C1           mov         rax,rcx
  0000000000000085: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000008A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000008F: 48 8B 40 20        mov         rax,qword ptr [rax+20h]
  0000000000000093: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000098: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  000000000000009D: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  00000000000000A5: E8 00 00 00 00     call        ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
  00000000000000AA: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000AF: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  00000000000000B7: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
  00000000000000BC: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000C1: 48 8D 54 24 58     lea         rdx,[rsp+58h]
  00000000000000C6: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000000CB: E8 00 00 00 00     call        ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
  00000000000000D0: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  00000000000000D5: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000DA: E8 00 00 00 00     call        ?_Orphan_all@_Container_base12@std@@QEAAXXZ
  00000000000000DF: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000E4: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000E9: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  00000000000000ED: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000F2: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000F7: 48 89 48 20        mov         qword ptr [rax+20h],rcx
  00000000000000FB: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  0000000000000100: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  0000000000000105: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  000000000000010D: 48 83 7C 24 48 0F  cmp         qword ptr [rsp+48h],0Fh
  0000000000000113: 76 6E              jbe         0000000000000183
  0000000000000115: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000011A: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000011E: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000126: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  000000000000012E: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  0000000000000133: 0F B6 8C 24 C8 00  movzx       ecx,byte ptr [rsp+0C8h]
                    00 00
  000000000000013B: 88 4C 24 20        mov         byte ptr [rsp+20h],cl
  000000000000013F: 4C 8B 4C 24 38     mov         r9,qword ptr [rsp+38h]
  0000000000000144: 4C 8B C0           mov         r8,rax
  0000000000000147: 48 8B 94 24 88 00  mov         rdx,qword ptr [rsp+88h]
                    00 00
  000000000000014F: 48 8D 8C 24 C0 00  lea         rcx,[rsp+0C0h]
                    00 00
  0000000000000157: E8 00 00 00 00     call        ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
  000000000000015C: 4C 8B 44 24 48     mov         r8,qword ptr [rsp+48h]
  0000000000000161: 48 8B 94 24 90 00  mov         rdx,qword ptr [rsp+90h]
                    00 00
  0000000000000169: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000016E: E8 00 00 00 00     call        ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
  0000000000000173: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000178: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  000000000000017D: 48 89 48 08        mov         qword ptr [rax+8],rcx
  0000000000000181: EB 49              jmp         00000000000001CC
  0000000000000183: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000188: 48 83 C0 08        add         rax,8
  000000000000018C: 0F B6 8C 24 C8 00  movzx       ecx,byte ptr [rsp+0C8h]
                    00 00
  0000000000000194: 88 4C 24 20        mov         byte ptr [rsp+20h],cl
  0000000000000198: 4C 8B 4C 24 38     mov         r9,qword ptr [rsp+38h]
  000000000000019D: 4C 8B C0           mov         r8,rax
  00000000000001A0: 48 8B 94 24 88 00  mov         rdx,qword ptr [rsp+88h]
                    00 00
  00000000000001A8: 48 8D 8C 24 C0 00  lea         rcx,[rsp+0C0h]
                    00 00
  00000000000001B0: E8 00 00 00 00     call        ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
  00000000000001B5: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000001BA: 48 83 C0 08        add         rax,8
  00000000000001BE: 48 8D 54 24 78     lea         rdx,[rsp+78h]
  00000000000001C3: 48 8B C8           mov         rcx,rax
  00000000000001C6: E8 00 00 00 00     call        ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
  00000000000001CB: 90                 nop
  00000000000001CC: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000001D4: 48 8B F8           mov         rdi,rax
  00000000000001D7: 48 8B CC           mov         rcx,rsp
  00000000000001DA: 48 8D 15 00 00 00  lea         rdx,[??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcFrameData]
                    00
  00000000000001E1: E8 00 00 00 00     call        _RTC_CheckStackVars
  00000000000001E6: 48 8B C7           mov         rax,rdi
  00000000000001E9: 48 81 C4 A0 00 00  add         rsp,0A0h
                    00
  00000000000001F0: 5F                 pop         rdi
  00000000000001F1: C3                 ret

??$_Search_vectorized@$$CBD$$CBD@std@@YAPEBDQEBD00_K@Z (char const * __cdecl std::_Search_vectorized<char const ,char const >(char const * const,char const * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 20        sub         rsp,20h
  0000000000000019: 4C 8B 4C 24 48     mov         r9,qword ptr [rsp+48h]
  000000000000001E: 4C 8B 44 24 40     mov         r8,qword ptr [rsp+40h]
  0000000000000023: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        __std_search_1
  0000000000000032: 48 83 C4 20        add         rsp,20h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: C3                 ret

??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z (unsigned __int64 __cdecl std::_Traits_find<struct std::char_traits<char> >(char const * const,unsigned __int64,unsigned __int64,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 40        sub         rsp,40h
  0000000000000019: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000001E: 48 39 44 24 70     cmp         qword ptr [rsp+70h],rax
  0000000000000023: 77 17              ja          000000000000003C
  0000000000000025: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000002A: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000002F: 48 2B C8           sub         rcx,rax
  0000000000000032: 48 8B C1           mov         rax,rcx
  0000000000000035: 48 39 44 24 60     cmp         qword ptr [rsp+60h],rax
  000000000000003A: 76 0C              jbe         0000000000000048
  000000000000003C: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  0000000000000043: E9 35 01 00 00     jmp         000000000000017D
  0000000000000048: 48 83 7C 24 70 00  cmp         qword ptr [rsp+70h],0
  000000000000004E: 75 0A              jne         000000000000005A
  0000000000000050: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000055: E9 23 01 00 00     jmp         000000000000017D
  000000000000005A: E8 00 00 00 00     call        ?_Is_constant_evaluated@std@@YA_NXZ
  000000000000005F: 0F B6 C0           movzx       eax,al
  0000000000000062: 85 C0              test        eax,eax
  0000000000000064: 75 70              jne         00000000000000D6
  0000000000000066: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000006B: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000070: 48 03 C8           add         rcx,rax
  0000000000000073: 48 8B C1           mov         rax,rcx
  0000000000000076: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000007B: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000080: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000085: 48 03 C8           add         rcx,rax
  0000000000000088: 48 8B C1           mov         rax,rcx
  000000000000008B: 4C 8B 4C 24 70     mov         r9,qword ptr [rsp+70h]
  0000000000000090: 4C 8B 44 24 68     mov         r8,qword ptr [rsp+68h]
  0000000000000095: 48 8B 54 24 20     mov         rdx,qword ptr [rsp+20h]
  000000000000009A: 48 8B C8           mov         rcx,rax
  000000000000009D: E8 00 00 00 00     call        ??$_Search_vectorized@$$CBD$$CBD@std@@YAPEBDQEBD00_K@Z
  00000000000000A2: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000A7: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000AC: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  00000000000000B1: 74 17              je          00000000000000CA
  00000000000000B3: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000B8: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000BD: 48 2B C8           sub         rcx,rax
  00000000000000C0: 48 8B C1           mov         rax,rcx
  00000000000000C3: E9 B5 00 00 00     jmp         000000000000017D
  00000000000000C8: EB 0C              jmp         00000000000000D6
  00000000000000CA: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  00000000000000D1: E9 A7 00 00 00     jmp         000000000000017D
  00000000000000D6: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000DB: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000E0: 48 2B C8           sub         rcx,rax
  00000000000000E3: 48 8B C1           mov         rax,rcx
  00000000000000E6: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000EB: 48 8D 44 01 01     lea         rax,[rcx+rax+1]
  00000000000000F0: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000F5: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000FA: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000FF: 48 03 C8           add         rcx,rax
  0000000000000102: 48 8B C1           mov         rax,rcx
  0000000000000105: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000010A: EB 0D              jmp         0000000000000119
  000000000000010C: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000111: 48 FF C0           inc         rax
  0000000000000114: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000119: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000011E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000123: 48 2B C8           sub         rcx,rax
  0000000000000126: 48 8B C1           mov         rax,rcx
  0000000000000129: 4C 8B 44 24 68     mov         r8,qword ptr [rsp+68h]
  000000000000012E: 48 8B D0           mov         rdx,rax
  0000000000000131: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000136: E8 00 00 00 00     call        ?find@?$_Narrow_char_traits@DH@std@@SAPEBDQEBD_KAEBD@Z
  000000000000013B: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000140: 48 83 7C 24 38 00  cmp         qword ptr [rsp+38h],0
  0000000000000146: 75 09              jne         0000000000000151
  0000000000000148: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  000000000000014F: EB 2C              jmp         000000000000017D
  0000000000000151: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000156: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  000000000000015B: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000160: E8 00 00 00 00     call        ?compare@?$_Narrow_char_traits@DH@std@@SAHQEBD0_K@Z
  0000000000000165: 85 C0              test        eax,eax
  0000000000000167: 75 12              jne         000000000000017B
  0000000000000169: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000016E: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000173: 48 2B C8           sub         rcx,rax
  0000000000000176: 48 8B C1           mov         rax,rcx
  0000000000000179: EB 02              jmp         000000000000017D
  000000000000017B: EB 8F              jmp         000000000000010C
  000000000000017D: 48 83 C4 40        add         rsp,40h
  0000000000000181: 5F                 pop         rdi
  0000000000000182: C3                 ret

??$_Unfancy@D@std@@YAPEADPEAD@Z (char * __cdecl std::_Unfancy<char>(char *)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z (struct std::_Container_proxy * __cdecl std::_Unfancy<struct std::_Container_proxy>(struct std::_Container_proxy *)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z (bool __cdecl std::_Ungetc<char>(char const &,struct _iobuf *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 0F B6 00           movzx       eax,byte ptr [rax]
  0000000000000017: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000001C: 8B C8              mov         ecx,eax
  000000000000001E: FF 15 00 00 00 00  call        qword ptr [__imp_ungetc]
  0000000000000024: 83 F8 FF           cmp         eax,0FFFFFFFFh
  0000000000000027: 74 0A              je          0000000000000033
  0000000000000029: C7 44 24 20 01 00  mov         dword ptr [rsp+20h],1
                    00 00
  0000000000000031: EB 08              jmp         000000000000003B
  0000000000000033: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  000000000000003B: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000040: 48 83 C4 30        add         rsp,30h
  0000000000000044: 5F                 pop         rdi
  0000000000000045: C3                 ret

??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z (class std::codecvt<char,char,struct _Mbstatet> const * __cdecl std::addressof<class std::codecvt<char,char,struct _Mbstatet> const >(class std::codecvt<char,char,struct _Mbstatet> const &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z (char * * __cdecl std::addressof<char *>(char * &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z (struct std::_Container_base12 * __cdecl std::addressof<struct std::_Container_base12>(struct std::_Container_base12 &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z (struct std::_Container_proxy * __cdecl std::addressof<struct std::_Container_proxy>(struct std::_Container_proxy &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z (class std::basic_filebuf<char,struct std::char_traits<char> > * __cdecl std::addressof<class std::basic_filebuf<char,struct std::char_traits<char> > >(class std::basic_filebuf<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$addressof@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z (class std::basic_ostream<char,struct std::char_traits<char> > * __cdecl std::addressof<class std::basic_ostream<char,struct std::char_traits<char> > >(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??$construct_at@D$$V@std@@YAPEADQEAD@Z (char * __cdecl std::construct_at<char>(char * const)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 C7 44 24 20 01  mov         qword ptr [rsp+20h],1
                    00 00 00
  0000000000000013: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  0000000000000018: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000001D: E8 00 00 00 00     call        ??2@YAPEAX_KPEAX@Z
  0000000000000022: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000027: 48 8B 7C 24 28     mov         rdi,qword ptr [rsp+28h]
  000000000000002C: 33 C0              xor         eax,eax
  000000000000002E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000033: F3 AA              rep stos    byte ptr [rdi]
  0000000000000035: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000003A: 48 83 C4 30        add         rsp,30h
  000000000000003E: 5F                 pop         rdi
  000000000000003F: C3                 ret

??$construct_at@PEADAEBQEAD@std@@YAPEAPEADQEAPEADAEBQEAD@Z (char * * __cdecl std::construct_at<char *,char * const &>(char * * const,char * const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  0000000000000014: B9 08 00 00 00     mov         ecx,8
  0000000000000019: E8 00 00 00 00     call        ??2@YAPEAX_KPEAX@Z
  000000000000001E: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000023: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000028: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000002D: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000030: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000033: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000038: 48 83 C4 30        add         rsp,30h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??$construct_at@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAPEAU_Container_proxy@0@QEAU10@$$QEAPEAU_Container_base12@0@@Z (struct std::_Container_proxy * __cdecl std::construct_at<struct std::_Container_proxy,struct std::_Container_base12 *>(struct std::_Container_proxy * const,struct std::_Container_base12 * &&)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  0000000000000014: B9 10 00 00 00     mov         ecx,10h
  0000000000000019: E8 00 00 00 00     call        ??2@YAPEAX_KPEAX@Z
  000000000000001E: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000023: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000028: 48 8B 10           mov         rdx,qword ptr [rax]
  000000000000002B: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000030: E8 00 00 00 00     call        ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
  0000000000000035: 48 83 C4 30        add         rsp,30h
  0000000000000039: 5F                 pop         rdi
  000000000000003A: C3                 ret

??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@$0A@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z (class std::chrono::duration<double,struct std::ratio<1,1> > __cdecl std::chrono::duration_cast<class std::chrono::duration<double,struct std::ratio<1,1> >,__int64,struct std::ratio<1,1000000000>,0>(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  0000000000000014: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  0000000000000019: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000001E: E8 00 00 00 00     call        ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ
  0000000000000023: F2 48 0F 2A C0     cvtsi2sd    xmm0,rax
  0000000000000028: F2 0F 5E 05 00 00  divsd       xmm0,mmword ptr [__real@41cdcd6500000000]
                    00 00
  0000000000000030: F2 0F 11 44 24 28  movsd       mmword ptr [rsp+28h],xmm0
  0000000000000036: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  000000000000003B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000040: E8 00 00 00 00     call        ??$?0N$0A@@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEAA@AEBN@Z
  0000000000000045: 90                 nop
  0000000000000046: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004B: 48 83 C4 30        add         rsp,30h
  000000000000004F: 5F                 pop         rdi
  0000000000000050: C3                 ret

??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::endl<char,struct std::char_traits<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000012: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000016: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001B: 48 03 C8           add         rcx,rax
  000000000000001E: 48 8B C1           mov         rax,rcx
  0000000000000021: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000026: B2 0A              mov         dl,0Ah
  0000000000000028: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000002D: FF 15 00 00 00 00  call        qword ptr [__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z]
  0000000000000033: 0F B6 D0           movzx       edx,al
  0000000000000036: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003B: FF 15 00 00 00 00  call        qword ptr [__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z]
  0000000000000041: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000046: FF 15 00 00 00 00  call        qword ptr [__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ]
  000000000000004C: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000051: 48 83 C4 30        add         rsp,30h
  0000000000000055: 5F                 pop         rdi
  0000000000000056: C3                 ret

??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z (struct std::_Iterator_base12 * __cdecl std::exchange<struct std::_Iterator_base12 *,std::nullptr_t>(struct std::_Iterator_base12 * &,std::nullptr_t &&)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 10        sub         rsp,10h
  000000000000000F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 89 04 24        mov         qword ptr [rsp],rax
  000000000000001B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000020: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000025: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000028: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002B: 48 8B 04 24        mov         rax,qword ptr [rsp]
  000000000000002F: 48 83 C4 10        add         rsp,10h
  0000000000000033: 5F                 pop         rdi
  0000000000000034: C3                 ret

??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z (class std::_Facet_base * __cdecl std::exchange<class std::_Facet_base *,std::nullptr_t>(class std::_Facet_base * &,std::nullptr_t &&)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 10        sub         rsp,10h
  000000000000000F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 89 04 24        mov         qword ptr [rsp],rax
  000000000000001B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000020: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000025: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000028: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002B: 48 8B 04 24        mov         rax,qword ptr [rsp]
  000000000000002F: 48 83 C4 10        add         rsp,10h
  0000000000000033: 5F                 pop         rdi
  0000000000000034: C3                 ret

??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z (class std::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_istream<char,struct std::char_traits<char> > &&,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)):
  0000000000000000: 44 88 44 24 18     mov         byte ptr [rsp+18h],r8b
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 81 EC 90 00 00  sub         rsp,90h
                    00
  0000000000000017: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001C: B9 1C 00 00 00     mov         ecx,1Ch
  0000000000000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000026: F3 AB              rep stos    dword ptr [rdi]
  0000000000000028: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000030: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000038: C6 44 24 24 00     mov         byte ptr [rsp+24h],0
  000000000000003D: 41 B0 01           mov         r8b,1
  0000000000000040: 48 8B 94 24 A0 00  mov         rdx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000048: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  000000000000004D: E8 00 00 00 00     call        ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
  0000000000000052: 90                 nop
  0000000000000053: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  0000000000000058: E8 00 00 00 00     call        ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
  000000000000005D: 0F B6 C0           movzx       eax,al
  0000000000000060: 85 C0              test        eax,eax
  0000000000000062: 0F 84 70 01 00 00  je          $LN19
  0000000000000068: 33 D2              xor         edx,edx
  000000000000006A: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000072: E8 00 00 00 00     call        ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
  0000000000000077: 90                 nop
  0000000000000078: 0F B6 8C 24 B0 00  movzx       ecx,byte ptr [rsp+0B0h]
                    00 00
  0000000000000080: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  0000000000000085: 89 44 24 54        mov         dword ptr [rsp+54h],eax
  0000000000000089: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000091: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000094: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000098: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  00000000000000A0: 48 03 C8           add         rcx,rax
  00000000000000A3: 48 8B C1           mov         rax,rcx
  00000000000000A6: 48 8B C8           mov         rcx,rax
  00000000000000A9: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000000AF: 48 8B C8           mov         rcx,rax
  00000000000000B2: FF 15 00 00 00 00  call        qword ptr [__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  00000000000000B8: 89 44 24 68        mov         dword ptr [rsp+68h],eax
  00000000000000BC: 8B 44 24 68        mov         eax,dword ptr [rsp+68h]
  00000000000000C0: 89 44 24 58        mov         dword ptr [rsp+58h],eax
  00000000000000C4: EB 3B              jmp         0000000000000101
  00000000000000C6: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000000CE: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000D1: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000D5: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  00000000000000DD: 48 03 C8           add         rcx,rax
  00000000000000E0: 48 8B C1           mov         rax,rcx
  00000000000000E3: 48 8B C8           mov         rcx,rax
  00000000000000E6: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000000EC: 48 8B C8           mov         rcx,rax
  00000000000000EF: FF 15 00 00 00 00  call        qword ptr [__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  00000000000000F5: 89 44 24 6C        mov         dword ptr [rsp+6Ch],eax
  00000000000000F9: 8B 44 24 6C        mov         eax,dword ptr [rsp+6Ch]
  00000000000000FD: 89 44 24 58        mov         dword ptr [rsp+58h],eax
  0000000000000101: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000106: 8B 54 24 58        mov         edx,dword ptr [rsp+58h]
  000000000000010A: 8B C8              mov         ecx,eax
  000000000000010C: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  0000000000000111: 0F B6 C0           movzx       eax,al
  0000000000000114: 85 C0              test        eax,eax
  0000000000000116: 74 15              je          000000000000012D
  0000000000000118: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000011C: 83 C8 01           or          eax,1
  000000000000011F: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000123: E9 AE 00 00 00     jmp         00000000000001D6
  0000000000000128: E9 A4 00 00 00     jmp         00000000000001D1
  000000000000012D: 8B 54 24 54        mov         edx,dword ptr [rsp+54h]
  0000000000000131: 8B 4C 24 58        mov         ecx,dword ptr [rsp+58h]
  0000000000000135: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  000000000000013A: 0F B6 C0           movzx       eax,al
  000000000000013D: 85 C0              test        eax,eax
  000000000000013F: 74 39              je          000000000000017A
  0000000000000141: C6 44 24 24 01     mov         byte ptr [rsp+24h],1
  0000000000000146: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000014E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000151: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000155: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000015D: 48 03 C8           add         rcx,rax
  0000000000000160: 48 8B C1           mov         rax,rcx
  0000000000000163: 48 8B C8           mov         rcx,rax
  0000000000000166: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000016C: 48 8B C8           mov         rcx,rax
  000000000000016F: FF 15 00 00 00 00  call        qword ptr [__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  0000000000000175: 90                 nop
  0000000000000176: EB 5E              jmp         00000000000001D6
  0000000000000178: EB 57              jmp         00000000000001D1
  000000000000017A: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000182: E8 00 00 00 00     call        ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000187: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000018C: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000194: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000199: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000019E: 48 3B C1           cmp         rax,rcx
  00000000000001A1: 77 0F              ja          00000000000001B2
  00000000000001A3: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000001A7: 83 C8 02           or          eax,2
  00000000000001AA: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000001AE: EB 26              jmp         00000000000001D6
  00000000000001B0: EB 1F              jmp         00000000000001D1
  00000000000001B2: 8B 4C 24 58        mov         ecx,dword ptr [rsp+58h]
  00000000000001B6: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  00000000000001BB: 0F B6 D0           movzx       edx,al
  00000000000001BE: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  00000000000001C6: E8 00 00 00 00     call        ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z
  00000000000001CB: 90                 nop
  00000000000001CC: C6 44 24 24 01     mov         byte ptr [rsp+24h],1
  00000000000001D1: E9 F0 FE FF FF     jmp         00000000000000C6
  00000000000001D6: EB 00              jmp         $LN19
$LN19:
  00000000000001D8: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  00000000000001DD: 85 C0              test        eax,eax
  00000000000001DF: 75 0B              jne         00000000000001EC
  00000000000001E1: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000001E5: 83 C8 02           or          eax,2
  00000000000001E8: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000001EC: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000001F4: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000001F7: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000001FB: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000203: 48 03 C8           add         rcx,rax
  0000000000000206: 48 8B C1           mov         rax,rcx
  0000000000000209: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000211: 45 33 C0           xor         r8d,r8d
  0000000000000214: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  0000000000000218: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  0000000000000220: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000226: 90                 nop
  0000000000000227: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000022F: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000234: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  0000000000000239: E8 00 00 00 00     call        ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000023E: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000243: 48 8B F8           mov         rdi,rax
  0000000000000246: 48 8B CC           mov         rcx,rsp
  0000000000000249: 48 8D 15 00 00 00  lea         rdx,[??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcFrameData]
                    00
  0000000000000250: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000255: 48 8B C7           mov         rax,rdi
  0000000000000258: 48 81 C4 90 00 00  add         rsp,90h
                    00
  000000000000025F: 5F                 pop         rdi
  0000000000000260: C3                 ret

?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA (int `class dtor$0::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class dtor$0::std &&,class dtor$0::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 38        lea         rcx,[rbp+38h]
  0000000000000017: E8 00 00 00 00     call        ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA (int `class catch$1::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class catch$1::std &&,class catch$1::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)'::`1'::catch$1):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:
  0000000000000013: 48 8B 85 A0 00 00  mov         rax,qword ptr [rbp+0A0h]
                    00
  000000000000001A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001D: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000021: 48 8B 8D A0 00 00  mov         rcx,qword ptr [rbp+0A0h]
                    00
  0000000000000028: 48 03 C8           add         rcx,rax
  000000000000002B: 48 8B C1           mov         rax,rcx
  000000000000002E: 48 89 45 78        mov         qword ptr [rbp+78h],rax
  0000000000000032: 41 B0 01           mov         r8b,1
  0000000000000035: BA 04 00 00 00     mov         edx,4
  000000000000003A: 48 8B 4D 78        mov         rcx,qword ptr [rbp+78h]
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000044: 90                 nop
  0000000000000045: 48 8D 05 00 00 00  lea         rax,[$LN19]
                    00
  000000000000004C: 48 83 C4 28        add         rsp,28h
  0000000000000050: 5F                 pop         rdi
  0000000000000051: 5D                 pop         rbp
  0000000000000052: C3                 ret
  0000000000000053: CC                 int         3

??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z (class std::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_istream<char,struct std::char_traits<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000020: 48 03 C8           add         rcx,rax
  0000000000000023: 48 8B C1           mov         rax,rcx
  0000000000000026: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002B: B2 0A              mov         dl,0Ah
  000000000000002D: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000032: FF 15 00 00 00 00  call        qword ptr [__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z]
  0000000000000038: 44 0F B6 C0        movzx       r8d,al
  000000000000003C: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000041: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000046: E8 00 00 00 00     call        ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  000000000000004B: 48 83 C4 30        add         rsp,30h
  000000000000004F: 5F                 pop         rdi
  0000000000000050: C3                 ret

??$max@_K@std@@YAAEB_KAEB_K0@Z (unsigned __int64 const & __cdecl std::max<unsigned __int64>(unsigned __int64 const &,unsigned __int64 const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 10        sub         rsp,10h
  000000000000000F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000014: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000019: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000001C: 48 39 08           cmp         qword ptr [rax],rcx
  000000000000001F: 73 0C              jae         000000000000002D
  0000000000000021: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000026: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  000000000000002B: EB 0A              jmp         0000000000000037
  000000000000002D: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000032: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000037: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000003C: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000040: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000044: 48 83 C4 10        add         rsp,10h
  0000000000000048: 5F                 pop         rdi
  0000000000000049: C3                 ret

??$min@_K@std@@YAAEB_KAEB_K0@Z (unsigned __int64 const & __cdecl std::min<unsigned __int64>(unsigned __int64 const &,unsigned __int64 const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 10        sub         rsp,10h
  000000000000000F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000014: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000019: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000001C: 48 39 08           cmp         qword ptr [rax],rcx
  000000000000001F: 73 0C              jae         000000000000002D
  0000000000000021: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000026: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  000000000000002B: EB 0A              jmp         0000000000000037
  000000000000002D: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000032: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000037: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000003C: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000040: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000044: 48 83 C4 10        add         rsp,10h
  0000000000000048: 5F                 pop         rdi
  0000000000000049: C3                 ret

??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z (class std::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class std::locale const &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 81 EC 90 00 00  sub         rsp,90h
                    00
  000000000000000D: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  0000000000000012: B9 1C 00 00 00     mov         ecx,1Ch
  0000000000000017: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000000000000001C: F3 AB              rep stos    dword ptr [rdi]
  000000000000001E: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000026: 33 D2              xor         edx,edx
  0000000000000028: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  000000000000002D: FF 15 00 00 00 00  call        qword ptr [__imp_??0_Lockit@std@@QEAA@H@Z]
  0000000000000033: 90                 nop
  0000000000000034: 48 8B 05 00 00 00  mov         rax,qword ptr [?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB]
                    00
  000000000000003B: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000040: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A]
                    00
  0000000000000047: E8 00 00 00 00     call        ??$_Get_index@$0A@@id@locale@std@@QEAA_KXZ
  000000000000004C: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000051: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  0000000000000056: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000005E: E8 00 00 00 00     call        ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
  0000000000000063: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000068: 48 83 7C 24 60 00  cmp         qword ptr [rsp+60h],0
  000000000000006E: 0F 85 98 00 00 00  jne         000000000000010C
  0000000000000074: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  000000000000007A: 74 0F              je          000000000000008B
  000000000000007C: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000081: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000086: E9 81 00 00 00     jmp         000000000000010C
  000000000000008B: 48 8B 94 24 A0 00  mov         rdx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000093: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  0000000000000098: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z]
  000000000000009E: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  00000000000000A2: 75 08              jne         00000000000000AC
  00000000000000A4: E8 00 00 00 00     call        ?_Throw_bad_cast@std@@YAXXZ
  00000000000000A9: 90                 nop
  00000000000000AA: EB 60              jmp         000000000000010C
  00000000000000AC: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000B1: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000B6: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  00000000000000BB: 48 8D 4C 24 78     lea         rcx,[rsp+78h]
  00000000000000C0: E8 00 00 00 00     call        ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
  00000000000000C5: 90                 nop
  00000000000000C6: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000000CB: E8 00 00 00 00     call        ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z
  00000000000000D0: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000D5: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000D8: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000000DD: FF 50 08           call        qword ptr [rax+8]
  00000000000000E0: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000E5: 48 89 05 00 00 00  mov         qword ptr [?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB],rax
                    00
  00000000000000EC: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000F1: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000F6: 48 8D 4C 24 78     lea         rcx,[rsp+78h]
  00000000000000FB: E8 00 00 00 00     call        ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
  0000000000000100: 90                 nop
  0000000000000101: 48 8D 4C 24 78     lea         rcx,[rsp+78h]
  0000000000000106: E8 00 00 00 00     call        ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
  000000000000010B: 90                 nop
  000000000000010C: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000111: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000119: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  000000000000011E: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  0000000000000124: 48 8B 84 24 88 00  mov         rax,qword ptr [rsp+88h]
                    00 00
  000000000000012C: 48 8B F8           mov         rdi,rax
  000000000000012F: 48 8B CC           mov         rcx,rsp
  0000000000000132: 48 8D 15 00 00 00  lea         rdx,[??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData]
                    00
  0000000000000139: E8 00 00 00 00     call        _RTC_CheckStackVars
  000000000000013E: 48 8B C7           mov         rax,rdi
  0000000000000141: 48 81 C4 90 00 00  add         rsp,90h
                    00
  0000000000000148: 5F                 pop         rdi
  0000000000000149: C3                 ret

?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA (int `class dtor$0::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class dtor$0::locale const &)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 24        lea         rcx,[rbp+24h]
  0000000000000017: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  000000000000001D: 48 83 C4 28        add         rsp,28h
  0000000000000021: 5F                 pop         rdi
  0000000000000022: 5D                 pop         rbp
  0000000000000023: C3                 ret

?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA (int `class dtor$1::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class dtor$1::locale const &)'::`1'::dtor$1):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 78        lea         rcx,[rbp+78h]
  0000000000000017: E8 00 00 00 00     call        ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z (public: __cdecl std::_Container_proxy_ptr12<class std::allocator<struct std::_Container_proxy> >::_Container_proxy_ptr12<class std::allocator<struct std::_Container_proxy> >(class std::allocator<struct std::_Container_proxy> &,struct std::_Container_base12 &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000019: E8 00 00 00 00     call        ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
  000000000000001E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000023: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000028: 48 89 48 08        mov         qword ptr [rax+8],rcx
  000000000000002C: BA 01 00 00 00     mov         edx,1
  0000000000000031: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000036: E8 00 00 00 00     call        ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
  000000000000003B: 48 8B C8           mov         rcx,rax
  000000000000003E: E8 00 00 00 00     call        ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
  0000000000000043: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000048: 48 89 01           mov         qword ptr [rcx],rax
  000000000000004B: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000050: E8 00 00 00 00     call        ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
  0000000000000055: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000005A: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  000000000000005F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000064: 48 8B 08           mov         rcx,qword ptr [rax]
  0000000000000067: E8 00 00 00 00     call        ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
  000000000000006C: 90                 nop
  000000000000006D: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000072: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000077: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000007A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000007D: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000082: 48 83 C4 30        add         rsp,30h
  0000000000000086: 5F                 pop         rdi
  0000000000000087: C3                 ret

??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ (public: __cdecl std::_String_val<struct std::_Simple_types<char> >::_String_val<struct std::_Simple_types<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??0_Container_base12@std@@QEAA@XZ
  0000000000000014: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000019: 48 83 C0 08        add         rax,8
  000000000000001D: 48 8B C8           mov         rcx,rax
  0000000000000020: E8 00 00 00 00     call        ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0000000000000025: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000002A: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  0000000000000032: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000037: 48 C7 40 20 00 00  mov         qword ptr [rax+20h],0
                    00 00
  000000000000003F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000044: 48 83 C4 20        add         rsp,20h
  0000000000000048: 5F                 pop         rdi
  0000000000000049: C3                 ret

??0?$allocator@D@std@@QEAA@XZ (public: __cdecl std::allocator<char>::allocator<char>(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::basic_filebuf<char,struct std::char_traits<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ]
  0000000000000015: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001A: 48 8D 0D 00 00 00  lea         rcx,[??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000021: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000024: 45 33 C0           xor         r8d,r8d
  0000000000000027: 33 D2              xor         edx,edx
  0000000000000029: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002E: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000033: 90                 nop
  0000000000000034: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000039: 48 83 C4 20        add         rsp,20h
  000000000000003D: 5F                 pop         rdi
  000000000000003E: C3                 ret

??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z (public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 30        sub         rsp,30h
  0000000000000019: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000001E: E8 00 00 00 00     call        ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
  0000000000000023: 8B 4C 24 60        mov         ecx,dword ptr [rsp+60h]
  0000000000000027: 89 4C 24 20        mov         dword ptr [rsp+20h],ecx
  000000000000002B: 44 8B 4C 24 58     mov         r9d,dword ptr [rsp+58h]
  0000000000000030: 44 8B 44 24 50     mov         r8d,dword ptr [rsp+50h]
  0000000000000035: 48 8B D0           mov         rdx,rax
  0000000000000038: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003D: E8 00 00 00 00     call        ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
  0000000000000042: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000047: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004A: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000004E: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000053: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  000000000000005A: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  000000000000005E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000063: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000066: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000006A: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000070: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000075: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000078: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  000000000000007C: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  0000000000000081: 89 44 0A FC        mov         dword ptr [rdx+rcx-4],eax
  0000000000000085: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000008A: 48 83 C4 30        add         rsp,30h
  000000000000008E: 5F                 pop         rdi
  000000000000008F: C3                 ret

??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z (public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 40        sub         rsp,40h
  0000000000000019: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000021: 83 7C 24 70 00     cmp         dword ptr [rsp+70h],0
  0000000000000026: 74 2F              je          0000000000000057
  0000000000000028: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000002D: 48 8D 0D 00 00 00  lea         rcx,[??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@]
                    00
  0000000000000034: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000037: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003C: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000042: 48 8B C8           mov         rcx,rax
  0000000000000045: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ]
  000000000000004B: 90                 nop
  000000000000004C: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000050: 83 C8 01           or          eax,1
  0000000000000053: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000057: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000005C: 48 83 C0 10        add         rax,10h
  0000000000000060: 48 8B C8           mov         rcx,rax
  0000000000000063: E8 00 00 00 00     call        ??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z
  0000000000000068: 45 33 C9           xor         r9d,r9d
  000000000000006B: 45 33 C0           xor         r8d,r8d
  000000000000006E: 48 8B D0           mov         rdx,rax
  0000000000000071: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000076: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  000000000000007C: 90                 nop
  000000000000007D: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000082: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000085: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000089: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000008E: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000095: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  0000000000000099: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000009E: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A1: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000A5: 48 2D B0 00 00 00  sub         rax,0B0h
  00000000000000AB: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000B0: 48 8B 09           mov         rcx,qword ptr [rcx]
  00000000000000B3: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  00000000000000B7: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  00000000000000BC: 89 44 0A FC        mov         dword ptr [rdx+rcx-4],eax
  00000000000000C0: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000C5: 48 83 C0 10        add         rax,10h
  00000000000000C9: 48 8B C8           mov         rcx,rax
  00000000000000CC: E8 00 00 00 00     call        ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00000000000000D1: 90                 nop
  00000000000000D2: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000D7: 48 83 C0 10        add         rax,10h
  00000000000000DB: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000E0: 8B 44 24 60        mov         eax,dword ptr [rsp+60h]
  00000000000000E4: 83 C8 01           or          eax,1
  00000000000000E7: 44 8B 4C 24 68     mov         r9d,dword ptr [rsp+68h]
  00000000000000EC: 44 8B C0           mov         r8d,eax
  00000000000000EF: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  00000000000000F4: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000F9: E8 00 00 00 00     call        ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
  00000000000000FE: 48 85 C0           test        rax,rax
  0000000000000101: 75 30              jne         0000000000000133
  0000000000000103: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000108: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000010B: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000010F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000114: 48 03 C8           add         rcx,rax
  0000000000000117: 48 8B C1           mov         rax,rcx
  000000000000011A: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000011F: 45 33 C0           xor         r8d,r8d
  0000000000000122: BA 02 00 00 00     mov         edx,2
  0000000000000127: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000012C: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000132: 90                 nop
  0000000000000133: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000138: 48 83 C4 40        add         rsp,40h
  000000000000013C: 5F                 pop         rdi
  000000000000013D: C3                 ret

?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 8B 45 20           mov         eax,dword ptr [rbp+20h]
  0000000000000016: 83 E0 01           and         eax,1
  0000000000000019: 85 C0              test        eax,eax
  000000000000001B: 74 15              je          0000000000000032
  000000000000001D: 83 65 20 FE        and         dword ptr [rbp+20h],0FFFFFFFEh
  0000000000000021: 48 8B 4D 50        mov         rcx,qword ptr [rbp+50h]
  0000000000000025: 48 81 C1 B0 00 00  add         rcx,0B0h
                    00
  000000000000002C: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000032: 48 83 C4 28        add         rsp,28h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: 5D                 pop         rbp
  0000000000000038: C3                 ret

?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$1):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8B 4D 50        mov         rcx,qword ptr [rbp+50h]
  0000000000000017: 48 83 C1 18        add         rcx,18h
  000000000000001B: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000021: 48 83 C4 28        add         rsp,28h
  0000000000000025: 5F                 pop         rdi
  0000000000000026: 5D                 pop         rbp
  0000000000000027: C3                 ret

?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$2):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8B 4D 50        mov         rcx,qword ptr [rbp+50h]
  0000000000000017: 48 83 C1 10        add         rcx,10h
  000000000000001B: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000020: 48 83 C4 28        add         rsp,28h
  0000000000000024: 5F                 pop         rdi
  0000000000000025: 5D                 pop         rbp
  0000000000000026: C3                 ret

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z (public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * const)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000019: 0F B6 54 24 20     movzx       edx,byte ptr [rsp+20h]
  000000000000001E: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000023: E8 00 00 00 00     call        ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
  0000000000000028: 90                 nop
  0000000000000029: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000002E: E8 00 00 00 00     call        ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
  0000000000000033: 48 8B C8           mov         rcx,rax
  0000000000000036: E8 00 00 00 00     call        ??$_Convert_size@_K_K@std@@YA_K_K@Z
  000000000000003B: 4C 8B C0           mov         r8,rax
  000000000000003E: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000043: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000048: E8 00 00 00 00     call        ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
  000000000000004D: 90                 nop
  000000000000004E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000053: 48 83 C4 30        add         rsp,30h
  0000000000000057: 5F                 pop         rdi
  0000000000000058: C3                 ret

?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA (int `public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * const)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8B 4D 40        mov         rcx,qword ptr [rbp+40h]
  0000000000000017: E8 00 00 00 00     call        ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ (public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000014: 0F B6 54 24 20     movzx       edx,byte ptr [rsp+20h]
  0000000000000019: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000001E: E8 00 00 00 00     call        ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
  0000000000000023: 90                 nop
  0000000000000024: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000029: E8 00 00 00 00     call        ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000002E: 90                 nop
  000000000000002F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000034: 48 83 C4 30        add         rsp,30h
  0000000000000038: 5F                 pop         rdi
  0000000000000039: C3                 ret

??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z (public: __cdecl std::fpos<struct _Mbstatet>::fpos<struct _Mbstatet>(struct _Mbstatet,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000015: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000001A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001D: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000022: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  000000000000002A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000002F: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000034: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  0000000000000038: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000003D: 5F                 pop         rdi
  000000000000003E: C3                 ret

??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z (public: __cdecl std::fpos<struct _Mbstatet>::fpos<struct _Mbstatet>(__int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000015: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000018: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000001D: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  0000000000000025: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000002A: 48 83 C0 10        add         rax,10h
  000000000000002E: 48 8B F8           mov         rdi,rax
  0000000000000031: 33 C0              xor         eax,eax
  0000000000000033: B9 08 00 00 00     mov         ecx,8
  0000000000000038: F3 AA              rep stos    byte ptr [rdi]
  000000000000003A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000003F: 5F                 pop         rdi
  0000000000000040: C3                 ret

??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z (public: __cdecl std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > >::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > >(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000010: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000013: 48 8B 4C 24 10     mov         rcx,qword ptr [rsp+10h]
  0000000000000018: 48 89 01           mov         qword ptr [rcx],rax
  000000000000001B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000020: 5F                 pop         rdi
  0000000000000021: C3                 ret

??0_Basic_container_proxy_ptr12@std@@IEAA@XZ (protected: __cdecl std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  0000000000000012: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ (public: __cdecl std::_String_val<struct std::_Simple_types<char> >::_Bxty::_Bxty(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8B 7C 24 10     mov         rdi,qword ptr [rsp+10h]
  0000000000000010: 33 C0              xor         eax,eax
  0000000000000012: B9 10 00 00 00     mov         ecx,10h
  0000000000000017: F3 AA              rep stos    byte ptr [rdi]
  0000000000000019: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000001E: 5F                 pop         rdi
  000000000000001F: C3                 ret

??0_Container_base12@std@@QEAA@XZ (public: __cdecl std::_Container_base12::_Container_base12(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  0000000000000012: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z (public: __cdecl std::_Container_proxy::_Container_proxy(struct std::_Container_base12 *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000015: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000018: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000001D: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  0000000000000025: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000002A: 5F                 pop         rdi
  000000000000002B: C3                 ret

??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_istream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000021: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000024: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000029: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000002E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000031: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000035: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000003A: 48 03 C8           add         rcx,rax
  000000000000003D: 48 8B C1           mov         rax,rcx
  0000000000000040: 48 8B C8           mov         rcx,rax
  0000000000000043: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000049: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004E: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000054: 74 11              je          0000000000000067
  0000000000000056: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000063: FF 50 08           call        qword ptr [rax+8]
  0000000000000066: 90                 nop
  0000000000000067: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006C: 48 83 C4 30        add         rsp,30h
  0000000000000070: 5F                 pop         rdi
  0000000000000071: C3                 ret

??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000021: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000024: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000029: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000002E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000031: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000035: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000003A: 48 03 C8           add         rcx,rax
  000000000000003D: 48 8B C1           mov         rax,rcx
  0000000000000040: 48 8B C8           mov         rcx,rax
  0000000000000043: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000049: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004E: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000054: 74 11              je          0000000000000067
  0000000000000056: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000063: FF 50 08           call        qword ptr [rax+8]
  0000000000000066: 90                 nop
  0000000000000067: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006C: 48 83 C4 30        add         rsp,30h
  0000000000000070: 5F                 pop         rdi
  0000000000000071: C3                 ret

??0bad_alloc@std@@AEAA@QEBD@Z (private: __cdecl std::bad_alloc::bad_alloc(char const * const)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000015: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000001A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001F: E8 00 00 00 00     call        ??0exception@std@@QEAA@QEBDH@Z
  0000000000000024: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000029: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_alloc@std@@6B@]
                    00
  0000000000000030: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??0bad_alloc@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: E8 00 00 00 00     call        ??0exception@std@@QEAA@AEBV01@@Z
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_alloc@std@@6B@]
                    00
  000000000000002A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 83 C4 20        add         rsp,20h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: C3                 ret

??0bad_array_new_length@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_array_new_length::bad_array_new_length(class std::bad_array_new_length const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: E8 00 00 00 00     call        ??0bad_alloc@std@@QEAA@AEBV01@@Z
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_array_new_length@std@@6B@]
                    00
  000000000000002A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 83 C4 20        add         rsp,20h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: C3                 ret

??0bad_array_new_length@std@@QEAA@XZ (public: __cdecl std::bad_array_new_length::bad_array_new_length(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8D 15 00 00 00  lea         rdx,[??_C@_0BF@KINCDENJ@bad?5array?5new?5length@]
                    00
  0000000000000011: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000016: E8 00 00 00 00     call        ??0bad_alloc@std@@AEAA@QEBD@Z
  000000000000001B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000020: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_array_new_length@std@@6B@]
                    00
  0000000000000027: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000002F: 48 83 C4 20        add         rsp,20h
  0000000000000033: 5F                 pop         rdi
  0000000000000034: C3                 ret

??0bad_cast@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_cast::bad_cast(class std::bad_cast const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: E8 00 00 00 00     call        ??0exception@std@@QEAA@AEBV01@@Z
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_cast@std@@6B@]
                    00
  000000000000002A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 83 C4 20        add         rsp,20h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: C3                 ret

??0bad_cast@std@@QEAA@XZ (public: __cdecl std::bad_cast::bad_cast(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000010: 48 8D 15 00 00 00  lea         rdx,[??_C@_08EPJLHIJG@bad?5cast@]
                    00
  0000000000000017: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001C: E8 00 00 00 00     call        ??0exception@std@@QEAA@QEBDH@Z
  0000000000000021: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000026: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_cast@std@@6B@]
                    00
  000000000000002D: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000030: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000035: 48 83 C4 20        add         rsp,20h
  0000000000000039: 5F                 pop         rdi
  000000000000003A: C3                 ret

??0exception@std@@QEAA@AEBV01@@Z (public: __cdecl std::exception::exception(class std::exception const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000014: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  000000000000001B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 83 C0 08        add         rax,8
  0000000000000027: 48 8B F8           mov         rdi,rax
  000000000000002A: 33 C0              xor         eax,eax
  000000000000002C: B9 10 00 00 00     mov         ecx,10h
  0000000000000031: F3 AA              rep stos    byte ptr [rdi]
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C0 08        add         rax,8
  000000000000003C: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000041: 48 83 C1 08        add         rcx,8
  0000000000000045: 48 8B D0           mov         rdx,rax
  0000000000000048: E8 00 00 00 00     call        __std_exception_copy
  000000000000004D: 90                 nop
  000000000000004E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000053: 48 83 C4 20        add         rsp,20h
  0000000000000057: 5F                 pop         rdi
  0000000000000058: C3                 ret

??0exception@std@@QEAA@QEBDH@Z (public: __cdecl std::exception::exception(char const * const,int)):
  0000000000000000: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000015: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  000000000000001C: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000024: 48 83 C0 08        add         rax,8
  0000000000000028: 48 8B F8           mov         rdi,rax
  000000000000002B: 33 C0              xor         eax,eax
  000000000000002D: B9 10 00 00 00     mov         ecx,10h
  0000000000000032: F3 AA              rep stos    byte ptr [rdi]
  0000000000000034: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000039: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  000000000000003E: 48 89 48 08        mov         qword ptr [rax+8],rcx
  0000000000000042: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000047: 5F                 pop         rdi
  0000000000000048: C3                 ret

??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::sentry::sentry(class std::basic_istream<char,struct std::char_traits<char> > &,bool)):
  0000000000000000: 44 88 44 24 18     mov         byte ptr [rsp+18h],r8b
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000019: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001E: E8 00 00 00 00     call        ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  0000000000000023: 90                 nop
  0000000000000024: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000029: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002C: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000031: 0F B6 54 24 50     movzx       edx,byte ptr [rsp+50h]
  0000000000000036: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000003B: FF 15 00 00 00 00  call        qword ptr [__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z]
  0000000000000041: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000046: 88 41 08           mov         byte ptr [rcx+8],al
  0000000000000049: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004E: 48 83 C4 30        add         rsp,30h
  0000000000000052: 5F                 pop         rdi
  0000000000000053: C3                 ret

?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA (int `public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::sentry::sentry(class basic_istream<char,struct std::char_traits<char> >::sentry &,bool)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8B 4D 40        mov         rcx,qword ptr [rbp+40h]
  0000000000000017: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::sentry(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000014: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000019: E8 00 00 00 00     call        ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  000000000000001E: 90                 nop
  000000000000001F: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000024: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000027: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000002B: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000030: 48 03 C8           add         rcx,rax
  0000000000000033: 48 8B C1           mov         rax,rcx
  0000000000000036: 48 8B C8           mov         rcx,rax
  0000000000000039: FF 15 00 00 00 00  call        qword ptr [__imp_?good@ios_base@std@@QEBA_NXZ]
  000000000000003F: 0F B6 C0           movzx       eax,al
  0000000000000042: 85 C0              test        eax,eax
  0000000000000044: 75 0B              jne         0000000000000051
  0000000000000046: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004B: C6 40 08 00        mov         byte ptr [rax+8],0
  000000000000004F: EB 7C              jmp         00000000000000CD
  0000000000000051: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000056: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000059: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000005D: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000062: 48 03 C8           add         rcx,rax
  0000000000000065: 48 8B C1           mov         rax,rcx
  0000000000000068: 48 8B C8           mov         rcx,rax
  000000000000006B: FF 15 00 00 00 00  call        qword ptr [__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ]
  0000000000000071: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000076: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  000000000000007C: 74 11              je          000000000000008F
  000000000000007E: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000083: E8 00 00 00 00     call        ??$addressof@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
  0000000000000088: 48 39 44 24 20     cmp         qword ptr [rsp+20h],rax
  000000000000008D: 75 0B              jne         000000000000009A
  000000000000008F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000094: C6 40 08 01        mov         byte ptr [rax+8],1
  0000000000000098: EB 33              jmp         00000000000000CD
  000000000000009A: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000009F: FF 15 00 00 00 00  call        qword ptr [__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ]
  00000000000000A5: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000AA: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000AD: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000B1: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000B6: 48 03 C8           add         rcx,rax
  00000000000000B9: 48 8B C1           mov         rax,rcx
  00000000000000BC: 48 8B C8           mov         rcx,rax
  00000000000000BF: FF 15 00 00 00 00  call        qword ptr [__imp_?good@ios_base@std@@QEBA_NXZ]
  00000000000000C5: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000CA: 88 41 08           mov         byte ptr [rcx+8],al
  00000000000000CD: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000D2: 48 83 C4 30        add         rsp,30h
  00000000000000D6: 5F                 pop         rdi
  00000000000000D7: C3                 ret

?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA (int `public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::sentry(class basic_ostream<char,struct std::char_traits<char> >::sentry &)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8B 4D 40        mov         rcx,qword ptr [rbp+40h]
  0000000000000017: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ (public: __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::~_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0000000000000017: 90                 nop
  0000000000000018: 48 83 C4 20        add         rsp,20h
  000000000000001C: 5F                 pop         rdi
  000000000000001D: C3                 ret

??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ (public: __cdecl std::_Container_proxy_ptr12<class std::allocator<struct std::_Container_proxy> >::~_Container_proxy_ptr12<class std::allocator<struct std::_Container_proxy> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000013: 74 17              je          000000000000002C
  0000000000000015: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001A: 48 8B 10           mov         rdx,qword ptr [rax]
  000000000000001D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000022: 48 8B 48 08        mov         rcx,qword ptr [rax+8]
  0000000000000026: E8 00 00 00 00     call        ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
  000000000000002B: 90                 nop
  000000000000002C: 48 83 C4 20        add         rsp,20h
  0000000000000030: 5F                 pop         rdi
  0000000000000031: C3                 ret

??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ (public: __cdecl std::_String_val<struct std::_Simple_types<char> >::~_String_val<struct std::_Simple_types<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 83 C0 08        add         rax,8
  0000000000000013: 48 8B C8           mov         rcx,rax
  0000000000000016: E8 00 00 00 00     call        ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  000000000000001B: 90                 nop
  000000000000001C: 48 83 C4 20        add         rsp,20h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: C3                 ret

??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ (public: virtual __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::~basic_filebuf<char,struct std::char_traits<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8D 0D 00 00 00  lea         rcx,[??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000016: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000019: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000026: 74 0B              je          0000000000000033
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 0F B6 40 7C        movzx       eax,byte ptr [rax+7Ch]
  000000000000003C: 85 C0              test        eax,eax
  000000000000003E: 74 0B              je          000000000000004B
  0000000000000040: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000045: E8 00 00 00 00     call        ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
  000000000000004A: 90                 nop
  000000000000004B: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000050: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000056: 90                 nop
  0000000000000057: 48 83 C4 20        add         rsp,20h
  000000000000005B: 5F                 pop         rdi
  000000000000005C: C3                 ret

??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ (public: virtual __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::~basic_ifstream<char,struct std::char_traits<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B 80 50 FF FF  mov         rax,qword ptr [rax-0B0h]
                    FF
  0000000000000016: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001F: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000026: 48 89 94 01 50 FF  mov         qword ptr [rcx+rax-0B0h],rdx
                    FF FF
  000000000000002E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000033: 48 8B 80 50 FF FF  mov         rax,qword ptr [rax-0B0h]
                    FF
  000000000000003A: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000003E: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000044: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000049: 48 8B 89 50 FF FF  mov         rcx,qword ptr [rcx-0B0h]
                    FF
  0000000000000050: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  0000000000000054: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  0000000000000059: 89 84 0A 4C FF FF  mov         dword ptr [rdx+rcx-0B4h],eax
                    FF
  0000000000000060: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000065: 48 2D A0 00 00 00  sub         rax,0A0h
  000000000000006B: 48 8B C8           mov         rcx,rax
  000000000000006E: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000073: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000078: 48 2D 98 00 00 00  sub         rax,98h
  000000000000007E: 48 8B C8           mov         rcx,rax
  0000000000000081: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000087: 90                 nop
  0000000000000088: 48 83 C4 20        add         rsp,20h
  000000000000008C: 5F                 pop         rdi
  000000000000008D: C3                 ret

??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ (public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 50        sub         rsp,50h
  000000000000000A: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000000F: B9 0C 00 00 00     mov         ecx,0Ch
  0000000000000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000019: F3 AB              rep stos    dword ptr [rdi]
  000000000000001B: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000020: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000025: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000002A: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000002F: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
  0000000000000034: 48 8B D0           mov         rdx,rax
  0000000000000037: 48 8D 4C 24 34     lea         rcx,[rsp+34h]
  000000000000003C: E8 00 00 00 00     call        ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
  0000000000000041: 48 8D 44 24 34     lea         rax,[rsp+34h]
  0000000000000046: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004B: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000050: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000053: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000058: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000005D: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  0000000000000064: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000069: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000006E: E8 00 00 00 00     call        ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
  0000000000000073: 90                 nop
  0000000000000074: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000079: 48 8B C8           mov         rcx,rax
  000000000000007C: E8 00 00 00 00     call        ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0000000000000081: 90                 nop
  0000000000000082: 48 8B CC           mov         rcx,rsp
  0000000000000085: 48 8D 15 00 00 00  lea         rdx,[??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData]
                    00
  000000000000008C: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000091: 48 83 C4 50        add         rsp,50h
  0000000000000095: 5F                 pop         rdi
  0000000000000096: C3                 ret

??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ (public: __cdecl std::unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >::~unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000013: 74 2F              je          0000000000000044
  0000000000000015: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000001A: 48 8B C8           mov         rcx,rax
  000000000000001D: E8 00 00 00 00     call        ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
  0000000000000022: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000027: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000002C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002F: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000034: 48 8B 54 24 28     mov         rdx,qword ptr [rsp+28h]
  0000000000000039: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000003E: E8 00 00 00 00     call        ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
  0000000000000043: 90                 nop
  0000000000000044: 48 83 C4 30        add         rsp,30h
  0000000000000048: 5F                 pop         rdi
  0000000000000049: C3                 ret

??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ (public: __cdecl std::_String_val<struct std::_Simple_types<char> >::_Bxty::~_Bxty(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 5F                 pop         rdi
  0000000000000007: C3                 ret

??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000012: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000017: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000001C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000023: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000028: 48 03 C8           add         rcx,rax
  000000000000002B: 48 8B C1           mov         rax,rcx
  000000000000002E: 48 8B C8           mov         rcx,rax
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000042: 74 11              je          0000000000000055
  0000000000000044: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000049: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004C: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000051: FF 50 10           call        qword ptr [rax+10h]
  0000000000000054: 90                 nop
  0000000000000055: 48 83 C4 30        add         rsp,30h
  0000000000000059: 5F                 pop         rdi
  000000000000005A: C3                 ret

??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000012: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000017: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000001C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000023: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000028: 48 03 C8           add         rcx,rax
  000000000000002B: 48 8B C1           mov         rax,rcx
  000000000000002E: 48 8B C8           mov         rcx,rax
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000042: 74 11              je          0000000000000055
  0000000000000044: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000049: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004C: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000051: FF 50 10           call        qword ptr [rax+10h]
  0000000000000054: 90                 nop
  0000000000000055: 48 83 C4 30        add         rsp,30h
  0000000000000059: 5F                 pop         rdi
  000000000000005A: C3                 ret

??1bad_alloc@std@@UEAA@XZ (public: virtual __cdecl std::bad_alloc::~bad_alloc(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??1exception@std@@UEAA@XZ
  0000000000000014: 90                 nop
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5F                 pop         rdi
  000000000000001A: C3                 ret

??1bad_array_new_length@std@@UEAA@XZ (public: virtual __cdecl std::bad_array_new_length::~bad_array_new_length(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??1bad_alloc@std@@UEAA@XZ
  0000000000000014: 90                 nop
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5F                 pop         rdi
  000000000000001A: C3                 ret

??1bad_cast@std@@UEAA@XZ (public: virtual __cdecl std::bad_cast::~bad_cast(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??1exception@std@@UEAA@XZ
  0000000000000014: 90                 nop
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5F                 pop         rdi
  000000000000001A: C3                 ret

??1exception@std@@UEAA@XZ (public: virtual __cdecl std::exception::~exception(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000016: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000019: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001E: 48 83 C0 08        add         rax,8
  0000000000000022: 48 8B C8           mov         rcx,rax
  0000000000000025: E8 00 00 00 00     call        __std_exception_destroy
  000000000000002A: 90                 nop
  000000000000002B: 48 83 C4 20        add         rsp,20h
  000000000000002F: 5F                 pop         rdi
  0000000000000030: C3                 ret

??1locale@std@@QEAA@XZ (public: __cdecl std::locale::~locale(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000000F: 48 83 78 08 00     cmp         qword ptr [rax+8],0
  0000000000000014: 74 53              je          0000000000000069
  0000000000000016: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000001B: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000001F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000024: 48 8B 49 08        mov         rcx,qword ptr [rcx+8]
  0000000000000028: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002B: FF 50 10           call        qword ptr [rax+10h]
  000000000000002E: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000033: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000039: 74 25              je          0000000000000060
  000000000000003B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000040: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000043: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000046: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000004B: BA 01 00 00 00     mov         edx,1
  0000000000000050: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000055: FF 54 24 28        call        qword ptr [rsp+28h]
  0000000000000059: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000005E: EB 09              jmp         0000000000000069
  0000000000000060: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000069: 48 83 C4 40        add         rsp,40h
  000000000000006D: 5F                 pop         rdi
  000000000000006E: C3                 ret

??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000014: 90                 nop
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5F                 pop         rdi
  000000000000001A: C3                 ret

??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: E8 00 00 00 00     call        ?uncaught_exceptions@std@@YAHXZ
  000000000000000F: 85 C0              test        eax,eax
  0000000000000011: 75 07              jne         000000000000001A
  0000000000000013: C6 44 24 21 01     mov         byte ptr [rsp+21h],1
  0000000000000018: EB 05              jmp         000000000000001F
  000000000000001A: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  000000000000001F: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  0000000000000024: 88 44 24 20        mov         byte ptr [rsp+20h],al
  0000000000000028: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000002D: 85 C0              test        eax,eax
  000000000000002F: 74 0F              je          0000000000000040
  0000000000000031: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000036: 48 8B 08           mov         rcx,qword ptr [rax]
  0000000000000039: FF 15 00 00 00 00  call        qword ptr [__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ]
  000000000000003F: 90                 nop
  0000000000000040: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000045: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  000000000000004A: 90                 nop
  000000000000004B: 48 83 C4 30        add         rsp,30h
  000000000000004F: 5F                 pop         rdi
  0000000000000050: C3                 ret

??2@YAPEAX_KPEAX@Z (void * __cdecl operator new(unsigned __int64,void *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000010: 5F                 pop         rdi
  0000000000000011: C3                 ret

??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z (public: char & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[](unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000018: 48 39 44 24 48     cmp         qword ptr [rsp+48h],rax
  000000000000001D: 77 02              ja          0000000000000021
  000000000000001F: EB 6C              jmp         000000000000008D
  0000000000000021: 48 8D 05 00 00 00  lea         rax,[??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@]
                    00
  0000000000000028: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000002D: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  0000000000000034: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000039: 45 33 C9           xor         r9d,r9d
  000000000000003C: 41 B8 C5 08 00 00  mov         r8d,8C5h
  0000000000000042: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@FJCHPGFH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  0000000000000049: B9 02 00 00 00     mov         ecx,2
  000000000000004E: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  0000000000000054: 83 F8 01           cmp         eax,1
  0000000000000057: 75 03              jne         000000000000005C
  0000000000000059: CC                 int         3
  000000000000005A: 33 C0              xor         eax,eax
  000000000000005C: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000065: 41 B9 C5 08 00 00  mov         r9d,8C5h
  000000000000006B: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@EFGFHKDD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  0000000000000072: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  0000000000000079: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@]
                    00
  0000000000000080: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  0000000000000086: 90                 nop
  0000000000000087: 33 C0              xor         eax,eax
  0000000000000089: 85 C0              test        eax,eax
  000000000000008B: 75 94              jne         0000000000000021
  000000000000008D: 33 C0              xor         eax,eax
  000000000000008F: 85 C0              test        eax,eax
  0000000000000091: 0F 85 78 FF FF FF  jne         000000000000000F
  0000000000000097: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000009C: 48 8B C8           mov         rcx,rax
  000000000000009F: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  00000000000000A4: 48 03 44 24 48     add         rax,qword ptr [rsp+48h]
  00000000000000A9: 48 83 C4 30        add         rsp,30h
  00000000000000AD: 5F                 pop         rdi
  00000000000000AE: C3                 ret

??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ (public: __cdecl std::fpos<struct _Mbstatet>::operator __int64(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000000E: 48 8B 4C 24 10     mov         rcx,qword ptr [rsp+10h]
  0000000000000013: 48 03 41 08        add         rax,qword ptr [rcx+8]
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::sentry::operator bool(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 0F B6 40 08        movzx       eax,byte ptr [rax+8]
  000000000000000F: 5F                 pop         rdi
  0000000000000010: C3                 ret

??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::operator bool(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 0F B6 40 08        movzx       eax,byte ptr [rax+8]
  000000000000000F: 5F                 pop         rdi
  0000000000000010: C3                 ret

??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z (public: __cdecl `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>::operator()(char * const,char const * const,unsigned __int64,char)const ):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 30        sub         rsp,30h
  0000000000000019: 4C 8B 44 24 58     mov         r8,qword ptr [rsp+58h]
  000000000000001E: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  0000000000000023: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000028: E8 00 00 00 00     call        ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  000000000000002D: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000032: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000037: 48 03 C8           add         rcx,rax
  000000000000003A: 48 8B C1           mov         rax,rcx
  000000000000003D: 48 8D 54 24 60     lea         rdx,[rsp+60h]
  0000000000000042: 48 8B C8           mov         rcx,rax
  0000000000000045: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  000000000000004A: 90                 nop
  000000000000004B: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000050: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000055: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000005A: 48 8D 44 08 01     lea         rax,[rax+rcx+1]
  000000000000005F: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000064: 48 8B C8           mov         rcx,rax
  0000000000000067: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  000000000000006C: 90                 nop
  000000000000006D: 48 83 C4 30        add         rsp,30h
  0000000000000071: 5F                 pop         rdi
  0000000000000072: C3                 ret

??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z (public: void __cdecl std::default_delete<class std::_Facet_base>::operator()(class std::_Facet_base *)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 40        sub         rsp,40h
  000000000000000F: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000014: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000019: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  000000000000001F: 74 25              je          0000000000000046
  0000000000000021: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000026: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000029: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000031: BA 01 00 00 00     mov         edx,1
  0000000000000036: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000003B: FF 54 24 28        call        qword ptr [rsp+28h]
  000000000000003F: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000044: EB 09              jmp         000000000000004F
  0000000000000046: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  000000000000004F: 48 83 C4 40        add         rsp,40h
  0000000000000053: 5F                 pop         rdi
  0000000000000054: C3                 ret

??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator+=(char)):
  0000000000000000: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 0F B6 54 24 38     movzx       edx,byte ptr [rsp+38h]
  0000000000000013: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000018: E8 00 00 00 00     call        ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
  000000000000001D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000022: 48 83 C4 20        add         rsp,20h
  0000000000000026: 5F                 pop         rdi
  0000000000000027: C3                 ret

??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ (public: void __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000015: 48 8B C8           mov         rcx,rax
  0000000000000018: E8 00 00 00 00     call        ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000000000000001D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000022: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000028: 48 8B C8           mov         rcx,rax
  000000000000002B: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000031: 90                 nop
  0000000000000032: 48 83 C4 20        add         rsp,20h
  0000000000000036: 5F                 pop         rdi
  0000000000000037: C3                 ret

??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ([thunk]:public: virtual void * __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`vector deleting destructor'`vtordisp{4294967292,0}' (unsigned int)):
  0000000000000000: 48 63 41 FC        movsxd      rax,dword ptr [rcx-4]
  0000000000000004: 48 2B C8           sub         rcx,rax
  0000000000000007: E9 00 00 00 00     jmp         ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z

??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000018: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001C: 83 E0 01           and         eax,1
  000000000000001F: 85 C0              test        eax,eax
  0000000000000021: 74 10              je          0000000000000033
  0000000000000023: BA 98 00 00 00     mov         edx,98h
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000013: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000019: 48 8B C8           mov         rcx,rax
  000000000000001C: E8 00 00 00 00     call        ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0000000000000021: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  0000000000000025: 83 E0 01           and         eax,1
  0000000000000028: 85 C0              test        eax,eax
  000000000000002A: 74 19              je          0000000000000045
  000000000000002C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000031: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000037: BA 10 01 00 00     mov         edx,110h
  000000000000003C: 48 8B C8           mov         rcx,rax
  000000000000003F: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000044: 90                 nop
  0000000000000045: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004A: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000050: 48 83 C4 20        add         rsp,20h
  0000000000000054: 5F                 pop         rdi
  0000000000000055: C3                 ret

??_Gbad_alloc@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??1bad_alloc@std@@UEAA@XZ
  0000000000000018: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001C: 83 E0 01           and         eax,1
  000000000000001F: 85 C0              test        eax,eax
  0000000000000021: 74 10              je          0000000000000033
  0000000000000023: BA 18 00 00 00     mov         edx,18h
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??_Gbad_array_new_length@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_array_new_length::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??1bad_array_new_length@std@@UEAA@XZ
  0000000000000018: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001C: 83 E0 01           and         eax,1
  000000000000001F: 85 C0              test        eax,eax
  0000000000000021: 74 10              je          0000000000000033
  0000000000000023: BA 18 00 00 00     mov         edx,18h
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??_Gbad_cast@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_cast::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??1bad_cast@std@@UEAA@XZ
  0000000000000018: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001C: 83 E0 01           and         eax,1
  000000000000001F: 85 C0              test        eax,eax
  0000000000000021: 74 10              je          0000000000000033
  0000000000000023: BA 18 00 00 00     mov         edx,18h
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

??_Gexception@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::exception::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 20        sub         rsp,20h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ??1exception@std@@UEAA@XZ
  0000000000000018: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001C: 83 E0 01           and         eax,1
  000000000000001F: 85 C0              test        eax,eax
  0000000000000021: 74 10              je          0000000000000033
  0000000000000023: BA 18 00 00 00     mov         edx,18h
  0000000000000028: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002D: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000032: 90                 nop
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C4 20        add         rsp,20h
  000000000000003C: 5F                 pop         rdi
  000000000000003D: C3                 ret

?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ (public: void __cdecl std::_String_val<struct std::_Simple_types<char> >::_Activate_SSO_buffer(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  000000000000000F: 0F B6 C0           movzx       eax,al
  0000000000000012: 85 C0              test        eax,eax
  0000000000000014: 74 36              je          000000000000004C
  0000000000000016: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000001F: EB 0D              jmp         000000000000002E
  0000000000000021: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000026: 48 FF C0           inc         rax
  0000000000000029: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002E: 48 83 7C 24 20 10  cmp         qword ptr [rsp+20h],10h
  0000000000000034: 73 16              jae         000000000000004C
  0000000000000036: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000003B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000040: 48 03 C8           add         rcx,rax
  0000000000000043: 48 8B C1           mov         rax,rcx
  0000000000000046: C6 40 08 00        mov         byte ptr [rax+8],0
  000000000000004A: EB D5              jmp         0000000000000021
  000000000000004C: 48 83 C4 30        add         rsp,30h
  0000000000000050: 5F                 pop         rdi
  0000000000000051: C3                 ret

?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z (void __cdecl std::_Adjust_manually_vector_aligned(void * &,unsigned __int64 &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 50        sub         rsp,50h
  000000000000000F: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 83 C0 2F        add         rax,2Fh
  000000000000001B: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  0000000000000020: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000023: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000028: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002B: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000030: B8 08 00 00 00     mov         eax,8
  0000000000000035: 48 6B C0 FF        imul        rax,rax,0FFFFFFFFFFFFFFFFh
  0000000000000039: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003E: 48 8B 04 01        mov         rax,qword ptr [rcx+rax]
  0000000000000042: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000047: B8 08 00 00 00     mov         eax,8
  000000000000004C: 48 6B C0 FE        imul        rax,rax,0FFFFFFFFFFFFFFFEh
  0000000000000050: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000055: 48 BA FA FA FA FA  mov         rdx,0FAFAFAFAFAFAFAFAh
                    FA FA FA FA
  000000000000005F: 48 39 14 01        cmp         qword ptr [rcx+rax],rdx
  0000000000000063: 75 02              jne         0000000000000067
  0000000000000065: EB 6C              jmp         00000000000000D3
  0000000000000067: 48 8D 05 00 00 00  lea         rax,[??_C@_0BB@FCMFBGOM@invalid?5argument@]
                    00
  000000000000006E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000073: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  000000000000007A: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000007F: 45 33 C9           xor         r9d,r9d
  0000000000000082: 41 B8 D1 00 00 00  mov         r8d,0D1h
  0000000000000088: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@KAOKPKLO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  000000000000008F: B9 02 00 00 00     mov         ecx,2
  0000000000000094: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  000000000000009A: 83 F8 01           cmp         eax,1
  000000000000009D: 75 03              jne         00000000000000A2
  000000000000009F: CC                 int         3
  00000000000000A0: 33 C0              xor         eax,eax
  00000000000000A2: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  00000000000000AB: 41 B9 D1 00 00 00  mov         r9d,0D1h
  00000000000000B1: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@KLOJIDOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  00000000000000B8: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  00000000000000BF: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@]
                    00
  00000000000000C6: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  00000000000000CC: 90                 nop
  00000000000000CD: 33 C0              xor         eax,eax
  00000000000000CF: 85 C0              test        eax,eax
  00000000000000D1: 75 94              jne         0000000000000067
  00000000000000D3: 33 C0              xor         eax,eax
  00000000000000D5: 85 C0              test        eax,eax
  00000000000000D7: 0F 85 6A FF FF FF  jne         0000000000000047
  00000000000000DD: 48 C7 44 24 40 10  mov         qword ptr [rsp+40h],10h
                    00 00 00
  00000000000000E6: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000EB: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000F0: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000F3: 48 2B C1           sub         rax,rcx
  00000000000000F6: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000FB: 48 83 7C 24 48 10  cmp         qword ptr [rsp+48h],10h
  0000000000000101: 72 0A              jb          000000000000010D
  0000000000000103: 48 83 7C 24 48 2F  cmp         qword ptr [rsp+48h],2Fh
  0000000000000109: 77 02              ja          000000000000010D
  000000000000010B: EB 6C              jmp         0000000000000179
  000000000000010D: 48 8D 05 00 00 00  lea         rax,[??_C@_0BB@FCMFBGOM@invalid?5argument@]
                    00
  0000000000000114: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000119: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  0000000000000120: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000125: 45 33 C9           xor         r9d,r9d
  0000000000000128: 41 B8 DB 00 00 00  mov         r8d,0DBh
  000000000000012E: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@KAOKPKLO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  0000000000000135: B9 02 00 00 00     mov         ecx,2
  000000000000013A: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  0000000000000140: 83 F8 01           cmp         eax,1
  0000000000000143: 75 03              jne         0000000000000148
  0000000000000145: CC                 int         3
  0000000000000146: 33 C0              xor         eax,eax
  0000000000000148: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000151: 41 B9 DB 00 00 00  mov         r9d,0DBh
  0000000000000157: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@KLOJIDOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  000000000000015E: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  0000000000000165: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@]
                    00
  000000000000016C: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  0000000000000172: 90                 nop
  0000000000000173: 33 C0              xor         eax,eax
  0000000000000175: 85 C0              test        eax,eax
  0000000000000177: 75 94              jne         000000000000010D
  0000000000000179: 33 C0              xor         eax,eax
  000000000000017B: 85 C0              test        eax,eax
  000000000000017D: 0F 85 78 FF FF FF  jne         00000000000000FB
  0000000000000183: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000188: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000018D: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000190: 48 83 C4 50        add         rsp,50h
  0000000000000194: 5F                 pop         rdi
  0000000000000195: C3                 ret

?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z (public: static void * __cdecl std::_Default_allocate_traits::_Allocate(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: E8 00 00 00 00     call        ??2@YAPEAX_K@Z
  0000000000000014: 48 83 C4 20        add         rsp,20h
  0000000000000018: 5F                 pop         rdi
  0000000000000019: C3                 ret

?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z (private: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Calculate_growth(unsigned __int64)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000014: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000019: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000023: 48 8B 40 20        mov         rax,qword ptr [rax+20h]
  0000000000000027: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000002C: 4C 8B 44 24 20     mov         r8,qword ptr [rsp+20h]
  0000000000000031: 48 8B 54 24 28     mov         rdx,qword ptr [rsp+28h]
  0000000000000036: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000003B: E8 00 00 00 00     call        ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
  0000000000000040: 48 83 C4 30        add         rsp,30h
  0000000000000044: 5F                 pop         rdi
  0000000000000045: C3                 ret

?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z (private: static unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Calculate_growth(unsigned __int64,unsigned __int64,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 40        sub         rsp,40h
  0000000000000014: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  0000000000000019: B9 08 00 00 00     mov         ecx,8
  000000000000001E: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000023: F3 AB              rep stos    dword ptr [rdi]
  0000000000000025: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000002A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000002F: 48 83 C8 0F        or          rax,0Fh
  0000000000000033: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000038: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000003D: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  0000000000000042: 76 07              jbe         000000000000004B
  0000000000000044: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000049: EB 59              jmp         00000000000000A4
  000000000000004B: 33 D2              xor         edx,edx
  000000000000004D: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000052: B9 02 00 00 00     mov         ecx,2
  0000000000000057: 48 F7 F1           div         rax,rcx
  000000000000005A: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000005F: 48 2B C8           sub         rcx,rax
  0000000000000062: 48 8B C1           mov         rax,rcx
  0000000000000065: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  000000000000006A: 76 07              jbe         0000000000000073
  000000000000006C: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000071: EB 31              jmp         00000000000000A4
  0000000000000073: 33 D2              xor         edx,edx
  0000000000000075: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000007A: B9 02 00 00 00     mov         ecx,2
  000000000000007F: 48 F7 F1           div         rax,rcx
  0000000000000082: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000087: 48 03 C8           add         rcx,rax
  000000000000008A: 48 8B C1           mov         rax,rcx
  000000000000008D: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000092: 48 8D 54 24 38     lea         rdx,[rsp+38h]
  0000000000000097: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  000000000000009C: E8 00 00 00 00     call        ??$max@_K@std@@YAAEB_KAEB_K0@Z
  00000000000000A1: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A4: 48 8B F8           mov         rdi,rax
  00000000000000A7: 48 8B CC           mov         rcx,rsp
  00000000000000AA: 48 8D 15 00 00 00  lea         rdx,[?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData]
                    00
  00000000000000B1: E8 00 00 00 00     call        _RTC_CheckStackVars
  00000000000000B6: 48 8B C7           mov         rax,rdi
  00000000000000B9: 48 83 C4 40        add         rsp,40h
  00000000000000BD: 5F                 pop         rdi
  00000000000000BE: C3                 ret

?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z (public: void __cdecl std::_String_val<struct std::_Simple_types<char> >::_Check_offset(unsigned __int64)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000014: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000019: 48 39 48 18        cmp         qword ptr [rax+18h],rcx
  000000000000001D: 73 06              jae         0000000000000025
  000000000000001F: E8 00 00 00 00     call        ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
  0000000000000024: 90                 nop
  0000000000000025: 48 83 C4 20        add         rsp,20h
  0000000000000029: 5F                 pop         rdi
  000000000000002A: C3                 ret

?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z (public: unsigned __int64 __cdecl std::_String_val<struct std::_Simple_types<char> >::_Clamp_suffix_size(unsigned __int64,unsigned __int64)const ):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000001E: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000022: 48 2B C1           sub         rax,rcx
  0000000000000025: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002A: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  000000000000002F: 48 8D 4C 24 50     lea         rcx,[rsp+50h]
  0000000000000034: E8 00 00 00 00     call        ??$min@_K@std@@YAAEB_KAEB_K0@Z
  0000000000000039: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000003C: 48 83 C4 30        add         rsp,30h
  0000000000000040: 5F                 pop         rdi
  0000000000000041: C3                 ret

?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct_empty(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000014: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000019: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
  000000000000001E: 48 8B D0           mov         rdx,rax
  0000000000000021: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  0000000000000026: E8 00 00 00 00     call        ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
  000000000000002B: 48 8B D0           mov         rdx,rax
  000000000000002E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000033: E8 00 00 00 00     call        ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
  0000000000000038: 90                 nop
  0000000000000039: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000003E: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  0000000000000046: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000004B: 48 C7 40 20 0F 00  mov         qword ptr [rax+20h],0Fh
                    00 00
  0000000000000053: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000058: E8 00 00 00 00     call        ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
  000000000000005D: 90                 nop
  000000000000005E: C6 44 24 29 00     mov         byte ptr [rsp+29h],0
  0000000000000063: B8 01 00 00 00     mov         eax,1
  0000000000000068: 48 6B C0 00        imul        rax,rax,0
  000000000000006C: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000071: 48 8D 44 01 08     lea         rax,[rcx+rax+8]
  0000000000000076: 48 8D 54 24 29     lea         rdx,[rsp+29h]
  000000000000007B: 48 8B C8           mov         rcx,rax
  000000000000007E: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  0000000000000083: 90                 nop
  0000000000000084: 48 83 C4 30        add         rsp,30h
  0000000000000088: 5F                 pop         rdi
  0000000000000089: C3                 ret

?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z (private: static void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Deallocate_for_capacity(class std::allocator<char> &,char * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 20        sub         rsp,20h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 48 FF C0           inc         rax
  000000000000001C: 4C 8B C0           mov         r8,rax
  000000000000001F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000024: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000029: E8 00 00 00 00     call        ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
  000000000000002E: 90                 nop
  000000000000002F: 48 83 C4 20        add         rsp,20h
  0000000000000033: 5F                 pop         rdi
  0000000000000034: C3                 ret

?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ (protected: bool __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Endwrite(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 81 EC E0 00 00  sub         rsp,0E0h
                    00
  000000000000000D: 48 8D 7C 24 30     lea         rdi,[rsp+30h]
  0000000000000012: B9 2C 00 00 00     mov         ecx,2Ch
  0000000000000017: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000000000000001C: F3 AB              rep stos    dword ptr [rdi]
  000000000000001E: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000026: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000002D: 48 33 C4           xor         rax,rsp
  0000000000000030: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  0000000000000038: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000040: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  0000000000000045: 74 10              je          0000000000000057
  0000000000000047: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  000000000000004F: 0F B6 40 71        movzx       eax,byte ptr [rax+71h]
  0000000000000053: 85 C0              test        eax,eax
  0000000000000055: 75 07              jne         000000000000005E
  0000000000000057: B0 01              mov         al,1
  0000000000000059: E9 9A 01 00 00     jmp         00000000000001F8
  000000000000005E: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000066: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000069: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000006D: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  0000000000000075: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000007A: 89 84 24 B0 00 00  mov         dword ptr [rsp+0B0h],eax
                    00
  0000000000000081: 8B 94 24 B0 00 00  mov         edx,dword ptr [rsp+0B0h]
                    00
  0000000000000088: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000090: FF 94 24 A8 00 00  call        qword ptr [rsp+0A8h]
                    00
  0000000000000097: 89 84 24 B4 00 00  mov         dword ptr [rsp+0B4h],eax
                    00
  000000000000009E: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000000A3: 89 84 24 B8 00 00  mov         dword ptr [rsp+0B8h],eax
                    00
  00000000000000AA: 8B 94 24 B4 00 00  mov         edx,dword ptr [rsp+0B4h]
                    00
  00000000000000B1: 8B 8C 24 B8 00 00  mov         ecx,dword ptr [rsp+0B8h]
                    00
  00000000000000B8: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  00000000000000BD: 0F B6 C0           movzx       eax,al
  00000000000000C0: 85 C0              test        eax,eax
  00000000000000C2: 74 07              je          00000000000000CB
  00000000000000C4: 32 C0              xor         al,al
  00000000000000C6: E9 2D 01 00 00     jmp         00000000000001F8
  00000000000000CB: 48 C7 44 24 30 20  mov         qword ptr [rsp+30h],20h
                    00 00 00
  00000000000000D4: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000000DC: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  00000000000000E0: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  00000000000000E8: 48 8D 44 24 68     lea         rax,[rsp+68h]
  00000000000000ED: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000000F5: 48 83 C1 74        add         rcx,74h
  00000000000000F9: 48 8D 94 24 88 00  lea         rdx,[rsp+88h]
                    00 00
  0000000000000101: 48 89 54 24 20     mov         qword ptr [rsp+20h],rdx
  0000000000000106: 4C 8B C8           mov         r9,rax
  0000000000000109: 4C 8D 44 24 48     lea         r8,[rsp+48h]
  000000000000010E: 48 8B D1           mov         rdx,rcx
  0000000000000111: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000119: FF 15 00 00 00 00  call        qword ptr [__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z]
  000000000000011F: 89 84 24 C8 00 00  mov         dword ptr [rsp+0C8h],eax
                    00
  0000000000000126: 83 BC 24 C8 00 00  cmp         dword ptr [rsp+0C8h],0
                    00 00
  000000000000012E: 74 1D              je          000000000000014D
  0000000000000130: 83 BC 24 C8 00 00  cmp         dword ptr [rsp+0C8h],1
                    00 01
  0000000000000138: 74 1F              je          0000000000000159
  000000000000013A: 83 BC 24 C8 00 00  cmp         dword ptr [rsp+0C8h],3
                    00 03
  0000000000000142: 0F 84 9E 00 00 00  je          00000000000001E6
  0000000000000148: E9 A9 00 00 00     jmp         00000000000001F6
  000000000000014D: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000155: C6 40 71 00        mov         byte ptr [rax+71h],0
  0000000000000159: 48 8D 44 24 48     lea         rax,[rsp+48h]
  000000000000015E: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  0000000000000166: 48 2B C8           sub         rcx,rax
  0000000000000169: 48 8B C1           mov         rax,rcx
  000000000000016C: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  0000000000000174: 48 83 BC 24 98 00  cmp         qword ptr [rsp+98h],0
                    00 00 00
  000000000000017D: 76 35              jbe         00000000000001B4
  000000000000017F: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000187: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  000000000000018E: 4C 8B 84 24 98 00  mov         r8,qword ptr [rsp+98h]
                    00 00
  0000000000000196: BA 01 00 00 00     mov         edx,1
  000000000000019B: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  00000000000001A0: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  00000000000001A6: 48 39 84 24 98 00  cmp         qword ptr [rsp+98h],rax
                    00 00
  00000000000001AE: 74 04              je          00000000000001B4
  00000000000001B0: 32 C0              xor         al,al
  00000000000001B2: EB 44              jmp         00000000000001F8
  00000000000001B4: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000001BC: 0F B6 40 71        movzx       eax,byte ptr [rax+71h]
  00000000000001C0: 85 C0              test        eax,eax
  00000000000001C2: 75 0D              jne         00000000000001D1
  00000000000001C4: C7 84 24 CC 00 00  mov         dword ptr [rsp+0CCh],1
                    00 01 00 00 00
  00000000000001CF: EB 0B              jmp         00000000000001DC
  00000000000001D1: C7 84 24 CC 00 00  mov         dword ptr [rsp+0CCh],0
                    00 00 00 00 00
  00000000000001DC: 0F B6 84 24 CC 00  movzx       eax,byte ptr [rsp+0CCh]
                    00 00
  00000000000001E4: EB 12              jmp         00000000000001F8
  00000000000001E6: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000001EE: C6 40 71 00        mov         byte ptr [rax+71h],0
  00000000000001F2: B0 01              mov         al,1
  00000000000001F4: EB 02              jmp         00000000000001F8
  00000000000001F6: 32 C0              xor         al,al
  00000000000001F8: 48 8B F8           mov         rdi,rax
  00000000000001FB: 48 8B CC           mov         rcx,rsp
  00000000000001FE: 48 8D 15 00 00 00  lea         rdx,[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData]
                    00
  0000000000000205: E8 00 00 00 00     call        _RTC_CheckStackVars
  000000000000020A: 48 8B C7           mov         rax,rdi
  000000000000020D: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000215: 48 33 CC           xor         rcx,rsp
  0000000000000218: E8 00 00 00 00     call        __security_check_cookie
  000000000000021D: 48 81 C4 E0 00 00  add         rsp,0E0h
                    00
  0000000000000224: 5F                 pop         rdi
  0000000000000225: C3                 ret

?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000019: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  000000000000001D: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000022: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000027: 48 8B C8           mov         rcx,rax
  000000000000002A: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  000000000000002F: 48 03 44 24 48     add         rax,qword ptr [rsp+48h]
  0000000000000034: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000039: 48 8B C8           mov         rcx,rax
  000000000000003C: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  0000000000000041: 90                 nop
  0000000000000042: 48 83 C4 30        add         rsp,30h
  0000000000000046: 5F                 pop         rdi
  0000000000000047: C3                 ret

?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z (private: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Erase_noexcept(unsigned __int64,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 50        sub         rsp,50h
  0000000000000014: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000019: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000001E: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000023: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  0000000000000028: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000002D: E8 00 00 00 00     call        ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
  0000000000000032: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000037: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000003C: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000040: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000045: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000004A: 48 8B C8           mov         rcx,rax
  000000000000004D: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  0000000000000052: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000057: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000005C: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000061: 48 03 C8           add         rcx,rax
  0000000000000064: 48 8B C1           mov         rax,rcx
  0000000000000067: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000006C: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000071: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000076: 48 2B C8           sub         rcx,rax
  0000000000000079: 48 8B C1           mov         rax,rcx
  000000000000007C: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000081: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000086: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000008B: 48 2B C8           sub         rcx,rax
  000000000000008E: 48 8B C1           mov         rax,rcx
  0000000000000091: 48 FF C0           inc         rax
  0000000000000094: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000099: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  000000000000009E: 48 03 D1           add         rdx,rcx
  00000000000000A1: 48 8B CA           mov         rcx,rdx
  00000000000000A4: 4C 8B C0           mov         r8,rax
  00000000000000A7: 48 8B D1           mov         rdx,rcx
  00000000000000AA: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000AF: E8 00 00 00 00     call        ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  00000000000000B4: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000B9: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000BE: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  00000000000000C2: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000C7: 48 83 C4 50        add         rsp,50h
  00000000000000CB: 5F                 pop         rdi
  00000000000000CC: C3                 ret

?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ (public: struct std::default_delete<class std::_Facet_base> & __cdecl std::_Compressed_pair<struct std::default_delete<class std::_Facet_base>,class std::_Facet_base *,1>::_Get_first(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ (public: class std::allocator<char> & __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::_Get_first(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ (public: class std::allocator<char> const & __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::_Get_first(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ (private: class std::allocator<char> & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Getal(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5F                 pop         rdi
  000000000000001C: C3                 ret

?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ (private: class std::allocator<char> const & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Getal(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5F                 pop         rdi
  000000000000001C: C3                 ret

?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z (public: class std::locale::facet const * __cdecl std::locale::_Getfacet(unsigned __int64)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 40        sub         rsp,40h
  000000000000000F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000014: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  0000000000000018: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000001C: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  0000000000000021: 73 1D              jae         0000000000000040
  0000000000000023: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000028: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000002C: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000030: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000035: 48 8B 04 C8        mov         rax,qword ptr [rax+rcx*8]
  0000000000000039: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000003E: EB 09              jmp         0000000000000049
  0000000000000040: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000049: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004E: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000053: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000059: 75 11              jne         000000000000006C
  000000000000005B: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000060: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  0000000000000064: 0F B6 40 24        movzx       eax,byte ptr [rax+24h]
  0000000000000068: 85 C0              test        eax,eax
  000000000000006A: 75 07              jne         0000000000000073
  000000000000006C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000071: EB 30              jmp         00000000000000A3
  0000000000000073: E8 00 00 00 00     call        ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ
  0000000000000078: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000007D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000082: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000086: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  000000000000008B: 73 14              jae         00000000000000A1
  000000000000008D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000092: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000096: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000009B: 48 8B 04 C8        mov         rax,qword ptr [rax+rcx*8]
  000000000000009F: EB 02              jmp         00000000000000A3
  00000000000000A1: 33 C0              xor         eax,eax
  00000000000000A3: 48 83 C4 40        add         rsp,40h
  00000000000000A7: 5F                 pop         rdi
  00000000000000A8: C3                 ret

?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z (protected: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Init(struct _iobuf *,enum std::basic_filebuf<char,struct std::char_traits<char> >::_Initfl)):
  0000000000000000: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 81 EC B0 00 00  sub         rsp,0B0h
                    00
  0000000000000017: 48 8D 7C 24 40     lea         rdi,[rsp+40h]
  000000000000001C: B9 1C 00 00 00     mov         ecx,1Ch
  0000000000000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000026: F3 AB              rep stos    dword ptr [rdi]
  0000000000000028: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000030: 83 BC 24 D0 00 00  cmp         dword ptr [rsp+0D0h],1
                    00 01
  0000000000000038: 75 0D              jne         0000000000000047
  000000000000003A: C7 84 24 A0 00 00  mov         dword ptr [rsp+0A0h],1
                    00 01 00 00 00
  0000000000000045: EB 0B              jmp         0000000000000052
  0000000000000047: C7 84 24 A0 00 00  mov         dword ptr [rsp+0A0h],0
                    00 00 00 00 00
  0000000000000052: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000005A: 0F B6 8C 24 A0 00  movzx       ecx,byte ptr [rsp+0A0h]
                    00 00
  0000000000000062: 88 48 7C           mov         byte ptr [rax+7Ch],cl
  0000000000000065: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000006D: C6 40 71 00        mov         byte ptr [rax+71h],0
  0000000000000071: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000079: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ]
  000000000000007F: 90                 nop
  0000000000000080: 48 83 BC 24 C8 00  cmp         qword ptr [rsp+0C8h],0
                    00 00 00
  0000000000000089: 0F 84 9B 00 00 00  je          000000000000012A
  000000000000008F: 33 C0              xor         eax,eax
  0000000000000091: 83 F8 01           cmp         eax,1
  0000000000000094: 0F 84 90 00 00 00  je          000000000000012A
  000000000000009A: 48 C7 44 24 48 00  mov         qword ptr [rsp+48h],0
                    00 00 00
  00000000000000A3: 48 C7 44 24 68 00  mov         qword ptr [rsp+68h],0
                    00 00 00
  00000000000000AC: 48 C7 84 24 88 00  mov         qword ptr [rsp+88h],0
                    00 00 00 00 00 00
  00000000000000B8: 4C 8D 8C 24 88 00  lea         r9,[rsp+88h]
                    00 00
  00000000000000C0: 4C 8D 44 24 68     lea         r8,[rsp+68h]
  00000000000000C5: 48 8D 54 24 48     lea         rdx,[rsp+48h]
  00000000000000CA: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  00000000000000D2: FF 15 00 00 00 00  call        qword ptr [__imp__get_stream_buffer_pointers]
  00000000000000D8: 48 8B 84 24 88 00  mov         rax,qword ptr [rsp+88h]
                    00 00
  00000000000000E0: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000000E8: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  00000000000000F0: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000F5: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000FA: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000FF: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000104: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000109: 4C 8B 8C 24 88 00  mov         r9,qword ptr [rsp+88h]
                    00 00
  0000000000000111: 4C 8B 44 24 68     mov         r8,qword ptr [rsp+68h]
  0000000000000116: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000011B: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000123: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z]
  0000000000000129: 90                 nop
  000000000000012A: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000132: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  000000000000013A: 48 89 88 80 00 00  mov         qword ptr [rax+80h],rcx
                    00
  0000000000000141: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000149: 48 8B 0D 00 00 00  mov         rcx,qword ptr [?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A]
                    00
  0000000000000150: 48 89 48 74        mov         qword ptr [rax+74h],rcx
  0000000000000154: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000015C: 48 C7 40 68 00 00  mov         qword ptr [rax+68h],0
                    00 00
  0000000000000164: 48 8B CC           mov         rcx,rsp
  0000000000000167: 48 8D 15 00 00 00  lea         rdx,[?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData]
                    00
  000000000000016E: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000173: 48 81 C4 B0 00 00  add         rsp,0B0h
                    00
  000000000000017A: 5F                 pop         rdi
  000000000000017B: C3                 ret

?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z (protected: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Initcvt(class std::codecvt<char,char,struct _Mbstatet> const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000014: FF 15 00 00 00 00  call        qword ptr [__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ]
  000000000000001A: 0F B6 C0           movzx       eax,al
  000000000000001D: 85 C0              test        eax,eax
  000000000000001F: 74 0F              je          0000000000000030
  0000000000000021: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000026: 48 C7 40 68 00 00  mov         qword ptr [rax+68h],0
                    00 00
  000000000000002E: EB 1F              jmp         000000000000004F
  0000000000000030: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000035: E8 00 00 00 00     call        ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
  000000000000003A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003F: 48 89 41 68        mov         qword ptr [rcx+68h],rax
  0000000000000043: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000048: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ]
  000000000000004E: 90                 nop
  000000000000004F: 48 83 C4 20        add         rsp,20h
  0000000000000053: 5F                 pop         rdi
  0000000000000054: C3                 ret

?_Is_constant_evaluated@std@@YA_NXZ (bool __cdecl std::_Is_constant_evaluated(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 32 C0              xor         al,al
  0000000000000004: 5F                 pop         rdi
  0000000000000005: C3                 ret

?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ (public: bool __cdecl std::_String_val<struct std::_Simple_types<char> >::_Large_mode_engaged(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: 48 83 78 20 0F     cmp         qword ptr [rax+20h],0Fh
  0000000000000014: 76 09              jbe         000000000000001F
  0000000000000016: C7 04 24 01 00 00  mov         dword ptr [rsp],1
                    00
  000000000000001D: EB 07              jmp         0000000000000026
  000000000000001F: C7 04 24 00 00 00  mov         dword ptr [rsp],0
                    00
  0000000000000026: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  000000000000002A: 48 83 C4 10        add         rsp,10h
  000000000000002E: 5F                 pop         rdi
  000000000000002F: C3                 ret

?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ (public: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Lock(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000017: 74 13              je          000000000000002C
  0000000000000019: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001E: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000025: FF 15 00 00 00 00  call        qword ptr [__imp__lock_file]
  000000000000002B: 90                 nop
  000000000000002C: 48 83 C4 20        add         rsp,20h
  0000000000000030: 5F                 pop         rdi
  0000000000000031: C3                 ret

?_Maklocwcs@std@@YAPEA_WPEB_W@Z (wchar_t * __cdecl std::_Maklocwcs(wchar_t const *)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000000F: FF 15 00 00 00 00  call        qword ptr [__imp_wcslen]
  0000000000000015: 48 FF C0           inc         rax
  0000000000000018: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000001D: C7 44 24 20 4C 00  mov         dword ptr [rsp+20h],4Ch
                    00 00
  0000000000000025: 4C 8D 0D 00 00 00  lea         r9,[??_C@_0GJ@ILGLMKLI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  000000000000002C: 41 B8 02 00 00 00  mov         r8d,2
  0000000000000032: BA 02 00 00 00     mov         edx,2
  0000000000000037: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003C: FF 15 00 00 00 00  call        qword ptr [__imp__calloc_dbg]
  0000000000000042: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000047: 48 83 7C 24 38 00  cmp         qword ptr [rsp+38h],0
  000000000000004D: 75 06              jne         0000000000000055
  000000000000004F: E8 00 00 00 00     call        ?_Xbad_alloc@std@@YAXXZ
  0000000000000054: 90                 nop
  0000000000000055: 4C 8B 44 24 30     mov         r8,qword ptr [rsp+30h]
  000000000000005A: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  000000000000005F: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000064: E8 00 00 00 00     call        wmemcpy
  0000000000000069: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000006E: 48 83 C4 40        add         rsp,40h
  0000000000000072: 5F                 pop         rdi
  0000000000000073: C3                 ret

?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ (public: char * __cdecl std::_String_val<struct std::_Simple_types<char> >::_Myptr(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 C0 08        add         rax,8
  0000000000000013: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000018: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001D: E8 00 00 00 00     call        ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
  0000000000000022: 0F B6 C0           movzx       eax,al
  0000000000000025: 85 C0              test        eax,eax
  0000000000000027: 74 13              je          000000000000003C
  0000000000000029: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000002E: 48 8B 48 08        mov         rcx,qword ptr [rax+8]
  0000000000000032: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000041: 48 83 C4 30        add         rsp,30h
  0000000000000045: 5F                 pop         rdi
  0000000000000046: C3                 ret

?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ (public: char const * __cdecl std::_String_val<struct std::_Simple_types<char> >::_Myptr(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 C0 08        add         rax,8
  0000000000000013: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000018: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001D: E8 00 00 00 00     call        ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
  0000000000000022: 0F B6 C0           movzx       eax,al
  0000000000000025: 85 C0              test        eax,eax
  0000000000000027: 74 13              je          000000000000003C
  0000000000000029: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000002E: 48 8B 48 08        mov         rcx,qword ptr [rax+8]
  0000000000000032: E8 00 00 00 00     call        ??$_Unfancy@D@std@@YAPEADPEAD@Z
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000041: 48 83 C4 30        add         rsp,30h
  0000000000000045: 5F                 pop         rdi
  0000000000000046: C3                 ret

?_Orphan_all@_Container_base12@std@@QEAAXXZ (public: void __cdecl std::_Container_base12::_Orphan_all(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  000000000000000F: 0F B6 C0           movzx       eax,al
  0000000000000012: 85 C0              test        eax,eax
  0000000000000014: 74 0D              je          0000000000000023
  0000000000000016: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001B: E8 00 00 00 00     call        ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
  0000000000000020: 90                 nop
  0000000000000021: EB 0B              jmp         000000000000002E
  0000000000000023: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000028: E8 00 00 00 00     call        ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
  000000000000002D: 90                 nop
  000000000000002E: 48 83 C4 20        add         rsp,20h
  0000000000000032: 5F                 pop         rdi
  0000000000000033: C3                 ret

?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ (private: void __cdecl std::_Container_base12::_Orphan_all_locked_v3(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000000F: B9 08 00 00 00     mov         ecx,8
  0000000000000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000019: F3 AB              rep stos    dword ptr [rdi]
  000000000000001B: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000020: BA 03 00 00 00     mov         edx,3
  0000000000000025: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  000000000000002A: FF 15 00 00 00 00  call        qword ptr [__imp_??0_Lockit@std@@QEAA@H@Z]
  0000000000000030: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000035: E8 00 00 00 00     call        ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
  000000000000003A: 48 8D 4C 24 24     lea         rcx,[rsp+24h]
  000000000000003F: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  0000000000000045: 90                 nop
  0000000000000046: 48 8B CC           mov         rcx,rsp
  0000000000000049: 48 8D 15 00 00 00  lea         rdx,[?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData]
                    00
  0000000000000050: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000055: 48 83 C4 40        add         rsp,40h
  0000000000000059: 5F                 pop         rdi
  000000000000005A: C3                 ret

?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ (private: void __cdecl std::_Container_base12::_Orphan_all_unlocked_v3(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000013: 75 02              jne         0000000000000017
  0000000000000015: EB 4D              jmp         0000000000000064
  0000000000000017: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  0000000000000020: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000025: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000028: 48 83 C0 08        add         rax,8
  000000000000002C: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  0000000000000031: 48 8B C8           mov         rcx,rax
  0000000000000034: E8 00 00 00 00     call        ??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z
  0000000000000039: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003E: EB 0E              jmp         000000000000004E
  0000000000000040: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000045: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  0000000000000049: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004E: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000054: 74 0E              je          0000000000000064
  0000000000000056: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005B: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  0000000000000062: EB DC              jmp         0000000000000040
  0000000000000064: 48 83 C4 30        add         rsp,30h
  0000000000000068: 5F                 pop         rdi
  0000000000000069: C3                 ret

?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ (public: void __cdecl std::_Basic_container_proxy_ptr12::_Release(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  0000000000000012: 5F                 pop         rdi
  0000000000000013: C3                 ret

?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ (private: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Reset_back(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000015: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001A: 48 83 C1 70        add         rcx,70h
  000000000000001E: 48 3B C1           cmp         rax,rcx
  0000000000000021: 75 30              jne         0000000000000053
  0000000000000023: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000028: 4C 8B 88 90 00 00  mov         r9,qword ptr [rax+90h]
                    00
  000000000000002F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000034: 4C 8B 80 88 00 00  mov         r8,qword ptr [rax+88h]
                    00
  000000000000003B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000040: 48 8B 90 88 00 00  mov         rdx,qword ptr [rax+88h]
                    00
  0000000000000047: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004C: FF 15 00 00 00 00  call        qword ptr [__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z]
  0000000000000052: 90                 nop
  0000000000000053: 48 83 C4 20        add         rsp,20h
  0000000000000057: 5F                 pop         rdi
  0000000000000058: C3                 ret

?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ (private: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Set_back(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000F: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000015: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001A: 48 83 C1 70        add         rcx,70h
  000000000000001E: 48 3B C1           cmp         rax,rcx
  0000000000000021: 74 2E              je          0000000000000051
  0000000000000023: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000028: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000002E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000033: 48 89 81 88 00 00  mov         qword ptr [rcx+88h],rax
                    00
  000000000000003A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003F: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000045: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004A: 48 89 81 90 00 00  mov         qword ptr [rcx+90h],rax
                    00
  0000000000000051: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000056: 48 83 C0 71        add         rax,71h
  000000000000005A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000005F: 48 83 C1 70        add         rcx,70h
  0000000000000063: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  0000000000000068: 48 83 C2 70        add         rdx,70h
  000000000000006C: 4C 8B C8           mov         r9,rax
  000000000000006F: 4C 8B C1           mov         r8,rcx
  0000000000000072: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z]
  000000000000007D: 90                 nop
  000000000000007E: 48 83 C4 20        add         rsp,20h
  0000000000000082: 5F                 pop         rdi
  0000000000000083: C3                 ret

?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ (public: void __cdecl std::_String_val<struct std::_Simple_types<char> >::_Bxty::_Switch_to_buf(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
  0000000000000017: 90                 nop
  0000000000000018: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  000000000000001D: 0F B6 C0           movzx       eax,al
  0000000000000020: 85 C0              test        eax,eax
  0000000000000022: 74 35              je          0000000000000059
  0000000000000024: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000002D: EB 0D              jmp         000000000000003C
  000000000000002F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000034: 48 FF C0           inc         rax
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 48 83 7C 24 20 10  cmp         qword ptr [rsp+20h],10h
  0000000000000042: 73 15              jae         0000000000000059
  0000000000000044: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000049: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000004E: 48 03 C8           add         rcx,rax
  0000000000000051: 48 8B C1           mov         rax,rcx
  0000000000000054: C6 00 00           mov         byte ptr [rax],0
  0000000000000057: EB D6              jmp         000000000000002F
  0000000000000059: 48 83 C4 30        add         rsp,30h
  000000000000005D: 5F                 pop         rdi
  000000000000005E: C3                 ret

?_Throw_bad_array_new_length@std@@YAXXZ (void __cdecl std::_Throw_bad_array_new_length(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 48 83 EC 40        sub         rsp,40h
  0000000000000006: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000000B: E8 00 00 00 00     call        ??0bad_array_new_length@std@@QEAA@XZ
  0000000000000010: 48 8D 15 00 00 00  lea         rdx,[_TI3?AVbad_array_new_length@std@@]
                    00
  0000000000000017: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000001C: E8 00 00 00 00     call        _CxxThrowException
  0000000000000021: 90                 nop
  0000000000000022: 48 83 C4 40        add         rsp,40h
  0000000000000026: 5F                 pop         rdi
  0000000000000027: C3                 ret

?_Throw_bad_cast@std@@YAXXZ (void __cdecl std::_Throw_bad_cast(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 48 83 EC 40        sub         rsp,40h
  0000000000000006: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000000B: E8 00 00 00 00     call        ??0bad_cast@std@@QEAA@XZ
  0000000000000010: 48 8D 15 00 00 00  lea         rdx,[_TI2?AVbad_cast@std@@]
                    00
  0000000000000017: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000001C: E8 00 00 00 00     call        _CxxThrowException
  0000000000000021: 90                 nop
  0000000000000022: 48 83 C4 40        add         rsp,40h
  0000000000000026: 5F                 pop         rdi
  0000000000000027: C3                 ret

?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy_deallocate(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000000F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000014: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000019: E8 00 00 00 00     call        ?_Orphan_all@_Container_base12@std@@QEAAXXZ
  000000000000001E: 90                 nop
  000000000000001F: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000024: E8 00 00 00 00     call        ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
  0000000000000029: 0F B6 C0           movzx       eax,al
  000000000000002C: 85 C0              test        eax,eax
  000000000000002E: 74 3D              je          000000000000006D
  0000000000000030: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000035: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
  000000000000003A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000003F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000044: 4C 8B 40 20        mov         r8,qword ptr [rax+20h]
  0000000000000048: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000004D: 48 8B 50 08        mov         rdx,qword ptr [rax+8]
  0000000000000051: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000056: E8 00 00 00 00     call        ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
  000000000000005B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000060: 48 83 C0 08        add         rax,8
  0000000000000064: 48 8B C8           mov         rcx,rax
  0000000000000067: E8 00 00 00 00     call        ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
  000000000000006C: 90                 nop
  000000000000006D: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000072: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  000000000000007A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000007F: 48 C7 40 20 0F 00  mov         qword ptr [rax+20h],0Fh
                    00 00
  0000000000000087: C6 44 24 30 00     mov         byte ptr [rsp+30h],0
  000000000000008C: B8 01 00 00 00     mov         eax,1
  0000000000000091: 48 6B C0 00        imul        rax,rax,0
  0000000000000095: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000009A: 48 8D 44 01 08     lea         rax,[rcx+rax+8]
  000000000000009F: 48 8D 54 24 30     lea         rdx,[rsp+30h]
  00000000000000A4: 48 8B C8           mov         rcx,rax
  00000000000000A7: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  00000000000000AC: 90                 nop
  00000000000000AD: 48 83 C4 40        add         rsp,40h
  00000000000000B1: 5F                 pop         rdi
  00000000000000B2: C3                 ret

?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ (public: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Unlock(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000017: 74 13              je          000000000000002C
  0000000000000019: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001E: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000025: FF 15 00 00 00 00  call        qword ptr [__imp__unlock_file]
  000000000000002B: 90                 nop
  000000000000002C: 48 83 C4 20        add         rsp,20h
  0000000000000030: 5F                 pop         rdi
  0000000000000031: C3                 ret

?_Xlen_string@std@@YAXXZ (void __cdecl std::_Xlen_string(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BA@JFNIOLAK@string?5too?5long@]
                    00
  000000000000000D: E8 00 00 00 00     call        ?_Xlength_error@std@@YAXPEBD@Z
  0000000000000012: 90                 nop
  0000000000000013: 48 83 C4 20        add         rsp,20h
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ (public: static void __cdecl std::_String_val<struct std::_Simple_types<char> >::_Xran(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BI@CFPLBAOH@invalid?5string?5position@]
                    00
  000000000000000D: E8 00 00 00 00     call        ?_Xout_of_range@std@@YAXPEBD@Z
  0000000000000012: 90                 nop
  0000000000000013: 48 83 C4 20        add         rsp,20h
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

?__empty_global_delete@@YAXPEAX@Z (void __cdecl __empty_global_delete(void *)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 5F                 pop         rdi
  0000000000000007: C3                 ret

?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z (void __cdecl __empty_global_delete(void *,enum std::align_val_t)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

?__empty_global_delete@@YAXPEAX_K@Z (void __cdecl __empty_global_delete(void *,unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 5F                 pop         rdi
  000000000000000C: C3                 ret

?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z (void __cdecl __empty_global_delete(void *,unsigned __int64,enum std::align_val_t)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 5F                 pop         rdi
  0000000000000011: C3                 ret

?allocate@?$allocator@D@std@@QEAAPEAD_K@Z (public: char * __cdecl std::allocator<char>::allocate(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000014: E8 00 00 00 00     call        ??$_Get_size_of_n@$00@std@@YA_K_K@Z
  0000000000000019: 48 8B C8           mov         rcx,rax
  000000000000001C: E8 00 00 00 00     call        ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  0000000000000021: 48 83 C4 20        add         rsp,20h
  0000000000000025: 5F                 pop         rdi
  0000000000000026: C3                 ret

?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z (public: struct std::_Container_proxy * __cdecl std::allocator<struct std::_Container_proxy>::allocate(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000014: E8 00 00 00 00     call        ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
  0000000000000019: 48 8B C8           mov         rcx,rax
  000000000000001C: E8 00 00 00 00     call        ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  0000000000000021: 48 83 C4 20        add         rsp,20h
  0000000000000025: 5F                 pop         rdi
  0000000000000026: C3                 ret

?assign@?$_Char_traits@DH@std@@SAXAEADAEBD@Z (public: static void __cdecl std::_Char_traits<char,int>::assign(char &,char const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000015: 0F B6 09           movzx       ecx,byte ptr [rcx]
  0000000000000018: 88 08              mov         byte ptr [rax],cl
  000000000000001A: 5F                 pop         rdi
  000000000000001B: C3                 ret

?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z (public: static void __cdecl std::_Narrow_char_traits<char,int>::assign(char &,char const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000014: 0F B6 C0           movzx       eax,al
  0000000000000017: 85 C0              test        eax,eax
  0000000000000019: 74 12              je          000000000000002D
  000000000000001B: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000020: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000025: E8 00 00 00 00     call        ?assign@?$_Char_traits@DH@std@@SAXAEADAEBD@Z
  000000000000002A: 90                 nop
  000000000000002B: EB 0F              jmp         000000000000003C
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000037: 0F B6 09           movzx       ecx,byte ptr [rcx]
  000000000000003A: 88 08              mov         byte ptr [rax],cl
  000000000000003C: 48 83 C4 20        add         rsp,20h
  0000000000000040: 5F                 pop         rdi
  0000000000000041: C3                 ret

?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ (public: char const * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5F                 pop         rdi
  000000000000001C: C3                 ret

?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::close(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000017: 74 4F              je          0000000000000068
  0000000000000019: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001E: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  0000000000000023: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000028: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002D: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000032: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  0000000000000037: 0F B6 C0           movzx       eax,al
  000000000000003A: 85 C0              test        eax,eax
  000000000000003C: 75 09              jne         0000000000000047
  000000000000003E: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000047: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004C: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000053: FF 15 00 00 00 00  call        qword ptr [__imp_fclose]
  0000000000000059: 85 C0              test        eax,eax
  000000000000005B: 74 09              je          0000000000000066
  000000000000005D: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000066: EB 09              jmp         0000000000000071
  0000000000000068: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000071: 41 B8 02 00 00 00  mov         r8d,2
  0000000000000077: 33 D2              xor         edx,edx
  0000000000000079: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000007E: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000083: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000088: 48 83 C4 30        add         rsp,30h
  000000000000008C: 5F                 pop         rdi
  000000000000008D: C3                 ret

?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ (public: void __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::close(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 C0 10        add         rax,10h
  0000000000000013: 48 8B C8           mov         rcx,rax
  0000000000000016: E8 00 00 00 00     call        ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
  000000000000001B: 48 85 C0           test        rax,rax
  000000000000001E: 75 30              jne         0000000000000050
  0000000000000020: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000025: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000028: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000002C: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000031: 48 03 C8           add         rcx,rax
  0000000000000034: 48 8B C1           mov         rax,rcx
  0000000000000037: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003C: 45 33 C0           xor         r8d,r8d
  000000000000003F: BA 02 00 00 00     mov         edx,2
  0000000000000044: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000049: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  000000000000004F: 90                 nop
  0000000000000050: 48 83 C4 30        add         rsp,30h
  0000000000000054: 5F                 pop         rdi
  0000000000000055: C3                 ret

?compare@?$_Narrow_char_traits@DH@std@@SAHQEBD0_K@Z (public: static int __cdecl std::_Narrow_char_traits<char,int>::compare(char const * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 20        sub         rsp,20h
  0000000000000014: 4C 8B 44 24 40     mov         r8,qword ptr [rsp+40h]
  0000000000000019: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000001E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000023: E8 00 00 00 00     call        memcmp
  0000000000000028: 48 83 C4 20        add         rsp,20h
  000000000000002C: 5F                 pop         rdi
  000000000000002D: C3                 ret

?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z (public: static char * __cdecl std::_Char_traits<char,int>::copy(char * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000019: 0F B6 C0           movzx       eax,al
  000000000000001C: 85 C0              test        eax,eax
  000000000000001E: 74 52              je          0000000000000072
  0000000000000020: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000029: EB 0D              jmp         0000000000000038
  000000000000002B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000030: 48 FF C0           inc         rax
  0000000000000033: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000038: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003D: 48 39 44 24 20     cmp         qword ptr [rsp+20h],rax
  0000000000000042: 74 27              je          000000000000006B
  0000000000000044: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000049: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000004E: 48 03 C8           add         rcx,rax
  0000000000000051: 48 8B C1           mov         rax,rcx
  0000000000000054: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000059: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000005E: 48 03 D1           add         rdx,rcx
  0000000000000061: 48 8B CA           mov         rcx,rdx
  0000000000000064: 0F B6 09           movzx       ecx,byte ptr [rcx]
  0000000000000067: 88 08              mov         byte ptr [rax],cl
  0000000000000069: EB C0              jmp         000000000000002B
  000000000000006B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000070: EB 19              jmp         000000000000008B
  0000000000000072: 4C 8B 44 24 50     mov         r8,qword ptr [rsp+50h]
  0000000000000077: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000007C: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000081: E8 00 00 00 00     call        memcpy
  0000000000000086: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000008B: 48 83 C4 30        add         rsp,30h
  000000000000008F: 5F                 pop         rdi
  0000000000000090: C3                 ret

?count@?$duration@NU?$ratio@$00$00@std@@@chrono@std@@QEBANXZ (public: double __cdecl std::chrono::duration<double,struct std::ratio<1,1> >::count(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: F2 0F 10 00        movsd       xmm0,mmword ptr [rax]
  0000000000000013: 48 83 C4 10        add         rsp,10h
  0000000000000017: 5F                 pop         rdi
  0000000000000018: C3                 ret

?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ (public: __int64 __cdecl std::chrono::duration<__int64,struct std::ratio<1,1000000000> >::count(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000000E: 5F                 pop         rdi
  000000000000000F: C3                 ret

?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ (public: char * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::data(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5F                 pop         rdi
  000000000000001C: C3                 ret

?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ (public: char const * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::data(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000F: 48 8B C8           mov         rcx,rax
  0000000000000012: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5F                 pop         rdi
  000000000000001C: C3                 ret

?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z (public: static void __cdecl std::_Default_allocator_traits<class std::allocator<struct std::_Container_proxy> >::deallocate(class std::allocator<struct std::_Container_proxy> &,struct std::_Container_proxy * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 20        sub         rsp,20h
  0000000000000014: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000019: 0F B6 C0           movzx       eax,al
  000000000000001C: 85 C0              test        eax,eax
  000000000000001E: 74 17              je          0000000000000037
  0000000000000020: 4C 8B 44 24 40     mov         r8,qword ptr [rsp+40h]
  0000000000000025: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000002A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002F: E8 00 00 00 00     call        ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXQEAU_Container_proxy@2@_K@Z
  0000000000000034: 90                 nop
  0000000000000035: EB 14              jmp         000000000000004B
  0000000000000037: 48 6B 44 24 40 10  imul        rax,qword ptr [rsp+40h],10h
  000000000000003D: 48 8B D0           mov         rdx,rax
  0000000000000040: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000045: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  000000000000004A: 90                 nop
  000000000000004B: 48 83 C4 20        add         rsp,20h
  000000000000004F: 5F                 pop         rdi
  0000000000000050: C3                 ret

?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z (public: void __cdecl std::allocator<char>::deallocate(char * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  000000000000001A: 75 08              jne         0000000000000024
  000000000000001C: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  0000000000000022: 75 02              jne         0000000000000026
  0000000000000024: EB 6C              jmp         0000000000000092
  0000000000000026: 48 8D 05 00 00 00  lea         rax,[??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@]
                    00
  000000000000002D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000032: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  0000000000000039: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003E: 45 33 C9           xor         r9d,r9d
  0000000000000041: 41 B8 D3 03 00 00  mov         r8d,3D3h
  0000000000000047: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@KAOKPKLO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  000000000000004E: B9 02 00 00 00     mov         ecx,2
  0000000000000053: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  0000000000000059: 83 F8 01           cmp         eax,1
  000000000000005C: 75 03              jne         0000000000000061
  000000000000005E: CC                 int         3
  000000000000005F: 33 C0              xor         eax,eax
  0000000000000061: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000006A: 41 B9 D3 03 00 00  mov         r9d,3D3h
  0000000000000070: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@KLOJIDOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  0000000000000077: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  000000000000007E: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@]
                    00
  0000000000000085: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  000000000000008B: 90                 nop
  000000000000008C: 33 C0              xor         eax,eax
  000000000000008E: 85 C0              test        eax,eax
  0000000000000090: 75 94              jne         0000000000000026
  0000000000000092: 33 C0              xor         eax,eax
  0000000000000094: 85 C0              test        eax,eax
  0000000000000096: 0F 85 78 FF FF FF  jne         0000000000000014
  000000000000009C: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  00000000000000A1: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000A6: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  00000000000000AB: 90                 nop
  00000000000000AC: 48 83 C4 30        add         rsp,30h
  00000000000000B0: 5F                 pop         rdi
  00000000000000B1: C3                 ret

?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXQEAU_Container_proxy@2@_K@Z (public: void __cdecl std::allocator<struct std::_Container_proxy>::deallocate(struct std::_Container_proxy * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  000000000000001A: 75 08              jne         0000000000000024
  000000000000001C: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  0000000000000022: 75 02              jne         0000000000000026
  0000000000000024: EB 6C              jmp         0000000000000092
  0000000000000026: 48 8D 05 00 00 00  lea         rax,[??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@]
                    00
  000000000000002D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000032: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  0000000000000039: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003E: 45 33 C9           xor         r9d,r9d
  0000000000000041: 41 B8 D3 03 00 00  mov         r8d,3D3h
  0000000000000047: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@KAOKPKLO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  000000000000004E: B9 02 00 00 00     mov         ecx,2
  0000000000000053: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  0000000000000059: 83 F8 01           cmp         eax,1
  000000000000005C: 75 03              jne         0000000000000061
  000000000000005E: CC                 int         3
  000000000000005F: 33 C0              xor         eax,eax
  0000000000000061: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000006A: 41 B9 D3 03 00 00  mov         r9d,3D3h
  0000000000000070: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@KLOJIDOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  0000000000000077: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  000000000000007E: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@]
                    00
  0000000000000085: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  000000000000008B: 90                 nop
  000000000000008C: 33 C0              xor         eax,eax
  000000000000008E: 85 C0              test        eax,eax
  0000000000000090: 75 94              jne         0000000000000026
  0000000000000092: 33 C0              xor         eax,eax
  0000000000000094: 85 C0              test        eax,eax
  0000000000000096: 0F 85 78 FF FF FF  jne         0000000000000014
  000000000000009C: 48 6B 44 24 50 10  imul        rax,qword ptr [rsp+50h],10h
  00000000000000A2: 48 8B D0           mov         rdx,rax
  00000000000000A5: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000AA: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  00000000000000AF: 90                 nop
  00000000000000B0: 48 83 C4 30        add         rsp,30h
  00000000000000B4: 5F                 pop         rdi
  00000000000000B5: C3                 ret

?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ (public: bool __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::empty(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: 48 83 78 18 00     cmp         qword ptr [rax+18h],0
  0000000000000014: 75 09              jne         000000000000001F
  0000000000000016: C7 04 24 01 00 00  mov         dword ptr [rsp],1
                    00
  000000000000001D: EB 07              jmp         0000000000000026
  000000000000001F: C7 04 24 00 00 00  mov         dword ptr [rsp],0
                    00
  0000000000000026: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  000000000000002A: 48 83 C4 10        add         rsp,10h
  000000000000002E: 5F                 pop         rdi
  000000000000002F: C3                 ret

?eof@?$_Narrow_char_traits@DH@std@@SAHXZ (public: static int __cdecl std::_Narrow_char_traits<char,int>::eof(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: B8 FF FF FF FF     mov         eax,0FFFFFFFFh
  0000000000000007: 5F                 pop         rdi
  0000000000000008: C3                 ret

?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z (public: static bool __cdecl std::_Narrow_char_traits<char,int>::eq_int_type(int,int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 89 4C 24 08        mov         dword ptr [rsp+8],ecx
  0000000000000008: 57                 push        rdi
  0000000000000009: 48 83 EC 10        sub         rsp,10h
  000000000000000D: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000011: 39 44 24 20        cmp         dword ptr [rsp+20h],eax
  0000000000000015: 75 09              jne         0000000000000020
  0000000000000017: C7 04 24 01 00 00  mov         dword ptr [rsp],1
                    00
  000000000000001E: EB 07              jmp         0000000000000027
  0000000000000020: C7 04 24 00 00 00  mov         dword ptr [rsp],0
                    00
  0000000000000027: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  000000000000002B: 48 83 C4 10        add         rsp,10h
  000000000000002F: 5F                 pop         rdi
  0000000000000030: C3                 ret

?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(unsigned __int64,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001E: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000023: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000028: E8 00 00 00 00     call        ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
  000000000000002D: 4C 8B 44 24 50     mov         r8,qword ptr [rsp+50h]
  0000000000000032: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000037: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003C: E8 00 00 00 00     call        ?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z
  0000000000000041: 48 83 C4 30        add         rsp,30h
  0000000000000045: 5F                 pop         rdi
  0000000000000046: C3                 ret

?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 30        sub         rsp,30h
  000000000000000F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000014: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000019: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000001E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000023: E8 00 00 00 00     call        ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
  0000000000000028: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000002D: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000032: E8 00 00 00 00     call        ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
  0000000000000037: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000003C: 48 83 C4 30        add         rsp,30h
  0000000000000040: 5F                 pop         rdi
  0000000000000041: C3                 ret

?find@?$_Narrow_char_traits@DH@std@@SAPEBDQEBD_KAEBD@Z (public: static char const * __cdecl std::_Narrow_char_traits<char,int>::find(char const * const,unsigned __int64,char const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 20        sub         rsp,20h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 0F BE 00           movsx       eax,byte ptr [rax]
  000000000000001C: 4C 8B 44 24 38     mov         r8,qword ptr [rsp+38h]
  0000000000000021: 8B D0              mov         edx,eax
  0000000000000023: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000028: E8 00 00 00 00     call        memchr
  000000000000002D: 48 83 C4 20        add         rsp,20h
  0000000000000031: 5F                 pop         rdi
  0000000000000032: C3                 ret

?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned __int64)const ):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 50        sub         rsp,50h
  0000000000000014: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000019: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000001D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000022: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000027: 48 8B C8           mov         rcx,rax
  000000000000002A: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
  000000000000002F: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000034: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000039: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000003D: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000042: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000047: 48 8B C8           mov         rcx,rax
  000000000000004A: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
  000000000000004F: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000054: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000059: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000005E: 4C 8B 4C 24 38     mov         r9,qword ptr [rsp+38h]
  0000000000000063: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000068: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  000000000000006D: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000072: E8 00 00 00 00     call        ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
  0000000000000077: 48 83 C4 50        add         rsp,50h
  000000000000007B: 5F                 pop         rdi
  000000000000007C: C3                 ret

?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(char const * const,unsigned __int64)const ):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 50        sub         rsp,50h
  0000000000000014: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  0000000000000019: E8 00 00 00 00     call        ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
  000000000000001E: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000023: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000028: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000002C: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000031: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000036: 48 8B C8           mov         rcx,rax
  0000000000000039: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
  000000000000003E: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000043: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000048: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004D: 4C 8B 4C 24 68     mov         r9,qword ptr [rsp+68h]
  0000000000000052: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000057: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000005C: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000061: E8 00 00 00 00     call        ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
  0000000000000066: 48 83 C4 50        add         rsp,50h
  000000000000006A: 5F                 pop         rdi
  000000000000006B: C3                 ret

?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ (public: char & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::front(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000F: 48 83 78 18 00     cmp         qword ptr [rax+18h],0
  0000000000000014: 74 02              je          0000000000000018
  0000000000000016: EB 6C              jmp         0000000000000084
  0000000000000018: 48 8D 05 00 00 00  lea         rax,[??_C@_0BP@PFIPNLNI@front?$CI?$CJ?5called?5on?5empty?5string@]
                    00
  000000000000001F: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000024: 48 8D 05 00 00 00  lea         rax,[??_C@_02DKCKIIND@?$CFs@]
                    00
  000000000000002B: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000030: 45 33 C9           xor         r9d,r9d
  0000000000000033: 41 B8 F9 08 00 00  mov         r8d,8F9h
  0000000000000039: 48 8D 15 00 00 00  lea         rdx,[??_C@_0GJ@FJCHPGFH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@]
                    00
  0000000000000040: B9 02 00 00 00     mov         ecx,2
  0000000000000045: FF 15 00 00 00 00  call        qword ptr [__imp__CrtDbgReport]
  000000000000004B: 83 F8 01           cmp         eax,1
  000000000000004E: 75 03              jne         0000000000000053
  0000000000000050: CC                 int         3
  0000000000000051: 33 C0              xor         eax,eax
  0000000000000053: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  000000000000005C: 41 B9 F9 08 00 00  mov         r9d,8F9h
  0000000000000062: 4C 8D 05 00 00 00  lea         r8,[??_C@_1NC@EFGFHKDD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@]
                    00
  0000000000000069: 48 8D 15 00 00 00  lea         rdx,[??_C@_11LOCGONAA@@]
                    00
  0000000000000070: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1EC@DINNLDHA@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@]
                    00
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter]
  000000000000007D: 90                 nop
  000000000000007E: 33 C0              xor         eax,eax
  0000000000000080: 85 C0              test        eax,eax
  0000000000000082: 75 94              jne         0000000000000018
  0000000000000084: 33 C0              xor         eax,eax
  0000000000000086: 85 C0              test        eax,eax
  0000000000000088: 75 80              jne         000000000000000A
  000000000000008A: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000008F: 48 8B C8           mov         rcx,rax
  0000000000000092: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  0000000000000097: B9 01 00 00 00     mov         ecx,1
  000000000000009C: 48 6B C9 00        imul        rcx,rcx,0
  00000000000000A0: 48 03 C1           add         rax,rcx
  00000000000000A3: 48 83 C4 30        add         rsp,30h
  00000000000000A7: 5F                 pop         rdi
  00000000000000A8: C3                 ret

?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z (protected: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::imbue(class std::locale const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000014: E8 00 00 00 00     call        ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
  0000000000000019: 48 8B D0           mov         rdx,rax
  000000000000001C: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000021: E8 00 00 00 00     call        ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
  0000000000000026: 90                 nop
  0000000000000027: 48 83 C4 20        add         rsp,20h
  000000000000002B: 5F                 pop         rdi
  000000000000002C: C3                 ret

?is_constant_evaluated@std@@YA_NXZ (bool __cdecl std::is_constant_evaluated(void)):
  0000000000000000: 40 57              push        rdi
  0000000000000002: 32 C0              xor         al,al
  0000000000000004: 5F                 pop         rdi
  0000000000000005: C3                 ret

?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z (public: static unsigned __int64 __cdecl std::_Narrow_char_traits<char,int>::length(char const * const)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000013: 48 C7 44 24 08 FF  mov         qword ptr [rsp+8],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000001C: 48 FF 44 24 08     inc         qword ptr [rsp+8]
  0000000000000021: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000025: 48 8B 4C 24 08     mov         rcx,qword ptr [rsp+8]
  000000000000002A: 80 3C 08 00        cmp         byte ptr [rax+rcx],0
  000000000000002E: 75 EC              jne         000000000000001C
  0000000000000030: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000035: 48 83 C4 10        add         rsp,10h
  0000000000000039: 5F                 pop         rdi
  000000000000003A: C3                 ret

?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z (public: static unsigned __int64 __cdecl std::_Default_allocator_traits<class std::allocator<char> >::max_size(class std::allocator<char> const &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  000000000000000D: 5F                 pop         rdi
  000000000000000E: C3                 ret

?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 60        sub         rsp,60h
  000000000000000A: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000000F: B9 10 00 00 00     mov         ecx,10h
  0000000000000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000019: F3 AB              rep stos    dword ptr [rdi]
  000000000000001B: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000020: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000025: E8 00 00 00 00     call        ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
  000000000000002A: 48 8B C8           mov         rcx,rax
  000000000000002D: E8 00 00 00 00     call        ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
  0000000000000032: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000037: 48 C7 44 24 40 10  mov         qword ptr [rsp+40h],10h
                    00 00 00
  0000000000000040: 48 8D 54 24 40     lea         rdx,[rsp+40h]
  0000000000000045: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  000000000000004A: E8 00 00 00 00     call        ??$max@_K@std@@YAAEB_KAEB_K0@Z
  000000000000004F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000052: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000057: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000005C: 48 FF C8           dec         rax
  000000000000005F: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000064: E8 00 00 00 00     call        ??$_Max_limit@_J@std@@YA_JXZ
  0000000000000069: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  000000000000006E: 48 8D 54 24 48     lea         rdx,[rsp+48h]
  0000000000000073: 48 8D 4C 24 50     lea         rcx,[rsp+50h]
  0000000000000078: E8 00 00 00 00     call        ??$min@_K@std@@YAAEB_KAEB_K0@Z
  000000000000007D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000080: 48 8B F8           mov         rdi,rax
  0000000000000083: 48 8B CC           mov         rcx,rsp
  0000000000000086: 48 8D 15 00 00 00  lea         rdx,[?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData]
                    00
  000000000000008D: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000092: 48 8B C7           mov         rax,rdi
  0000000000000095: 48 83 C4 60        add         rsp,60h
  0000000000000099: 5F                 pop         rdi
  000000000000009A: C3                 ret

?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z (public: static char * __cdecl std::_Char_traits<char,int>::move(char * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 40        sub         rsp,40h
  0000000000000014: E8 00 00 00 00     call        ?is_constant_evaluated@std@@YA_NXZ
  0000000000000019: 0F B6 C0           movzx       eax,al
  000000000000001C: 85 C0              test        eax,eax
  000000000000001E: 0F 84 F1 00 00 00  je          0000000000000115
  0000000000000024: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  0000000000000029: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000002E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000033: EB 0D              jmp         0000000000000042
  0000000000000035: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000003A: 48 FF C0           inc         rax
  000000000000003D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000042: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000047: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000004C: 48 03 C8           add         rcx,rax
  000000000000004F: 48 8B C1           mov         rax,rcx
  0000000000000052: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  0000000000000057: 74 15              je          000000000000006E
  0000000000000059: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000005E: 48 39 44 24 50     cmp         qword ptr [rsp+50h],rax
  0000000000000063: 75 07              jne         000000000000006C
  0000000000000065: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000006A: EB 02              jmp         000000000000006E
  000000000000006C: EB C7              jmp         0000000000000035
  000000000000006E: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000073: 85 C0              test        eax,eax
  0000000000000075: 74 4D              je          00000000000000C4
  0000000000000077: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000080: EB 0D              jmp         000000000000008F
  0000000000000082: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000087: 48 FF C0           inc         rax
  000000000000008A: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000008F: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000094: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  0000000000000099: 74 27              je          00000000000000C2
  000000000000009B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000A0: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000A5: 48 03 C8           add         rcx,rax
  00000000000000A8: 48 8B C1           mov         rax,rcx
  00000000000000AB: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000B0: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  00000000000000B5: 48 03 D1           add         rdx,rcx
  00000000000000B8: 48 8B CA           mov         rcx,rdx
  00000000000000BB: 0F B6 09           movzx       ecx,byte ptr [rcx]
  00000000000000BE: 88 08              mov         byte ptr [rax],cl
  00000000000000C0: EB C0              jmp         0000000000000082
  00000000000000C2: EB 4A              jmp         000000000000010E
  00000000000000C4: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000C9: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000CE: EB 0D              jmp         00000000000000DD
  00000000000000D0: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000D5: 48 FF C8           dec         rax
  00000000000000D8: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000DD: 48 83 7C 24 38 00  cmp         qword ptr [rsp+38h],0
  00000000000000E3: 74 29              je          000000000000010E
  00000000000000E5: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000EA: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000EF: 48 03 C8           add         rcx,rax
  00000000000000F2: 48 8B C1           mov         rax,rcx
  00000000000000F5: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000FA: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  00000000000000FF: 48 03 D1           add         rdx,rcx
  0000000000000102: 48 8B CA           mov         rcx,rdx
  0000000000000105: 0F B6 49 FF        movzx       ecx,byte ptr [rcx-1]
  0000000000000109: 88 48 FF           mov         byte ptr [rax-1],cl
  000000000000010C: EB C2              jmp         00000000000000D0
  000000000000010E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000113: EB 19              jmp         000000000000012E
  0000000000000115: 4C 8B 44 24 60     mov         r8,qword ptr [rsp+60h]
  000000000000011A: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  000000000000011F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000124: E8 00 00 00 00     call        memmove
  0000000000000129: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000012E: 48 83 C4 40        add         rsp,40h
  0000000000000132: 5F                 pop         rdi
  0000000000000133: C3                 ret

?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z (public: static int __cdecl std::_Narrow_char_traits<char,int>::not_eof(int)):
  0000000000000000: 89 4C 24 08        mov         dword ptr [rsp+8],ecx
  0000000000000004: 57                 push        rdi
  0000000000000005: 48 83 EC 30        sub         rsp,30h
  0000000000000009: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000000E: 39 44 24 40        cmp         dword ptr [rsp+40h],eax
  0000000000000012: 74 0A              je          000000000000001E
  0000000000000014: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  0000000000000018: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000001C: EB 23              jmp         0000000000000041
  000000000000001E: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000023: 85 C0              test        eax,eax
  0000000000000025: 75 0A              jne         0000000000000031
  0000000000000027: C7 44 24 24 01 00  mov         dword ptr [rsp+24h],1
                    00 00
  000000000000002F: EB 08              jmp         0000000000000039
  0000000000000031: C7 44 24 24 00 00  mov         dword ptr [rsp+24h],0
                    00 00
  0000000000000039: 8B 44 24 24        mov         eax,dword ptr [rsp+24h]
  000000000000003D: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000041: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000045: 48 83 C4 30        add         rsp,30h
  0000000000000049: 5F                 pop         rdi
  000000000000004A: C3                 ret

?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ (public: static class std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > > __cdecl std::chrono::steady_clock::now(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 81 EC A0 00 00  sub         rsp,0A0h
                    00
  000000000000000D: E8 00 00 00 00     call        _Query_perf_frequency
  0000000000000012: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000017: E8 00 00 00 00     call        _Query_perf_counter
  000000000000001C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000021: 48 C7 44 24 30 80  mov         qword ptr [rsp+30h],989680h
                    96 98 00
  000000000000002A: 48 C7 44 24 38 00  mov         qword ptr [rsp+38h],16E3600h
                    36 6E 01
  0000000000000033: 48 81 7C 24 20 80  cmp         qword ptr [rsp+20h],989680h
                    96 98 00
  000000000000003C: 75 46              jne         0000000000000084
  000000000000003E: 48 C7 44 24 40 64  mov         qword ptr [rsp+40h],64h
                    00 00 00
  0000000000000047: 48 6B 44 24 28 64  imul        rax,qword ptr [rsp+28h],64h
  000000000000004D: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000052: 48 8D 54 24 70     lea         rdx,[rsp+70h]
  0000000000000057: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  000000000000005C: E8 00 00 00 00     call        ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
  0000000000000061: 48 8B D0           mov         rdx,rax
  0000000000000064: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  000000000000006C: E8 00 00 00 00     call        ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
  0000000000000071: 90                 nop
  0000000000000072: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000007A: E9 24 01 00 00     jmp         00000000000001A3
  000000000000007F: E9 1F 01 00 00     jmp         00000000000001A3
  0000000000000084: 48 81 7C 24 20 00  cmp         qword ptr [rsp+20h],16E3600h
                    36 6E 01
  000000000000008D: 0F 85 90 00 00 00  jne         0000000000000123
  0000000000000093: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000098: 48 99              cqo
  000000000000009A: B9 00 36 6E 01     mov         ecx,16E3600h
  000000000000009F: 48 F7 F9           idiv        rax,rcx
  00000000000000A2: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  00000000000000A9: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000AE: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000B3: 48 99              cqo
  00000000000000B5: B9 00 36 6E 01     mov         ecx,16E3600h
  00000000000000BA: 48 F7 F9           idiv        rax,rcx
  00000000000000BD: 48 8B C2           mov         rax,rdx
  00000000000000C0: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  00000000000000C7: 48 99              cqo
  00000000000000C9: B9 00 36 6E 01     mov         ecx,16E3600h
  00000000000000CE: 48 F7 F9           idiv        rax,rcx
  00000000000000D1: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000D6: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000DB: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000E0: 48 03 C8           add         rcx,rax
  00000000000000E3: 48 8B C1           mov         rax,rcx
  00000000000000E6: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  00000000000000EE: 48 8D 94 24 80 00  lea         rdx,[rsp+80h]
                    00 00
  00000000000000F6: 48 8D 4C 24 78     lea         rcx,[rsp+78h]
  00000000000000FB: E8 00 00 00 00     call        ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
  0000000000000100: 48 8B D0           mov         rdx,rax
  0000000000000103: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  000000000000010B: E8 00 00 00 00     call        ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
  0000000000000110: 90                 nop
  0000000000000111: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000119: E9 85 00 00 00     jmp         00000000000001A3
  000000000000011E: E9 80 00 00 00     jmp         00000000000001A3
  0000000000000123: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000128: 48 99              cqo
  000000000000012A: 48 F7 7C 24 20     idiv        rax,qword ptr [rsp+20h]
  000000000000012F: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  0000000000000136: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  000000000000013B: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000140: 48 99              cqo
  0000000000000142: 48 F7 7C 24 20     idiv        rax,qword ptr [rsp+20h]
  0000000000000147: 48 8B C2           mov         rax,rdx
  000000000000014A: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  0000000000000151: 48 99              cqo
  0000000000000153: 48 F7 7C 24 20     idiv        rax,qword ptr [rsp+20h]
  0000000000000158: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000015D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000162: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000167: 48 03 C8           add         rcx,rax
  000000000000016A: 48 8B C1           mov         rax,rcx
  000000000000016D: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000175: 48 8D 94 24 90 00  lea         rdx,[rsp+90h]
                    00 00
  000000000000017D: 48 8D 8C 24 88 00  lea         rcx,[rsp+88h]
                    00 00
  0000000000000185: E8 00 00 00 00     call        ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
  000000000000018A: 48 8B D0           mov         rdx,rax
  000000000000018D: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  0000000000000195: E8 00 00 00 00     call        ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
  000000000000019A: 90                 nop
  000000000000019B: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000001A3: 48 81 C4 A0 00 00  add         rsp,0A0h
                    00
  00000000000001AA: 5F                 pop         rdi
  00000000000001AB: C3                 ret

?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::open(char const *,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 50        sub         rsp,50h
  0000000000000019: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000001E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000026: 74 07              je          000000000000002F
  0000000000000028: 33 C0              xor         eax,eax
  000000000000002A: E9 81 00 00 00     jmp         00000000000000B0
  000000000000002F: 44 8B 44 24 78     mov         r8d,dword ptr [rsp+78h]
  0000000000000034: 8B 54 24 70        mov         edx,dword ptr [rsp+70h]
  0000000000000038: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000003D: E8 00 00 00 00     call        ?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z
  0000000000000042: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000047: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  000000000000004D: 75 04              jne         0000000000000053
  000000000000004F: 33 C0              xor         eax,eax
  0000000000000051: EB 5D              jmp         00000000000000B0
  0000000000000053: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000059: 48 8B 54 24 20     mov         rdx,qword ptr [rsp+20h]
  000000000000005E: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000063: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000068: 90                 nop
  0000000000000069: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  000000000000006E: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000073: FF 15 00 00 00 00  call        qword ptr [__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ]
  0000000000000079: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000007E: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000083: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000088: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000008D: E8 00 00 00 00     call        ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
  0000000000000092: 48 8B D0           mov         rdx,rax
  0000000000000095: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000009A: E8 00 00 00 00     call        ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
  000000000000009F: 90                 nop
  00000000000000A0: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  00000000000000A5: E8 00 00 00 00     call        ??1locale@std@@QEAA@XZ
  00000000000000AA: 90                 nop
  00000000000000AB: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000B0: 48 83 C4 50        add         rsp,50h
  00000000000000B4: 5F                 pop         rdi
  00000000000000B5: C3                 ret

?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA (int `public: class basic_filebuf<char,struct std::char_traits<char> >::open * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::open(char const *,int,int)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 28        lea         rcx,[rbp+28h]
  0000000000000017: E8 00 00 00 00     call        ??1locale@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::overflow(int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 81 EC 30 01 00  sub         rsp,130h
                    00
  0000000000000011: 48 8D 7C 24 40     lea         rdi,[rsp+40h]
  0000000000000016: B9 3C 00 00 00     mov         ecx,3Ch
  000000000000001B: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000020: F3 AB              rep stos    dword ptr [rdi]
  0000000000000022: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  000000000000002A: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  0000000000000031: 48 33 C4           xor         rax,rsp
  0000000000000034: 48 89 84 24 28 01  mov         qword ptr [rsp+128h],rax
                    00 00
  000000000000003C: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000041: 8B 94 24 48 01 00  mov         edx,dword ptr [rsp+148h]
                    00
  0000000000000048: 8B C8              mov         ecx,eax
  000000000000004A: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  000000000000004F: 0F B6 C0           movzx       eax,al
  0000000000000052: 85 C0              test        eax,eax
  0000000000000054: 74 11              je          0000000000000067
  0000000000000056: 8B 8C 24 48 01 00  mov         ecx,dword ptr [rsp+148h]
                    00
  000000000000005D: E8 00 00 00 00     call        ?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z
  0000000000000062: E9 B4 02 00 00     jmp         000000000000031B
  0000000000000067: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  000000000000006F: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000075: 48 85 C0           test        rax,rax
  0000000000000078: 74 68              je          00000000000000E2
  000000000000007A: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  0000000000000082: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000088: 48 89 84 24 F8 00  mov         qword ptr [rsp+0F8h],rax
                    00 00
  0000000000000090: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  0000000000000098: FF 15 00 00 00 00  call        qword ptr [__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000009E: 48 8B 8C 24 F8 00  mov         rcx,qword ptr [rsp+0F8h]
                    00 00
  00000000000000A6: 48 3B C8           cmp         rcx,rax
  00000000000000A9: 73 37              jae         00000000000000E2
  00000000000000AB: 8B 8C 24 48 01 00  mov         ecx,dword ptr [rsp+148h]
                    00
  00000000000000B2: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  00000000000000B7: 88 84 24 00 01 00  mov         byte ptr [rsp+100h],al
                    00
  00000000000000BE: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  00000000000000C6: FF 15 00 00 00 00  call        qword ptr [__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  00000000000000CC: 0F B6 8C 24 00 01  movzx       ecx,byte ptr [rsp+100h]
                    00 00
  00000000000000D4: 88 08              mov         byte ptr [rax],cl
  00000000000000D6: 8B 84 24 48 01 00  mov         eax,dword ptr [rsp+148h]
                    00
  00000000000000DD: E9 39 02 00 00     jmp         000000000000031B
  00000000000000E2: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  00000000000000EA: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  00000000000000F2: 75 0A              jne         00000000000000FE
  00000000000000F4: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000000F9: E9 1D 02 00 00     jmp         000000000000031B
  00000000000000FE: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  0000000000000106: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  000000000000010B: 90                 nop
  000000000000010C: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  0000000000000114: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  0000000000000119: 75 6E              jne         0000000000000189
  000000000000011B: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  0000000000000123: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  000000000000012A: 48 89 84 24 08 01  mov         qword ptr [rsp+108h],rax
                    00 00
  0000000000000132: 8B 8C 24 48 01 00  mov         ecx,dword ptr [rsp+148h]
                    00
  0000000000000139: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  000000000000013E: 88 84 24 10 01 00  mov         byte ptr [rsp+110h],al
                    00
  0000000000000145: 48 8B 94 24 08 01  mov         rdx,qword ptr [rsp+108h]
                    00 00
  000000000000014D: 0F B6 8C 24 10 01  movzx       ecx,byte ptr [rsp+110h]
                    00 00
  0000000000000155: E8 00 00 00 00     call        ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
  000000000000015A: 0F B6 C0           movzx       eax,al
  000000000000015D: 85 C0              test        eax,eax
  000000000000015F: 74 10              je          0000000000000171
  0000000000000161: 8B 84 24 48 01 00  mov         eax,dword ptr [rsp+148h]
                    00
  0000000000000168: 89 84 24 14 01 00  mov         dword ptr [rsp+114h],eax
                    00
  000000000000016F: EB 0C              jmp         000000000000017D
  0000000000000171: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000176: 89 84 24 14 01 00  mov         dword ptr [rsp+114h],eax
                    00
  000000000000017D: 8B 84 24 14 01 00  mov         eax,dword ptr [rsp+114h]
                    00
  0000000000000184: E9 92 01 00 00     jmp         000000000000031B
  0000000000000189: 48 C7 44 24 40 20  mov         qword ptr [rsp+40h],20h
                    00 00 00
  0000000000000192: 8B 8C 24 48 01 00  mov         ecx,dword ptr [rsp+148h]
                    00
  0000000000000199: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  000000000000019E: 88 84 24 94 00 00  mov         byte ptr [rsp+94h],al
                    00
  00000000000001A5: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  00000000000001AD: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  00000000000001B1: 48 89 84 24 18 01  mov         qword ptr [rsp+118h],rax
                    00 00
  00000000000001B9: 48 8D 44 24 78     lea         rax,[rsp+78h]
  00000000000001BE: 48 8D 8C 24 95 00  lea         rcx,[rsp+95h]
                    00 00
  00000000000001C6: 48 8B 94 24 40 01  mov         rdx,qword ptr [rsp+140h]
                    00 00
  00000000000001CE: 48 83 C2 74        add         rdx,74h
  00000000000001D2: 4C 8D 84 24 D8 00  lea         r8,[rsp+0D8h]
                    00 00
  00000000000001DA: 4C 89 44 24 38     mov         qword ptr [rsp+38h],r8
  00000000000001DF: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000001E4: 48 8D 44 24 58     lea         rax,[rsp+58h]
  00000000000001E9: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000001EE: 48 8D 84 24 B8 00  lea         rax,[rsp+0B8h]
                    00 00
  00000000000001F6: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000001FB: 4C 8B C9           mov         r9,rcx
  00000000000001FE: 4C 8D 84 24 94 00  lea         r8,[rsp+94h]
                    00 00
  0000000000000206: 48 8B 8C 24 18 01  mov         rcx,qword ptr [rsp+118h]
                    00 00
  000000000000020E: FF 15 00 00 00 00  call        qword ptr [__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z]
  0000000000000214: 89 84 24 20 01 00  mov         dword ptr [rsp+120h],eax
                    00
  000000000000021B: 83 BC 24 20 01 00  cmp         dword ptr [rsp+120h],0
                    00 00
  0000000000000223: 74 1D              je          0000000000000242
  0000000000000225: 83 BC 24 20 01 00  cmp         dword ptr [rsp+120h],1
                    00 01
  000000000000022D: 74 13              je          0000000000000242
  000000000000022F: 83 BC 24 20 01 00  cmp         dword ptr [rsp+120h],3
                    00 03
  0000000000000237: 0F 84 91 00 00 00  je          00000000000002CE
  000000000000023D: E9 D4 00 00 00     jmp         0000000000000316
  0000000000000242: 48 8D 44 24 58     lea         rax,[rsp+58h]
  0000000000000247: 48 8B 8C 24 D8 00  mov         rcx,qword ptr [rsp+0D8h]
                    00 00
  000000000000024F: 48 2B C8           sub         rcx,rax
  0000000000000252: 48 8B C1           mov         rax,rcx
  0000000000000255: 48 89 84 24 E8 00  mov         qword ptr [rsp+0E8h],rax
                    00 00
  000000000000025D: 48 83 BC 24 E8 00  cmp         qword ptr [rsp+0E8h],0
                    00 00 00
  0000000000000266: 76 38              jbe         00000000000002A0
  0000000000000268: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  0000000000000270: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  0000000000000277: 4C 8B 84 24 E8 00  mov         r8,qword ptr [rsp+0E8h]
                    00 00
  000000000000027F: BA 01 00 00 00     mov         edx,1
  0000000000000284: 48 8D 4C 24 58     lea         rcx,[rsp+58h]
  0000000000000289: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  000000000000028F: 48 39 84 24 E8 00  cmp         qword ptr [rsp+0E8h],rax
                    00 00
  0000000000000297: 74 07              je          00000000000002A0
  0000000000000299: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000029E: EB 7B              jmp         000000000000031B
  00000000000002A0: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  00000000000002A8: C6 40 71 01        mov         byte ptr [rax+71h],1
  00000000000002AC: 48 8D 84 24 94 00  lea         rax,[rsp+94h]
                    00 00
  00000000000002B4: 48 39 84 24 B8 00  cmp         qword ptr [rsp+0B8h],rax
                    00 00
  00000000000002BC: 74 09              je          00000000000002C7
  00000000000002BE: 8B 84 24 48 01 00  mov         eax,dword ptr [rsp+148h]
                    00
  00000000000002C5: EB 54              jmp         000000000000031B
  00000000000002C7: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000002CC: EB 4D              jmp         000000000000031B
  00000000000002CE: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  00000000000002D6: 48 8B 90 80 00 00  mov         rdx,qword ptr [rax+80h]
                    00
  00000000000002DD: 0F B6 8C 24 94 00  movzx       ecx,byte ptr [rsp+94h]
                    00 00
  00000000000002E5: E8 00 00 00 00     call        ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
  00000000000002EA: 0F B6 C0           movzx       eax,al
  00000000000002ED: 85 C0              test        eax,eax
  00000000000002EF: 74 10              je          0000000000000301
  00000000000002F1: 8B 84 24 48 01 00  mov         eax,dword ptr [rsp+148h]
                    00
  00000000000002F8: 89 84 24 24 01 00  mov         dword ptr [rsp+124h],eax
                    00
  00000000000002FF: EB 0C              jmp         000000000000030D
  0000000000000301: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000306: 89 84 24 24 01 00  mov         dword ptr [rsp+124h],eax
                    00
  000000000000030D: 8B 84 24 24 01 00  mov         eax,dword ptr [rsp+124h]
                    00
  0000000000000314: EB 05              jmp         000000000000031B
  0000000000000316: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000031B: 48 8B F8           mov         rdi,rax
  000000000000031E: 48 8B CC           mov         rcx,rsp
  0000000000000321: 48 8D 15 00 00 00  lea         rdx,[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData]
                    00
  0000000000000328: E8 00 00 00 00     call        _RTC_CheckStackVars
  000000000000032D: 48 8B C7           mov         rax,rdi
  0000000000000330: 48 8B 8C 24 28 01  mov         rcx,qword ptr [rsp+128h]
                    00 00
  0000000000000338: 48 33 CC           xor         rcx,rsp
  000000000000033B: E8 00 00 00 00     call        __security_check_cookie
  0000000000000340: 48 81 C4 30 01 00  add         rsp,130h
                    00
  0000000000000347: 5F                 pop         rdi
  0000000000000348: C3                 ret

?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::pbackfail(int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 40        sub         rsp,40h
  000000000000000E: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000013: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000019: 48 85 C0           test        rax,rax
  000000000000001C: 0F 84 89 00 00 00  je          00000000000000AB
  0000000000000022: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000027: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000002D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000032: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000037: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000003D: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000042: 48 3B C8           cmp         rcx,rax
  0000000000000045: 73 64              jae         00000000000000AB
  0000000000000047: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000004C: 8B 54 24 58        mov         edx,dword ptr [rsp+58h]
  0000000000000050: 8B C8              mov         ecx,eax
  0000000000000052: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  0000000000000057: 0F B6 C0           movzx       eax,al
  000000000000005A: 85 C0              test        eax,eax
  000000000000005C: 75 2F              jne         000000000000008D
  000000000000005E: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000063: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000069: B9 01 00 00 00     mov         ecx,1
  000000000000006E: 48 6B C9 FF        imul        rcx,rcx,0FFFFFFFFFFFFFFFFh
  0000000000000072: 0F B6 0C 08        movzx       ecx,byte ptr [rax+rcx]
  0000000000000076: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  000000000000007B: 8B 54 24 58        mov         edx,dword ptr [rsp+58h]
  000000000000007F: 8B C8              mov         ecx,eax
  0000000000000081: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  0000000000000086: 0F B6 C0           movzx       eax,al
  0000000000000089: 85 C0              test        eax,eax
  000000000000008B: 74 1E              je          00000000000000AB
  000000000000008D: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000092: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  0000000000000098: 8B 4C 24 58        mov         ecx,dword ptr [rsp+58h]
  000000000000009C: E8 00 00 00 00     call        ?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z
  00000000000000A1: E9 C3 00 00 00     jmp         0000000000000169
  00000000000000A6: E9 BE 00 00 00     jmp         0000000000000169
  00000000000000AB: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000B0: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  00000000000000B8: 74 17              je          00000000000000D1
  00000000000000BA: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000000BF: 8B 54 24 58        mov         edx,dword ptr [rsp+58h]
  00000000000000C3: 8B C8              mov         ecx,eax
  00000000000000C5: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  00000000000000CA: 0F B6 C0           movzx       eax,al
  00000000000000CD: 85 C0              test        eax,eax
  00000000000000CF: 74 0F              je          00000000000000E0
  00000000000000D1: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000000D6: E9 8E 00 00 00     jmp         0000000000000169
  00000000000000DB: E9 89 00 00 00     jmp         0000000000000169
  00000000000000E0: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000E5: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  00000000000000EA: 75 3C              jne         0000000000000128
  00000000000000EC: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000F1: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  00000000000000F8: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000FD: 8B 4C 24 58        mov         ecx,dword ptr [rsp+58h]
  0000000000000101: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  0000000000000106: 88 44 24 20        mov         byte ptr [rsp+20h],al
  000000000000010A: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  000000000000010F: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  0000000000000114: E8 00 00 00 00     call        ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
  0000000000000119: 0F B6 C0           movzx       eax,al
  000000000000011C: 85 C0              test        eax,eax
  000000000000011E: 74 08              je          0000000000000128
  0000000000000120: 8B 44 24 58        mov         eax,dword ptr [rsp+58h]
  0000000000000124: EB 43              jmp         0000000000000169
  0000000000000126: EB 41              jmp         0000000000000169
  0000000000000128: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000012D: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000133: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000138: 48 83 C1 70        add         rcx,70h
  000000000000013C: 48 3B C1           cmp         rax,rcx
  000000000000013F: 74 23              je          0000000000000164
  0000000000000141: 8B 4C 24 58        mov         ecx,dword ptr [rsp+58h]
  0000000000000145: E8 00 00 00 00     call        ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
  000000000000014A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000014F: 88 41 70           mov         byte ptr [rcx+70h],al
  0000000000000152: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000157: E8 00 00 00 00     call        ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  000000000000015C: 8B 44 24 58        mov         eax,dword ptr [rsp+58h]
  0000000000000160: EB 07              jmp         0000000000000169
  0000000000000162: EB 05              jmp         0000000000000169
  0000000000000164: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000169: 48 83 C4 40        add         rsp,40h
  000000000000016D: 5F                 pop         rdi
  000000000000016E: C3                 ret

?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z (public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)):
  0000000000000000: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 40        sub         rsp,40h
  000000000000000E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000013: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000017: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001C: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000021: 48 8B 40 20        mov         rax,qword ptr [rax+20h]
  0000000000000025: 48 39 44 24 20     cmp         qword ptr [rsp+20h],rax
  000000000000002A: 73 65              jae         0000000000000091
  000000000000002C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000031: 48 FF C0           inc         rax
  0000000000000034: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000039: 48 89 41 18        mov         qword ptr [rcx+18h],rax
  000000000000003D: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000042: 48 8B C8           mov         rcx,rax
  0000000000000045: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  000000000000004A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000004F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000054: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000059: 48 03 C8           add         rcx,rax
  000000000000005C: 48 8B C1           mov         rax,rcx
  000000000000005F: 48 8D 54 24 58     lea         rdx,[rsp+58h]
  0000000000000064: 48 8B C8           mov         rcx,rax
  0000000000000067: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  000000000000006C: 90                 nop
  000000000000006D: C6 44 24 30 00     mov         byte ptr [rsp+30h],0
  0000000000000072: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000077: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000007C: 48 8D 44 08 01     lea         rax,[rax+rcx+1]
  0000000000000081: 48 8D 54 24 30     lea         rdx,[rsp+30h]
  0000000000000086: 48 8B C8           mov         rcx,rax
  0000000000000089: E8 00 00 00 00     call        ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
  000000000000008E: 90                 nop
  000000000000008F: EB 1C              jmp         00000000000000AD
  0000000000000091: 44 0F B6 4C 24 58  movzx       r9d,byte ptr [rsp+58h]
  0000000000000097: 44 0F B6 44 24 31  movzx       r8d,byte ptr [rsp+31h]
  000000000000009D: BA 01 00 00 00     mov         edx,1
  00000000000000A2: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000A7: E8 00 00 00 00     call        ??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z
  00000000000000AC: 90                 nop
  00000000000000AD: 48 83 C4 40        add         rsp,40h
  00000000000000B1: 5F                 pop         rdi
  00000000000000B2: C3                 ret

?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ (public: class std::_Facet_base * __cdecl std::unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >::release(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 30        sub         rsp,30h
  000000000000000A: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000013: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000018: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  000000000000001D: 48 8B C8           mov         rcx,rax
  0000000000000020: E8 00 00 00 00     call        ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
  0000000000000025: 48 83 C4 30        add         rsp,30h
  0000000000000029: 5F                 pop         rdi
  000000000000002A: C3                 ret

?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z (protected: virtual class std::fpos<struct _Mbstatet> __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::seekoff(__int64,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 40        sub         rsp,40h
  0000000000000019: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001E: B9 08 00 00 00     mov         ecx,8
  0000000000000023: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000028: F3 AB              rep stos    dword ptr [rdi]
  000000000000002A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000002F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000034: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000003A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000003F: 48 83 C1 70        add         rcx,70h
  0000000000000043: 48 3B C1           cmp         rax,rcx
  0000000000000046: 75 20              jne         0000000000000068
  0000000000000048: 83 7C 24 68 01     cmp         dword ptr [rsp+68h],1
  000000000000004D: 75 19              jne         0000000000000068
  000000000000004F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000054: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  0000000000000059: 75 0D              jne         0000000000000068
  000000000000005B: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000060: 48 FF C8           dec         rax
  0000000000000063: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000068: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000006D: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000075: 74 5B              je          00000000000000D2
  0000000000000077: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000007C: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  0000000000000081: 0F B6 C0           movzx       eax,al
  0000000000000084: 85 C0              test        eax,eax
  0000000000000086: 74 4A              je          00000000000000D2
  0000000000000088: 48 83 7C 24 60 00  cmp         qword ptr [rsp+60h],0
  000000000000008E: 75 07              jne         0000000000000097
  0000000000000090: 83 7C 24 68 01     cmp         dword ptr [rsp+68h],1
  0000000000000095: 74 20              je          00000000000000B7
  0000000000000097: 44 8B 44 24 68     mov         r8d,dword ptr [rsp+68h]
  000000000000009C: 48 8B 54 24 60     mov         rdx,qword ptr [rsp+60h]
  00000000000000A1: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000A6: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  00000000000000AD: FF 15 00 00 00 00  call        qword ptr [__imp__fseeki64]
  00000000000000B3: 85 C0              test        eax,eax
  00000000000000B5: 75 1B              jne         00000000000000D2
  00000000000000B7: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  00000000000000BC: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000C1: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  00000000000000C8: FF 15 00 00 00 00  call        qword ptr [__imp_fgetpos]
  00000000000000CE: 85 C0              test        eax,eax
  00000000000000D0: 74 18              je          00000000000000EA
  00000000000000D2: 48 C7 C2 FF FF FF  mov         rdx,0FFFFFFFFFFFFFFFFh
                    FF
  00000000000000D9: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000DE: E8 00 00 00 00     call        ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
  00000000000000E3: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000E8: EB 27              jmp         0000000000000111
  00000000000000EA: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000EF: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000F4: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  00000000000000F9: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000FE: 48 8B 50 74        mov         rdx,qword ptr [rax+74h]
  0000000000000102: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000107: E8 00 00 00 00     call        ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
  000000000000010C: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000111: 48 8B F8           mov         rdi,rax
  0000000000000114: 48 8B CC           mov         rcx,rsp
  0000000000000117: 48 8D 15 00 00 00  lea         rdx,[?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData]
                    00
  000000000000011E: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000123: 48 8B C7           mov         rax,rdi
  0000000000000126: 48 83 C4 40        add         rsp,40h
  000000000000012A: 5F                 pop         rdi
  000000000000012B: C3                 ret

?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z (protected: virtual class std::fpos<struct _Mbstatet> __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::seekpos(class std::fpos<struct _Mbstatet>,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 40        sub         rsp,40h
  0000000000000019: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001E: B9 08 00 00 00     mov         ecx,8
  0000000000000023: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000028: F3 AB              rep stos    dword ptr [rdi]
  000000000000002A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000002F: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000034: E8 00 00 00 00     call        ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
  0000000000000039: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000003E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000043: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  000000000000004B: 74 2C              je          0000000000000079
  000000000000004D: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000052: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  0000000000000057: 0F B6 C0           movzx       eax,al
  000000000000005A: 85 C0              test        eax,eax
  000000000000005C: 74 1B              je          0000000000000079
  000000000000005E: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  0000000000000063: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000068: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  000000000000006F: FF 15 00 00 00 00  call        qword ptr [__imp_fsetpos]
  0000000000000075: 85 C0              test        eax,eax
  0000000000000077: 74 18              je          0000000000000091
  0000000000000079: 48 C7 C2 FF FF FF  mov         rdx,0FFFFFFFFFFFFFFFFh
                    FF
  0000000000000080: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000085: E8 00 00 00 00     call        ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
  000000000000008A: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000008F: EB 42              jmp         00000000000000D3
  0000000000000091: 48 8D 54 24 34     lea         rdx,[rsp+34h]
  0000000000000096: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000009B: E8 00 00 00 00     call        ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
  00000000000000A0: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A3: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000A8: 48 89 41 74        mov         qword ptr [rcx+74h],rax
  00000000000000AC: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000B1: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000B6: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  00000000000000BB: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000C0: 48 8B 50 74        mov         rdx,qword ptr [rax+74h]
  00000000000000C4: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000C9: E8 00 00 00 00     call        ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
  00000000000000CE: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000D3: 48 8B F8           mov         rdi,rax
  00000000000000D6: 48 8B CC           mov         rcx,rsp
  00000000000000D9: 48 8D 15 00 00 00  lea         rdx,[?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData]
                    00
  00000000000000E0: E8 00 00 00 00     call        _RTC_CheckStackVars
  00000000000000E5: 48 8B C7           mov         rax,rdi
  00000000000000E8: 48 83 C4 40        add         rsp,40h
  00000000000000EC: 5F                 pop         rdi
  00000000000000ED: C3                 ret

?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z (protected: virtual class std::basic_streambuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::setbuf(char *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  000000000000001A: 75 12              jne         000000000000002E
  000000000000001C: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  0000000000000022: 75 0A              jne         000000000000002E
  0000000000000024: C7 44 24 20 04 00  mov         dword ptr [rsp+20h],4
                    00 00
  000000000000002C: EB 08              jmp         0000000000000036
  000000000000002E: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000036: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003B: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000040: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000045: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  000000000000004D: 74 25              je          0000000000000074
  000000000000004F: 4C 8B 4C 24 28     mov         r9,qword ptr [rsp+28h]
  0000000000000054: 44 8B 44 24 20     mov         r8d,dword ptr [rsp+20h]
  0000000000000059: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000005E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000063: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  000000000000006A: FF 15 00 00 00 00  call        qword ptr [__imp_setvbuf]
  0000000000000070: 85 C0              test        eax,eax
  0000000000000072: 74 04              je          0000000000000078
  0000000000000074: 33 C0              xor         eax,eax
  0000000000000076: EB 21              jmp         0000000000000099
  0000000000000078: 41 B8 01 00 00 00  mov         r8d,1
  000000000000007E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000083: 48 8B 90 80 00 00  mov         rdx,qword ptr [rax+80h]
                    00
  000000000000008A: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000008F: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000094: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000099: 48 83 C4 30        add         rsp,30h
  000000000000009D: 5F                 pop         rdi
  000000000000009E: C3                 ret

?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000000F: 5F                 pop         rdi
  0000000000000010: C3                 ret

?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ (public: struct _Mbstatet __cdecl std::fpos<struct _Mbstatet>::state(void)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000014: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000019: 48 89 01           mov         qword ptr [rcx],rax
  000000000000001C: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000021: 5F                 pop         rdi
  0000000000000022: C3                 ret

?sum_array@@YA_JPEAHH@Z (__int64 __cdecl sum_array(int *,int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 10        sub         rsp,10h
  000000000000000E: 48 C7 04 24 00 00  mov         qword ptr [rsp],0
                    00 00
  0000000000000016: C7 44 24 08 00 00  mov         dword ptr [rsp+8],0
                    00 00
  000000000000001E: EB 0A              jmp         000000000000002A
  0000000000000020: 8B 44 24 08        mov         eax,dword ptr [rsp+8]
  0000000000000024: FF C0              inc         eax
  0000000000000026: 89 44 24 08        mov         dword ptr [rsp+8],eax
  000000000000002A: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  000000000000002E: 39 44 24 08        cmp         dword ptr [rsp+8],eax
  0000000000000032: 7D 1E              jge         0000000000000052
  0000000000000034: 48 63 44 24 08     movsxd      rax,dword ptr [rsp+8]
  0000000000000039: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000003E: 48 63 04 81        movsxd      rax,dword ptr [rcx+rax*4]
  0000000000000042: 48 8B 0C 24        mov         rcx,qword ptr [rsp]
  0000000000000046: 48 03 C8           add         rcx,rax
  0000000000000049: 48 8B C1           mov         rax,rcx
  000000000000004C: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000050: EB CE              jmp         0000000000000020
  0000000000000052: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000056: 48 83 C4 10        add         rsp,10h
  000000000000005A: 5F                 pop         rdi
  000000000000005B: C3                 ret

?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::sync(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000000F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000017: 74 5E              je          0000000000000077
  0000000000000019: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000001E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000021: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000025: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002A: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  000000000000002F: 89 44 24 28        mov         dword ptr [rsp+28h],eax
  0000000000000033: 8B 54 24 28        mov         edx,dword ptr [rsp+28h]
  0000000000000037: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000003C: FF 54 24 20        call        qword ptr [rsp+20h]
  0000000000000040: 89 44 24 2C        mov         dword ptr [rsp+2Ch],eax
  0000000000000044: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000049: 89 44 24 30        mov         dword ptr [rsp+30h],eax
  000000000000004D: 8B 54 24 2C        mov         edx,dword ptr [rsp+2Ch]
  0000000000000051: 8B 4C 24 30        mov         ecx,dword ptr [rsp+30h]
  0000000000000055: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  000000000000005A: 0F B6 C0           movzx       eax,al
  000000000000005D: 85 C0              test        eax,eax
  000000000000005F: 75 16              jne         0000000000000077
  0000000000000061: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000066: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  000000000000006D: FF 15 00 00 00 00  call        qword ptr [__imp_fflush]
  0000000000000073: 85 C0              test        eax,eax
  0000000000000075: 7C 04              jl          000000000000007B
  0000000000000077: 33 C0              xor         eax,eax
  0000000000000079: EB 05              jmp         0000000000000080
  000000000000007B: B8 FF FF FF FF     mov         eax,0FFFFFFFFh
  0000000000000080: 48 83 C4 40        add         rsp,40h
  0000000000000084: 5F                 pop         rdi
  0000000000000085: C3                 ret

?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ (public: class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > __cdecl std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > >::time_since_epoch(void)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000010: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000013: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000018: 48 89 01           mov         qword ptr [rcx],rax
  000000000000001B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000020: 5F                 pop         rdi
  0000000000000021: C3                 ret

?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z (public: static char __cdecl std::_Narrow_char_traits<char,int>::to_char_type(int)):
  0000000000000000: 89 4C 24 08        mov         dword ptr [rsp+8],ecx
  0000000000000004: 57                 push        rdi
  0000000000000005: 0F B6 44 24 10     movzx       eax,byte ptr [rsp+10h]
  000000000000000A: 5F                 pop         rdi
  000000000000000B: C3                 ret

?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z (public: static int __cdecl std::_Narrow_char_traits<char,int>::to_int_type(char)):
  0000000000000000: 88 4C 24 08        mov         byte ptr [rsp+8],cl
  0000000000000004: 57                 push        rdi
  0000000000000005: 0F B6 44 24 10     movzx       eax,byte ptr [rsp+10h]
  000000000000000A: 5F                 pop         rdi
  000000000000000B: C3                 ret

?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::uflow(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 81 EC 60 01 00  sub         rsp,160h
                    00
  000000000000000D: 48 8D 7C 24 40     lea         rdi,[rsp+40h]
  0000000000000012: B9 48 00 00 00     mov         ecx,48h
  0000000000000017: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000000000000001C: F3 AB              rep stos    dword ptr [rdi]
  000000000000001E: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  0000000000000026: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000002D: 48 33 C4           xor         rax,rsp
  0000000000000030: 48 89 84 24 58 01  mov         qword ptr [rsp+158h],rax
                    00 00
  0000000000000038: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  0000000000000040: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000046: 48 85 C0           test        rax,rax
  0000000000000049: 74 4C              je          0000000000000097
  000000000000004B: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  0000000000000053: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000059: 48 89 84 24 18 01  mov         qword ptr [rsp+118h],rax
                    00 00
  0000000000000061: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  0000000000000069: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000006F: 48 8B 8C 24 18 01  mov         rcx,qword ptr [rsp+118h]
                    00 00
  0000000000000077: 48 3B C8           cmp         rcx,rax
  000000000000007A: 73 1B              jae         0000000000000097
  000000000000007C: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  0000000000000084: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  000000000000008A: 0F B6 08           movzx       ecx,byte ptr [rax]
  000000000000008D: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  0000000000000092: E9 1C 03 00 00     jmp         00000000000003B3
  0000000000000097: 48 8B 84 24 70 01  mov         rax,qword ptr [rsp+170h]
                    00 00
  000000000000009F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  00000000000000A7: 75 0A              jne         00000000000000B3
  00000000000000A9: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00000000000000AE: E9 00 03 00 00     jmp         00000000000003B3
  00000000000000B3: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  00000000000000BB: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000C0: 90                 nop
  00000000000000C1: 48 8B 84 24 70 01  mov         rax,qword ptr [rsp+170h]
                    00 00
  00000000000000C9: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  00000000000000CE: 75 4B              jne         000000000000011B
  00000000000000D0: 48 8B 84 24 70 01  mov         rax,qword ptr [rsp+170h]
                    00 00
  00000000000000D8: 48 8B 90 80 00 00  mov         rdx,qword ptr [rax+80h]
                    00
  00000000000000DF: 48 8D 4C 24 44     lea         rcx,[rsp+44h]
  00000000000000E4: E8 00 00 00 00     call        ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
  00000000000000E9: 0F B6 C0           movzx       eax,al
  00000000000000EC: 85 C0              test        eax,eax
  00000000000000EE: 74 13              je          0000000000000103
  00000000000000F0: 0F B6 4C 24 44     movzx       ecx,byte ptr [rsp+44h]
  00000000000000F5: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  00000000000000FA: 89 84 24 20 01 00  mov         dword ptr [rsp+120h],eax
                    00
  0000000000000101: EB 0C              jmp         000000000000010F
  0000000000000103: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000108: 89 84 24 20 01 00  mov         dword ptr [rsp+120h],eax
                    00
  000000000000010F: 8B 84 24 20 01 00  mov         eax,dword ptr [rsp+120h]
                    00
  0000000000000116: E9 98 02 00 00     jmp         00000000000003B3
  000000000000011B: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000120: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000125: 90                 nop
  0000000000000126: 48 8B 84 24 70 01  mov         rax,qword ptr [rsp+170h]
                    00 00
  000000000000012E: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000135: FF 15 00 00 00 00  call        qword ptr [__imp_fgetc]
  000000000000013B: 89 84 24 B4 00 00  mov         dword ptr [rsp+0B4h],eax
                    00
  0000000000000142: 83 BC 24 B4 00 00  cmp         dword ptr [rsp+0B4h],0FFFFFFFFh
                    00 FF
  000000000000014A: 75 22              jne         000000000000016E
  000000000000014C: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000151: 89 84 24 08 01 00  mov         dword ptr [rsp+108h],eax
                    00
  0000000000000158: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  000000000000015D: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000162: 8B 84 24 08 01 00  mov         eax,dword ptr [rsp+108h]
                    00
  0000000000000169: E9 45 02 00 00     jmp         00000000000003B3
  000000000000016E: 0F B6 94 24 B4 00  movzx       edx,byte ptr [rsp+0B4h]
                    00 00
  0000000000000176: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  000000000000017B: E8 00 00 00 00     call        ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
  0000000000000180: 90                 nop
  0000000000000181: 48 8B 84 24 70 01  mov         rax,qword ptr [rsp+170h]
                    00 00
  0000000000000189: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  000000000000018D: 48 89 84 24 28 01  mov         qword ptr [rsp+128h],rax
                    00 00
  0000000000000195: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  000000000000019A: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  000000000000019F: 48 89 84 24 30 01  mov         qword ptr [rsp+130h],rax
                    00 00
  00000000000001A7: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  00000000000001AC: E8 00 00 00 00     call        ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  00000000000001B1: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  00000000000001B9: 48 03 C8           add         rcx,rax
  00000000000001BC: 48 8B C1           mov         rax,rcx
  00000000000001BF: 48 89 84 24 38 01  mov         qword ptr [rsp+138h],rax
                    00 00
  00000000000001C7: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  00000000000001CC: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  00000000000001D1: 48 89 84 24 40 01  mov         qword ptr [rsp+140h],rax
                    00 00
  00000000000001D9: 48 8D 84 24 C5 00  lea         rax,[rsp+0C5h]
                    00 00
  00000000000001E1: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  00000000000001E9: 48 83 C1 74        add         rcx,74h
  00000000000001ED: 48 8D 94 24 E8 00  lea         rdx,[rsp+0E8h]
                    00 00
  00000000000001F5: 48 89 54 24 38     mov         qword ptr [rsp+38h],rdx
  00000000000001FA: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000001FF: 48 8D 84 24 C4 00  lea         rax,[rsp+0C4h]
                    00 00
  0000000000000207: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000020C: 48 8D 84 24 A8 00  lea         rax,[rsp+0A8h]
                    00 00
  0000000000000214: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000219: 4C 8B 8C 24 38 01  mov         r9,qword ptr [rsp+138h]
                    00 00
  0000000000000221: 4C 8B 84 24 40 01  mov         r8,qword ptr [rsp+140h]
                    00 00
  0000000000000229: 48 8B D1           mov         rdx,rcx
  000000000000022C: 48 8B 8C 24 28 01  mov         rcx,qword ptr [rsp+128h]
                    00 00
  0000000000000234: FF 15 00 00 00 00  call        qword ptr [__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z]
  000000000000023A: 89 84 24 48 01 00  mov         dword ptr [rsp+148h],eax
                    00
  0000000000000241: 83 BC 24 48 01 00  cmp         dword ptr [rsp+148h],0
                    00 00
  0000000000000249: 74 1D              je          0000000000000268
  000000000000024B: 83 BC 24 48 01 00  cmp         dword ptr [rsp+148h],1
                    00 01
  0000000000000253: 74 13              je          0000000000000268
  0000000000000255: 83 BC 24 48 01 00  cmp         dword ptr [rsp+148h],3
                    00 03
  000000000000025D: 0F 84 FA 00 00 00  je          000000000000035D
  0000000000000263: E9 1C 01 00 00     jmp         0000000000000384
  0000000000000268: 48 8D 84 24 C4 00  lea         rax,[rsp+0C4h]
                    00 00
  0000000000000270: 48 39 84 24 E8 00  cmp         qword ptr [rsp+0E8h],rax
                    00 00
  0000000000000278: 0F 84 B5 00 00 00  je          0000000000000333
  000000000000027E: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000283: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  0000000000000288: 48 89 84 24 50 01  mov         qword ptr [rsp+150h],rax
                    00 00
  0000000000000290: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000295: E8 00 00 00 00     call        ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000029A: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  00000000000002A2: 48 03 C8           add         rcx,rax
  00000000000002A5: 48 8B C1           mov         rax,rcx
  00000000000002A8: 48 2B 84 24 A8 00  sub         rax,qword ptr [rsp+0A8h]
                    00 00
  00000000000002B0: 48 89 84 24 F8 00  mov         qword ptr [rsp+0F8h],rax
                    00 00
  00000000000002B8: 48 83 BC 24 F8 00  cmp         qword ptr [rsp+0F8h],0
                    00 00 00
  00000000000002C1: 7E 46              jle         0000000000000309
  00000000000002C3: 48 8B 84 24 F8 00  mov         rax,qword ptr [rsp+0F8h]
                    00 00
  00000000000002CB: 48 FF C8           dec         rax
  00000000000002CE: 48 89 84 24 F8 00  mov         qword ptr [rsp+0F8h],rax
                    00 00
  00000000000002D6: 48 8B 84 24 F8 00  mov         rax,qword ptr [rsp+0F8h]
                    00 00
  00000000000002DE: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  00000000000002E6: 48 03 C8           add         rcx,rax
  00000000000002E9: 48 8B C1           mov         rax,rcx
  00000000000002EC: 0F BE 00           movsx       eax,byte ptr [rax]
  00000000000002EF: 48 8B 8C 24 70 01  mov         rcx,qword ptr [rsp+170h]
                    00 00
  00000000000002F7: 48 8B 91 80 00 00  mov         rdx,qword ptr [rcx+80h]
                    00
  00000000000002FE: 8B C8              mov         ecx,eax
  0000000000000300: FF 15 00 00 00 00  call        qword ptr [__imp_ungetc]
  0000000000000306: 90                 nop
  0000000000000307: EB AF              jmp         00000000000002B8
  0000000000000309: 0F B6 8C 24 C4 00  movzx       ecx,byte ptr [rsp+0C4h]
                    00 00
  0000000000000311: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  0000000000000316: 89 84 24 0C 01 00  mov         dword ptr [rsp+10Ch],eax
                    00
  000000000000031D: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000322: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000327: 8B 84 24 0C 01 00  mov         eax,dword ptr [rsp+10Ch]
                    00
  000000000000032E: E9 80 00 00 00     jmp         00000000000003B3
  0000000000000333: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000338: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  000000000000033D: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000345: 48 2B C8           sub         rcx,rax
  0000000000000348: 48 8B C1           mov         rax,rcx
  000000000000034B: 4C 8B C0           mov         r8,rax
  000000000000034E: 33 D2              xor         edx,edx
  0000000000000350: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000355: E8 00 00 00 00     call        ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
  000000000000035A: 90                 nop
  000000000000035B: EB 46              jmp         00000000000003A3
  000000000000035D: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000362: E8 00 00 00 00     call        ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
  0000000000000367: 0F BE 00           movsx       eax,byte ptr [rax]
  000000000000036A: 89 84 24 10 01 00  mov         dword ptr [rsp+110h],eax
                    00
  0000000000000371: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000376: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000037B: 8B 84 24 10 01 00  mov         eax,dword ptr [rsp+110h]
                    00
  0000000000000382: EB 2F              jmp         00000000000003B3
  0000000000000384: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000389: 89 84 24 14 01 00  mov         dword ptr [rsp+114h],eax
                    00
  0000000000000390: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000395: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000039A: 8B 84 24 14 01 00  mov         eax,dword ptr [rsp+114h]
                    00
  00000000000003A1: EB 10              jmp         00000000000003B3
  00000000000003A3: E9 7E FD FF FF     jmp         0000000000000126
  00000000000003A8: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  00000000000003AD: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  00000000000003B2: 90                 nop
  00000000000003B3: 48 8B F8           mov         rdi,rax
  00000000000003B6: 48 8B CC           mov         rcx,rsp
  00000000000003B9: 48 8D 15 00 00 00  lea         rdx,[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData]
                    00
  00000000000003C0: E8 00 00 00 00     call        _RTC_CheckStackVars
  00000000000003C5: 48 8B C7           mov         rax,rdi
  00000000000003C8: 48 8B 8C 24 58 01  mov         rcx,qword ptr [rsp+158h]
                    00 00
  00000000000003D0: 48 33 CC           xor         rcx,rsp
  00000000000003D3: E8 00 00 00 00     call        __security_check_cookie
  00000000000003D8: 48 81 C4 60 01 00  add         rsp,160h
                    00
  00000000000003DF: 5F                 pop         rdi
  00000000000003E0: C3                 ret

?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA (int `protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::uflow(void)'::`1'::dtor$0):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 55                 push        rbp
  000000000000000B: 57                 push        rdi
  000000000000000C: 48 83 EC 28        sub         rsp,28h
  0000000000000010: 48 8B EA           mov         rbp,rdx
  0000000000000013: 48 8D 4D 68        lea         rcx,[rbp+68h]
  0000000000000017: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000001C: 48 83 C4 28        add         rsp,28h
  0000000000000020: 5F                 pop         rdi
  0000000000000021: 5D                 pop         rbp
  0000000000000022: C3                 ret

?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::underflow(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 40        sub         rsp,40h
  000000000000000A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000000F: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000015: 48 85 C0           test        rax,rax
  0000000000000018: 74 3C              je          0000000000000056
  000000000000001A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000001F: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000025: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000002A: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000002F: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000035: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000003A: 48 3B C8           cmp         rcx,rax
  000000000000003D: 73 17              jae         0000000000000056
  000000000000003F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000044: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000004A: 0F B6 08           movzx       ecx,byte ptr [rax]
  000000000000004D: E8 00 00 00 00     call        ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
  0000000000000052: EB 65              jmp         00000000000000B9
  0000000000000054: EB 63              jmp         00000000000000B9
  0000000000000056: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000005B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005E: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000063: FF 50 38           call        qword ptr [rax+38h]
  0000000000000066: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000006A: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000006E: 89 44 24 30        mov         dword ptr [rsp+30h],eax
  0000000000000072: E8 00 00 00 00     call        ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000000000000077: 89 44 24 34        mov         dword ptr [rsp+34h],eax
  000000000000007B: 8B 54 24 30        mov         edx,dword ptr [rsp+30h]
  000000000000007F: 8B 4C 24 34        mov         ecx,dword ptr [rsp+34h]
  0000000000000083: E8 00 00 00 00     call        ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
  0000000000000088: 0F B6 C0           movzx       eax,al
  000000000000008B: 85 C0              test        eax,eax
  000000000000008D: 74 08              je          0000000000000097
  000000000000008F: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000093: EB 24              jmp         00000000000000B9
  0000000000000095: EB 22              jmp         00000000000000B9
  0000000000000097: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000009C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000009F: 48 8B 40 20        mov         rax,qword ptr [rax+20h]
  00000000000000A3: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000A8: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  00000000000000AC: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000B1: FF 54 24 38        call        qword ptr [rsp+38h]
  00000000000000B5: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000000B9: 48 83 C4 40        add         rsp,40h
  00000000000000BD: 5F                 pop         rdi
  00000000000000BE: C3                 ret

?what@exception@std@@UEBAPEBDXZ (public: virtual char const * __cdecl std::exception::what(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: 48 83 78 08 00     cmp         qword ptr [rax+8],0
  0000000000000014: 74 0F              je          0000000000000025
  0000000000000016: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000001B: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000001F: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000023: EB 0B              jmp         0000000000000030
  0000000000000025: 48 8D 05 00 00 00  lea         rax,[??_C@_0BC@EOODALEL@Unknown?5exception@]
                    00
  000000000000002C: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000030: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000034: 48 83 C4 10        add         rsp,10h
  0000000000000038: 5F                 pop         rdi
  0000000000000039: C3                 ret

?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z (protected: virtual __int64 __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::xsgetn(char *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 81 EC 80 00 00  sub         rsp,80h
                    00
  0000000000000017: 48 8D 7C 24 20     lea         rdi,[rsp+20h]
  000000000000001C: B9 18 00 00 00     mov         ecx,18h
  0000000000000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000000000026: F3 AB              rep stos    dword ptr [rdi]
  0000000000000028: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000030: 48 83 BC 24 A0 00  cmp         qword ptr [rsp+0A0h],0
                    00 00 00
  0000000000000039: 7F 07              jg          0000000000000042
  000000000000003B: 33 C0              xor         eax,eax
  000000000000003D: E9 FD 01 00 00     jmp         000000000000023F
  0000000000000042: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  000000000000004A: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  000000000000004F: 74 23              je          0000000000000074
  0000000000000051: 4C 8B 84 24 A0 00  mov         r8,qword ptr [rsp+0A0h]
                    00 00
  0000000000000059: 48 8B 94 24 98 00  mov         rdx,qword ptr [rsp+98h]
                    00 00
  0000000000000061: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000069: FF 15 00 00 00 00  call        qword ptr [__imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z]
  000000000000006F: E9 CB 01 00 00     jmp         000000000000023F
  0000000000000074: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000007C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000081: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000089: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000008E: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000096: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ]
  000000000000009C: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000A1: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  00000000000000A7: 76 7D              jbe         0000000000000126
  00000000000000A9: 48 8D 54 24 48     lea         rdx,[rsp+48h]
  00000000000000AE: 48 8D 4C 24 28     lea         rcx,[rsp+28h]
  00000000000000B3: E8 00 00 00 00     call        ??$min@_K@std@@YAAEB_KAEB_K0@Z
  00000000000000B8: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000BB: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000C0: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  00000000000000C8: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  00000000000000CE: 4C 8B 44 24 58     mov         r8,qword ptr [rsp+58h]
  00000000000000D3: 48 8B D0           mov         rdx,rax
  00000000000000D6: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  00000000000000DE: E8 00 00 00 00     call        ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  00000000000000E3: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000E8: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  00000000000000F0: 48 03 C8           add         rcx,rax
  00000000000000F3: 48 8B C1           mov         rax,rcx
  00000000000000F6: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000000FE: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000103: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000108: 48 2B C8           sub         rcx,rax
  000000000000010B: 48 8B C1           mov         rax,rcx
  000000000000010E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000113: 8B 54 24 58        mov         edx,dword ptr [rsp+58h]
  0000000000000117: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  000000000000011F: FF 15 00 00 00 00  call        qword ptr [__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z]
  0000000000000125: 90                 nop
  0000000000000126: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  000000000000012E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000136: 0F 84 F3 00 00 00  je          000000000000022F
  000000000000013C: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000144: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  0000000000000149: 48 C7 44 24 60 FF  mov         qword ptr [rsp+60h],0FFFh
                    0F 00 00
  0000000000000152: 48 81 7C 24 28 FF  cmp         qword ptr [rsp+28h],0FFFh
                    0F 00 00
  000000000000015B: 76 7F              jbe         00000000000001DC
  000000000000015D: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  0000000000000165: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  000000000000016C: 41 B8 FF 0F 00 00  mov         r8d,0FFFh
  0000000000000172: BA 01 00 00 00     mov         edx,1
  0000000000000177: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  000000000000017F: FF 15 00 00 00 00  call        qword ptr [__imp_fread]
  0000000000000185: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  000000000000018A: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000018F: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  0000000000000197: 48 03 C8           add         rcx,rax
  000000000000019A: 48 8B C1           mov         rax,rcx
  000000000000019D: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000001A5: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000001AA: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000001AF: 48 2B C8           sub         rcx,rax
  00000000000001B2: 48 8B C1           mov         rax,rcx
  00000000000001B5: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000001BA: 48 81 7C 24 68 FF  cmp         qword ptr [rsp+68h],0FFFh
                    0F 00 00
  00000000000001C3: 74 12              je          00000000000001D7
  00000000000001C5: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000001CA: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000001CF: 48 2B C8           sub         rcx,rax
  00000000000001D2: 48 8B C1           mov         rax,rcx
  00000000000001D5: EB 68              jmp         000000000000023F
  00000000000001D7: E9 76 FF FF FF     jmp         0000000000000152
  00000000000001DC: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  00000000000001E2: 76 4B              jbe         000000000000022F
  00000000000001E4: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  00000000000001EC: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  00000000000001F3: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  00000000000001F8: BA 01 00 00 00     mov         edx,1
  00000000000001FD: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  0000000000000205: FF 15 00 00 00 00  call        qword ptr [__imp_fread]
  000000000000020B: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000210: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000215: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000021A: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000021F: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  0000000000000224: 48 2B C8           sub         rcx,rax
  0000000000000227: 48 8B C1           mov         rax,rcx
  000000000000022A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000022F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000234: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000239: 48 2B C8           sub         rcx,rax
  000000000000023C: 48 8B C1           mov         rax,rcx
  000000000000023F: 48 8B F8           mov         rdi,rax
  0000000000000242: 48 8B CC           mov         rcx,rsp
  0000000000000245: 48 8D 15 00 00 00  lea         rdx,[?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcFrameData]
                    00
  000000000000024C: E8 00 00 00 00     call        _RTC_CheckStackVars
  0000000000000251: 48 8B C7           mov         rax,rdi
  0000000000000254: 48 81 C4 80 00 00  add         rsp,80h
                    00
  000000000000025B: 5F                 pop         rdi
  000000000000025C: C3                 ret

?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z (protected: virtual __int64 __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::xsputn(char const *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 30        sub         rsp,30h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  000000000000001E: 74 1A              je          000000000000003A
  0000000000000020: 4C 8B 44 24 50     mov         r8,qword ptr [rsp+50h]
  0000000000000025: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000002A: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000002F: FF 15 00 00 00 00  call        qword ptr [__imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z]
  0000000000000035: E9 EF 00 00 00     jmp         0000000000000129
  000000000000003A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000044: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000049: FF 15 00 00 00 00  call        qword ptr [__imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ]
  000000000000004F: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000054: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  000000000000005A: 7E 75              jle         00000000000000D1
  000000000000005C: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000062: 7E 6D              jle         00000000000000D1
  0000000000000064: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000069: 48 39 44 24 50     cmp         qword ptr [rsp+50h],rax
  000000000000006E: 7D 0A              jge         000000000000007A
  0000000000000070: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000075: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000007A: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000007F: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000085: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  000000000000008A: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000008F: 48 8B C8           mov         rcx,rax
  0000000000000092: E8 00 00 00 00     call        ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  0000000000000097: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000009C: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000A1: 48 03 C8           add         rcx,rax
  00000000000000A4: 48 8B C1           mov         rax,rcx
  00000000000000A7: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000AC: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000B1: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000B6: 48 2B C8           sub         rcx,rax
  00000000000000B9: 48 8B C1           mov         rax,rcx
  00000000000000BC: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000C1: 8B 54 24 28        mov         edx,dword ptr [rsp+28h]
  00000000000000C5: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000CA: FF 15 00 00 00 00  call        qword ptr [__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z]
  00000000000000D0: 90                 nop
  00000000000000D1: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  00000000000000D7: 7E 40              jle         0000000000000119
  00000000000000D9: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000DE: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  00000000000000E6: 74 31              je          0000000000000119
  00000000000000E8: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000ED: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  00000000000000F4: 4C 8B 44 24 50     mov         r8,qword ptr [rsp+50h]
  00000000000000F9: BA 01 00 00 00     mov         edx,1
  00000000000000FE: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000103: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  0000000000000109: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000010E: 48 2B C8           sub         rcx,rax
  0000000000000111: 48 8B C1           mov         rax,rcx
  0000000000000114: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000119: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000011E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000123: 48 2B C8           sub         rcx,rax
  0000000000000126: 48 8B C1           mov         rax,rcx
  0000000000000129: 48 83 C4 30        add         rsp,30h
  000000000000012D: 5F                 pop         rdi
  000000000000012E: C3                 ret

wmemcpy:
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 57                 push        rdi
  0000000000000010: 48 83 EC 20        sub         rsp,20h
  0000000000000014: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000019: 48 D1 E0           shl         rax,1
  000000000000001C: 4C 8B C0           mov         r8,rax
  000000000000001F: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000024: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000029: E8 00 00 00 00     call        memcpy
  000000000000002E: 48 83 C4 20        add         rsp,20h
  0000000000000032: 5F                 pop         rdi
  0000000000000033: C3                 ret

  Summary

          10 .bss
        22A8 .chks64
          28 .data
          9A .data$r
         190 .data$rs
       257E4 .debug$S
          74 .debug$T
         13E .drectve
         B28 .pdata
        24C2 .rdata
         4CC .rdata$r
           8 .rtc$IMZ
           8 .rtc$TMZ
        6781 .text$mn
         3F6 .text$x
          A2 .voltbl
         AA1 .xdata
          F8 .xdata$x
